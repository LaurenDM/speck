/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Wed Mar  2 23:25:02 EST 2016
 * 
 */
#include "bluesim_primitives.h"
#include "mkDutWrapper.h"


/* Constructor */
MOD_mkDutWrapper::MOD_mkDutWrapper(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    __clk_handle_1(BAD_CLOCK_HANDLE),
    INST_fromApSyncQ(simHdl, "fromApSyncQ", this, 16u, 2u, 0u),
    INST_p_chunker_index(simHdl, "p_chunker_index", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_p_chunker_infifo(simHdl, "p_chunker_infifo", this, 64u, 2u, 1u, 0u),
    INST_p_chunker_outfifo(simHdl, "p_chunker_outfifo", this, 512u, 2u, 1u, 0u),
    INST_p_chunker_pending(simHdl, "p_chunker_pending", this, 512u),
    INST_p_fft(simHdl, "p_fft", this),
    INST_p_fir(simHdl, "p_fir", this),
    INST_p_from_mp(simHdl, "p_from_mp", this),
    INST_p_ifft(simHdl, "p_ifft", this),
    INST_p_settablepitchadjust(simHdl, "p_settablepitchadjust", this),
    INST_p_splitter_index(simHdl, "p_splitter_index", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_p_splitter_infifo(simHdl, "p_splitter_infifo", this, 512u, 2u, 1u, 0u),
    INST_p_splitter_outfifo(simHdl, "p_splitter_outfifo", this, 64u, 2u, 1u, 0u),
    INST_p_to_mp(simHdl, "p_to_mp", this),
    INST_rst_usr(simHdl, "rst_usr", this, 5u, (tUInt8)1u),
    INST_toApFactorSyncQ(simHdl, "toApFactorSyncQ", this, 32u, 2u, 0u),
    INST_toApSyncQ(simHdl, "toApSyncQ", this, 16u, 2u, 0u),
    PORT_rst_usr$OUT_RST((tUInt8)1u),
    PORT_RST_N((tUInt8)1u),
    DEF_p_from_mp_response_get___d112(512u),
    DEF_p_ifft_response_get___d116(512u),
    DEF_p_fft_response_get___d100(512u),
    DEF_p_settablepitchadjust_adjust_response_get___d108(384u),
    DEF_p_to_mp_response_get___d104(384u),
    DEF_p_splitter_infifo_first____d42(512u),
    DEF_p_chunker_pending__h2271(512u),
    DEF_p_chunker_outfifo_first____d96(512u),
    DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38(512u),
    DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31(384u),
    DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24(256u),
    DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17(128u)
{
  PORT_EN_dut_request_put = false;
  PORT_EN_dut_response_get = false;
  PORT_EN_setfactor_put = false;
  PORT_dut_request_put = 0u;
  PORT_setfactor_put = 0u;
  PORT_RDY_dut_request_put = false;
  PORT_dut_response_get = 0u;
  PORT_RDY_dut_response_get = false;
  PORT_RDY_setfactor_put = false;
  INST_rst_usr.set_reset_fn_gen_rst(&static_reset_rst_usr$OUT_RST);
  symbol_count = 66u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDutWrapper::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_dut_request_put", SYM_DEF, &DEF_CAN_FIRE_dut_request_put, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_dut_response_get", SYM_DEF, &DEF_CAN_FIRE_dut_response_get, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_enqAPRequest", SYM_DEF, &DEF_CAN_FIRE_RL_enqAPRequest, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_getAPResponse", SYM_DEF, &DEF_CAN_FIRE_RL_getAPResponse, 1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_p_chunker_iterate",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_chunker_iterate,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_p_chunker_to_fft",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_chunker_to_fft,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_p_fft_to_to_mp",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_fft_to_to_mp,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_RL_p_fir_to_chunker",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_fir_to_chunker,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_RL_p_frommp_to_ifft",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_frommp_to_ifft,
	      1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_RL_p_ifft_to_splitter",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_ifft_to_splitter,
	      1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_RL_p_pitchadjust_to_frommp",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_RL_p_splitter_iterate",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_splitter_iterate,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_RL_p_to_mp_to_pitchadjust",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust,
	      1u);
  init_symbol(&symbols[13u], "CAN_FIRE_setfactor_put", SYM_DEF, &DEF_CAN_FIRE_setfactor_put, 1u);
  init_symbol(&symbols[14u], "dut_request_put", SYM_PORT, &PORT_dut_request_put, 16u);
  init_symbol(&symbols[15u], "dut_response_get", SYM_PORT, &PORT_dut_response_get, 16u);
  init_symbol(&symbols[16u], "EN_dut_request_put", SYM_PORT, &PORT_EN_dut_request_put, 1u);
  init_symbol(&symbols[17u], "EN_dut_response_get", SYM_PORT, &PORT_EN_dut_response_get, 1u);
  init_symbol(&symbols[18u], "EN_setfactor_put", SYM_PORT, &PORT_EN_setfactor_put, 1u);
  init_symbol(&symbols[19u], "fromApSyncQ", SYM_MODULE, &INST_fromApSyncQ);
  init_symbol(&symbols[20u], "p_chunker_index", SYM_MODULE, &INST_p_chunker_index);
  init_symbol(&symbols[21u], "p_chunker_infifo", SYM_MODULE, &INST_p_chunker_infifo);
  init_symbol(&symbols[22u], "p_chunker_outfifo", SYM_MODULE, &INST_p_chunker_outfifo);
  init_symbol(&symbols[23u], "p_chunker_pending", SYM_MODULE, &INST_p_chunker_pending);
  init_symbol(&symbols[24u], "p_fft", SYM_MODULE, &INST_p_fft);
  init_symbol(&symbols[25u], "p_fir", SYM_MODULE, &INST_p_fir);
  init_symbol(&symbols[26u], "p_from_mp", SYM_MODULE, &INST_p_from_mp);
  init_symbol(&symbols[27u], "p_ifft", SYM_MODULE, &INST_p_ifft);
  init_symbol(&symbols[28u], "p_settablepitchadjust", SYM_MODULE, &INST_p_settablepitchadjust);
  init_symbol(&symbols[29u], "p_splitter_index", SYM_MODULE, &INST_p_splitter_index);
  init_symbol(&symbols[30u], "p_splitter_infifo", SYM_MODULE, &INST_p_splitter_infifo);
  init_symbol(&symbols[31u], "p_splitter_outfifo", SYM_MODULE, &INST_p_splitter_outfifo);
  init_symbol(&symbols[32u], "p_to_mp", SYM_MODULE, &INST_p_to_mp);
  init_symbol(&symbols[33u], "RDY_dut_request_put", SYM_PORT, &PORT_RDY_dut_request_put, 1u);
  init_symbol(&symbols[34u], "RDY_dut_response_get", SYM_PORT, &PORT_RDY_dut_response_get, 1u);
  init_symbol(&symbols[35u], "RDY_setfactor_put", SYM_PORT, &PORT_RDY_setfactor_put, 1u);
  init_symbol(&symbols[36u], "RL_enqAPRequest", SYM_RULE);
  init_symbol(&symbols[37u], "RL_getAPResponse", SYM_RULE);
  init_symbol(&symbols[38u], "RL_p_chunker_iterate", SYM_RULE);
  init_symbol(&symbols[39u], "RL_p_chunker_to_fft", SYM_RULE);
  init_symbol(&symbols[40u], "RL_p_fft_to_to_mp", SYM_RULE);
  init_symbol(&symbols[41u], "RL_p_fir_to_chunker", SYM_RULE);
  init_symbol(&symbols[42u], "RL_p_frommp_to_ifft", SYM_RULE);
  init_symbol(&symbols[43u], "RL_p_ifft_to_splitter", SYM_RULE);
  init_symbol(&symbols[44u], "RL_p_pitchadjust_to_frommp", SYM_RULE);
  init_symbol(&symbols[45u], "RL_p_splitter_iterate", SYM_RULE);
  init_symbol(&symbols[46u], "RL_p_to_mp_to_pitchadjust", SYM_RULE);
  init_symbol(&symbols[47u], "rst_usr", SYM_MODULE, &INST_rst_usr);
  init_symbol(&symbols[48u], "setfactor_put", SYM_PORT, &PORT_setfactor_put, 32u);
  init_symbol(&symbols[49u], "toApFactorSyncQ", SYM_MODULE, &INST_toApFactorSyncQ);
  init_symbol(&symbols[50u], "toApSyncQ", SYM_MODULE, &INST_toApSyncQ);
  init_symbol(&symbols[51u],
	      "WILL_FIRE_dut_request_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_dut_request_put,
	      1u);
  init_symbol(&symbols[52u],
	      "WILL_FIRE_dut_response_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_dut_response_get,
	      1u);
  init_symbol(&symbols[53u],
	      "WILL_FIRE_RL_enqAPRequest",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_enqAPRequest,
	      1u);
  init_symbol(&symbols[54u],
	      "WILL_FIRE_RL_getAPResponse",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_getAPResponse,
	      1u);
  init_symbol(&symbols[55u],
	      "WILL_FIRE_RL_p_chunker_iterate",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_chunker_iterate,
	      1u);
  init_symbol(&symbols[56u],
	      "WILL_FIRE_RL_p_chunker_to_fft",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_chunker_to_fft,
	      1u);
  init_symbol(&symbols[57u],
	      "WILL_FIRE_RL_p_fft_to_to_mp",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_fft_to_to_mp,
	      1u);
  init_symbol(&symbols[58u],
	      "WILL_FIRE_RL_p_fir_to_chunker",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_fir_to_chunker,
	      1u);
  init_symbol(&symbols[59u],
	      "WILL_FIRE_RL_p_frommp_to_ifft",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_frommp_to_ifft,
	      1u);
  init_symbol(&symbols[60u],
	      "WILL_FIRE_RL_p_ifft_to_splitter",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_ifft_to_splitter,
	      1u);
  init_symbol(&symbols[61u],
	      "WILL_FIRE_RL_p_pitchadjust_to_frommp",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp,
	      1u);
  init_symbol(&symbols[62u],
	      "WILL_FIRE_RL_p_splitter_iterate",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_splitter_iterate,
	      1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_RL_p_to_mp_to_pitchadjust",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust,
	      1u);
  init_symbol(&symbols[64u], "WILL_FIRE_setfactor_put", SYM_DEF, &DEF_WILL_FIRE_setfactor_put, 1u);
  init_symbol(&symbols[65u], "x__h1208", SYM_DEF, &DEF_x__h1208, 3u);
}


/* Rule actions */

void MOD_mkDutWrapper::RL_p_chunker_iterate()
{
  tUInt8 DEF_x__h2299;
  tUInt8 DEF_IF_p_chunker_index_EQ_7_THEN_0_ELSE_p_chunker__ETC___d9;
  tUInt64 DEF_p_chunker_infifo_first____d10;
  DEF_x__h1208 = INST_p_chunker_index.METH_read();
  DEF_p_chunker_pending__h2271 = INST_p_chunker_pending.METH_read();
  DEF_p_chunker_infifo_first____d10 = INST_p_chunker_infifo.METH_first();
  DEF_p_chunker_index_EQ_7___d3 = DEF_x__h1208 == (tUInt8)7u;
  DEF_x__h2299 = (tUInt8)7u & (DEF_x__h1208 + (tUInt8)1u);
  DEF_IF_p_chunker_index_EQ_7_THEN_0_ELSE_p_chunker__ETC___d9 = DEF_p_chunker_index_EQ_7___d3 ? (tUInt8)0u : DEF_x__h2299;
  DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17.set_whole_word((tUInt32)((DEF_p_chunker_index_EQ_7___d3 ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																					   512u,
																					   DEF_p_chunker_pending__h2271,
																					   32u,
																					   511u,
																					   32u,
																					   448u)) >> 32u),
									      3u).build_concat((((tUInt64)((tUInt32)(DEF_p_chunker_index_EQ_7___d3 ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																								       512u,
																								       DEF_p_chunker_pending__h2271,
																								       32u,
																								       511u,
																								       32u,
																								       448u)))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)6u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																							      512u,
																																							      DEF_p_chunker_pending__h2271,
																																							      32u,
																																							      447u,
																																							      32u,
																																							      384u)) >> 32u)),
											       32u,
											       64u).set_whole_word((tUInt32)(DEF_x__h1208 == (tUInt8)6u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																									    512u,
																									    DEF_p_chunker_pending__h2271,
																									    32u,
																									    447u,
																									    32u,
																									    384u)),
														   0u);
  DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17.get_whole_word(3u),
									      7u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17.get_whole_word(2u),
												 6u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17.get_whole_word(1u),
														    5u).build_concat((((tUInt64)(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17.get_whole_word(0u))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)5u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																										 512u,
																																										 DEF_p_chunker_pending__h2271,
																																										 32u,
																																										 383u,
																																										 32u,
																																										 320u)) >> 32u)),
																     96u,
																     64u).build_concat((((tUInt64)((tUInt32)(DEF_x__h1208 == (tUInt8)5u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																															    512u,
																															    DEF_p_chunker_pending__h2271,
																															    32u,
																															    383u,
																															    32u,
																															    320u)))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)4u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																														   512u,
																																														   DEF_p_chunker_pending__h2271,
																																														   32u,
																																														   319u,
																																														   32u,
																																														   256u)) >> 32u)),
																		       32u,
																		       64u).set_whole_word((tUInt32)(DEF_x__h1208 == (tUInt8)4u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																    512u,
																																    DEF_p_chunker_pending__h2271,
																																    32u,
																																    319u,
																																    32u,
																																    256u)),
																					   0u);
  DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(7u),
									      11u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(6u),
												  10u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(5u),
														      9u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(4u),
																	 8u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(3u),
																			    7u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(2u),
																					       6u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(1u),
																								  5u).build_concat((((tUInt64)(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24.get_whole_word(0u))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)3u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																																			       512u,
																																																			       DEF_p_chunker_pending__h2271,
																																																			       32u,
																																																			       255u,
																																																			       32u,
																																																			       192u)) >> 32u)),
																										   96u,
																										   64u).build_concat((((tUInt64)((tUInt32)(DEF_x__h1208 == (tUInt8)3u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																									  512u,
																																									  DEF_p_chunker_pending__h2271,
																																									  32u,
																																									  255u,
																																									  32u,
																																									  192u)))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)2u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																																								 512u,
																																																								 DEF_p_chunker_pending__h2271,
																																																								 32u,
																																																								 191u,
																																																								 32u,
																																																								 128u)) >> 32u)),
																												     32u,
																												     64u).set_whole_word((tUInt32)(DEF_x__h1208 == (tUInt8)2u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																										  512u,
																																										  DEF_p_chunker_pending__h2271,
																																										  32u,
																																										  191u,
																																										  32u,
																																										  128u)),
																															 0u);
  DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38.set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(11u),
									      15u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(10u),
												  14u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(9u),
														      13u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(8u),
																	  12u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(7u),
																			      11u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(6u),
																						  10u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(5u),
																								      9u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(4u),
																											 8u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(3u),
																													    7u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(2u),
																															       6u).set_whole_word(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(1u),
																																		  5u).build_concat((((tUInt64)(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31.get_whole_word(0u))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)1u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																																													       512u,
																																																													       DEF_p_chunker_pending__h2271,
																																																													       32u,
																																																													       127u,
																																																													       32u,
																																																													       64u)) >> 32u)),
																																				   96u,
																																				   64u).build_concat((((tUInt64)((tUInt32)(DEF_x__h1208 == (tUInt8)1u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																																			  512u,
																																																			  DEF_p_chunker_pending__h2271,
																																																			  32u,
																																																			  127u,
																																																			  32u,
																																																			  64u)))) << 32u) | (tUInt64)((tUInt32)((DEF_x__h1208 == (tUInt8)0u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																																																		512u,
																																																																		DEF_p_chunker_pending__h2271,
																																																																		32u,
																																																																		63u,
																																																																		32u,
																																																																		0u)) >> 32u)),
																																						     32u,
																																						     64u).set_whole_word((tUInt32)(DEF_x__h1208 == (tUInt8)0u ? DEF_p_chunker_infifo_first____d10 : primExtract64(64u,
																																																				  512u,
																																																				  DEF_p_chunker_pending__h2271,
																																																				  32u,
																																																				  63u,
																																																				  32u,
																																																				  0u)),
																																									 0u);
  DEF_NOT_p_chunker_index_EQ_7___d4 = !DEF_p_chunker_index_EQ_7___d3;
  INST_p_chunker_infifo.METH_deq();
  INST_p_chunker_index.METH_write(DEF_IF_p_chunker_index_EQ_7_THEN_0_ELSE_p_chunker__ETC___d9);
  if (DEF_p_chunker_index_EQ_7___d3)
    INST_p_chunker_outfifo.METH_enq(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38);
  if (DEF_NOT_p_chunker_index_EQ_7___d4)
    INST_p_chunker_pending.METH_write(DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38);
}

void MOD_mkDutWrapper::RL_p_splitter_iterate()
{
  tUInt64 DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d84;
  tUInt8 DEF_x__h4178;
  tUInt8 DEF_p_splitter_index_2_EQ_7___d85;
  tUInt8 DEF_IF_p_splitter_index_2_EQ_7_5_THEN_0_ELSE_p_spl_ETC___d87;
  tUInt32 DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63;
  tUInt32 DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53;
  tUInt32 DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73;
  tUInt32 DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83;
  tUInt32 DEF_n_img_f__h4117;
  tUInt32 DEF_n_img_i__h4116;
  tUInt32 DEF_n_rel_f__h3825;
  tUInt32 DEF_n_rel_i__h3824;
  tUInt32 DEF_n_img_f__h4121;
  tUInt32 DEF_n_img_i__h4120;
  tUInt32 DEF_n_rel_f__h3829;
  tUInt32 DEF_n_rel_i__h3828;
  tUInt32 DEF_n_img_f__h4125;
  tUInt32 DEF_n_img_i__h4124;
  tUInt32 DEF_n_rel_f__h3833;
  tUInt32 DEF_n_rel_i__h3832;
  tUInt32 DEF_n_img_f__h4129;
  tUInt32 DEF_n_img_i__h4128;
  tUInt32 DEF_n_rel_f__h3837;
  tUInt32 DEF_n_rel_i__h3836;
  tUInt32 DEF_n_img_f__h4133;
  tUInt32 DEF_n_img_i__h4132;
  tUInt32 DEF_n_rel_f__h3841;
  tUInt32 DEF_n_rel_i__h3840;
  tUInt32 DEF_n_img_f__h4137;
  tUInt32 DEF_n_img_i__h4136;
  tUInt32 DEF_n_rel_f__h3845;
  tUInt32 DEF_n_rel_i__h3844;
  tUInt32 DEF_n_img_f__h4141;
  tUInt32 DEF_n_img_i__h4140;
  tUInt32 DEF_n_rel_f__h3849;
  tUInt32 DEF_n_rel_i__h3848;
  tUInt32 DEF_n_img_f__h4145;
  tUInt32 DEF_n_img_i__h4144;
  tUInt32 DEF_n_rel_f__h3853;
  tUInt32 DEF_n_rel_i__h3852;
  tUInt8 DEF_x__h3593;
  DEF_x__h3593 = INST_p_splitter_index.METH_read();
  DEF_p_splitter_infifo_first____d42 = INST_p_splitter_infifo.METH_first();
  DEF_n_rel_i__h3852 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(15u, 16u, 16u);
  DEF_n_rel_f__h3853 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(15u, 0u, 16u);
  DEF_n_img_i__h4144 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(14u, 16u, 16u);
  DEF_n_img_f__h4145 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(14u, 0u, 16u);
  DEF_n_rel_i__h3848 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(13u, 16u, 16u);
  DEF_n_rel_f__h3849 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(13u, 0u, 16u);
  DEF_n_img_i__h4140 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(12u, 16u, 16u);
  DEF_n_img_f__h4141 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(12u, 0u, 16u);
  DEF_n_rel_f__h3845 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(11u, 0u, 16u);
  DEF_n_rel_i__h3844 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(11u, 16u, 16u);
  DEF_n_img_i__h4136 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(10u, 16u, 16u);
  DEF_n_rel_i__h3840 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(9u, 16u, 16u);
  DEF_n_img_f__h4137 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(10u, 0u, 16u);
  DEF_n_rel_f__h3841 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(9u, 0u, 16u);
  DEF_n_img_f__h4133 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(8u, 0u, 16u);
  DEF_n_img_i__h4132 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(8u, 16u, 16u);
  DEF_n_rel_i__h3836 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(7u, 16u, 16u);
  DEF_n_rel_f__h3837 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(7u, 0u, 16u);
  DEF_n_img_i__h4128 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(6u, 16u, 16u);
  DEF_n_img_f__h4129 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(6u, 0u, 16u);
  DEF_n_rel_i__h3832 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(5u, 16u, 16u);
  DEF_n_rel_f__h3833 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(5u, 0u, 16u);
  DEF_n_img_i__h4124 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(4u, 16u, 16u);
  DEF_n_img_f__h4125 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(4u, 0u, 16u);
  DEF_n_rel_i__h3828 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(3u, 16u, 16u);
  DEF_n_img_i__h4120 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(2u, 16u, 16u);
  DEF_n_rel_f__h3829 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(3u, 0u, 16u);
  DEF_n_img_f__h4121 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(2u, 0u, 16u);
  DEF_n_rel_i__h3824 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(1u, 16u, 16u);
  DEF_n_rel_f__h3825 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(1u, 0u, 16u);
  DEF_n_img_i__h4116 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(0u, 16u, 16u);
  DEF_n_img_f__h4117 = DEF_p_splitter_infifo_first____d42.get_bits_in_word32(0u, 0u, 16u);
  switch (DEF_x__h3593) {
  case (tUInt8)0u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4117;
    break;
  case (tUInt8)1u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4121;
    break;
  case (tUInt8)2u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4125;
    break;
  case (tUInt8)3u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4129;
    break;
  case (tUInt8)4u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4133;
    break;
  case (tUInt8)5u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4137;
    break;
  case (tUInt8)6u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4141;
    break;
  case (tUInt8)7u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = DEF_n_img_f__h4145;
    break;
  default:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83 = 43690u;
  }
  switch (DEF_x__h3593) {
  case (tUInt8)0u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4116;
    break;
  case (tUInt8)1u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4120;
    break;
  case (tUInt8)2u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4124;
    break;
  case (tUInt8)3u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4128;
    break;
  case (tUInt8)4u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4132;
    break;
  case (tUInt8)5u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4136;
    break;
  case (tUInt8)6u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4140;
    break;
  case (tUInt8)7u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = DEF_n_img_i__h4144;
    break;
  default:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73 = 43690u;
  }
  switch (DEF_x__h3593) {
  case (tUInt8)0u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3824;
    break;
  case (tUInt8)1u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3828;
    break;
  case (tUInt8)2u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3832;
    break;
  case (tUInt8)3u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3836;
    break;
  case (tUInt8)4u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3840;
    break;
  case (tUInt8)5u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3844;
    break;
  case (tUInt8)6u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3848;
    break;
  case (tUInt8)7u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = DEF_n_rel_i__h3852;
    break;
  default:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53 = 43690u;
  }
  switch (DEF_x__h3593) {
  case (tUInt8)0u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3825;
    break;
  case (tUInt8)1u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3829;
    break;
  case (tUInt8)2u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3833;
    break;
  case (tUInt8)3u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3837;
    break;
  case (tUInt8)4u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3841;
    break;
  case (tUInt8)5u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3845;
    break;
  case (tUInt8)6u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3849;
    break;
  case (tUInt8)7u:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = DEF_n_rel_f__h3853;
    break;
  default:
    DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63 = 43690u;
  }
  DEF_p_splitter_index_2_EQ_7___d85 = DEF_x__h3593 == (tUInt8)7u;
  DEF_x__h4178 = (tUInt8)7u & (DEF_x__h3593 + (tUInt8)1u);
  DEF_IF_p_splitter_index_2_EQ_7_5_THEN_0_ELSE_p_spl_ETC___d87 = DEF_p_splitter_index_2_EQ_7___d85 ? (tUInt8)0u : DEF_x__h4178;
  DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d84 = (((((tUInt64)(DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d53)) << 48u) | (((tUInt64)(DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_47_TO__ETC___d63)) << 32u)) | (((tUInt64)(DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_31_TO__ETC___d73)) << 16u)) | (tUInt64)(DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_15_TO__ETC___d83);
  INST_p_splitter_outfifo.METH_enq(DEF_SEL_ARR_p_splitter_infifo_first__2_BITS_63_TO__ETC___d84);
  INST_p_splitter_index.METH_write(DEF_IF_p_splitter_index_2_EQ_7_5_THEN_0_ELSE_p_spl_ETC___d87);
  if (DEF_p_splitter_index_2_EQ_7___d85)
    INST_p_splitter_infifo.METH_deq();
}

void MOD_mkDutWrapper::RL_p_fir_to_chunker()
{
  tUInt64 DEF_p_fir_getSampleOutput_1_CONCAT_0_CONCAT_0___d92;
  tUInt32 DEF_realA_i__h4418;
  tUInt32 DEF_AVMeth_p_fir_getSampleOutput;
  DEF_AVMeth_p_fir_getSampleOutput = INST_p_fir.METH_getSampleOutput();
  DEF_realA_i__h4418 = DEF_AVMeth_p_fir_getSampleOutput;
  DEF_p_fir_getSampleOutput_1_CONCAT_0_CONCAT_0___d92 = ((tUInt64)(DEF_realA_i__h4418)) << 48u;
  INST_p_chunker_infifo.METH_enq(DEF_p_fir_getSampleOutput_1_CONCAT_0_CONCAT_0___d92);
}

void MOD_mkDutWrapper::RL_p_chunker_to_fft()
{
  DEF_p_chunker_outfifo_first____d96 = INST_p_chunker_outfifo.METH_first();
  INST_p_chunker_outfifo.METH_deq();
  INST_p_fft.METH_request_put(DEF_p_chunker_outfifo_first____d96);
}

void MOD_mkDutWrapper::RL_p_fft_to_to_mp()
{
  tUWide DEF_AVMeth_p_fft_response_get(512u, false);
  DEF_AVMeth_p_fft_response_get = INST_p_fft.METH_response_get();
  DEF_p_fft_response_get___d100 = DEF_AVMeth_p_fft_response_get;
  INST_p_to_mp.METH_request_put(DEF_p_fft_response_get___d100);
}

void MOD_mkDutWrapper::RL_p_to_mp_to_pitchadjust()
{
  tUWide DEF_AVMeth_p_to_mp_response_get(384u, false);
  DEF_AVMeth_p_to_mp_response_get = INST_p_to_mp.METH_response_get();
  DEF_p_to_mp_response_get___d104 = DEF_AVMeth_p_to_mp_response_get;
  INST_p_settablepitchadjust.METH_setfactor_put(131072u);
  INST_p_settablepitchadjust.METH_adjust_request_put(DEF_p_to_mp_response_get___d104);
}

void MOD_mkDutWrapper::RL_p_pitchadjust_to_frommp()
{
  tUWide DEF_AVMeth_p_settablepitchadjust_adjust_response_get(384u, false);
  DEF_AVMeth_p_settablepitchadjust_adjust_response_get = INST_p_settablepitchadjust.METH_adjust_response_get();
  DEF_p_settablepitchadjust_adjust_response_get___d108 = DEF_AVMeth_p_settablepitchadjust_adjust_response_get;
  INST_p_from_mp.METH_request_put(DEF_p_settablepitchadjust_adjust_response_get___d108);
}

void MOD_mkDutWrapper::RL_p_frommp_to_ifft()
{
  tUWide DEF_AVMeth_p_from_mp_response_get(512u, false);
  DEF_AVMeth_p_from_mp_response_get = INST_p_from_mp.METH_response_get();
  DEF_p_from_mp_response_get___d112 = DEF_AVMeth_p_from_mp_response_get;
  INST_p_ifft.METH_request_put(DEF_p_from_mp_response_get___d112);
}

void MOD_mkDutWrapper::RL_p_ifft_to_splitter()
{
  tUWide DEF_AVMeth_p_ifft_response_get(512u, false);
  DEF_AVMeth_p_ifft_response_get = INST_p_ifft.METH_response_get();
  DEF_p_ifft_response_get___d116 = DEF_AVMeth_p_ifft_response_get;
  INST_p_splitter_infifo.METH_enq(DEF_p_ifft_response_get___d116);
}

void MOD_mkDutWrapper::RL_enqAPRequest()
{
  tUInt32 DEF_toApSyncQ_first____d122;
  DEF_toApSyncQ_first____d122 = INST_toApSyncQ.METH_first();
  INST_p_fir.METH_putSampleInput(DEF_toApSyncQ_first____d122);
  INST_toApSyncQ.METH_deq();
}

void MOD_mkDutWrapper::RL_getAPResponse()
{
  tUInt32 DEF_p_splitter_outfifo_first__26_BITS_63_TO_48___d127;
  DEF_p_splitter_outfifo_first__26_BITS_63_TO_48___d127 = (tUInt32)(INST_p_splitter_outfifo.METH_first() >> 48u);
  INST_p_splitter_outfifo.METH_deq();
  INST_fromApSyncQ.METH_enq(DEF_p_splitter_outfifo_first__26_BITS_63_TO_48___d127);
}


/* Methods */

void MOD_mkDutWrapper::METH_dut_request_put(tUInt32 ARG_dut_request_put)
{
  PORT_EN_dut_request_put = (tUInt8)1u;
  DEF_WILL_FIRE_dut_request_put = (tUInt8)1u;
  PORT_dut_request_put = ARG_dut_request_put;
  INST_toApSyncQ.METH_enq(ARG_dut_request_put);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_dut_request_put()
{
  DEF_CAN_FIRE_dut_request_put = INST_toApSyncQ.METH_RDY_enq();
  PORT_RDY_dut_request_put = DEF_CAN_FIRE_dut_request_put;
  return PORT_RDY_dut_request_put;
}

tUInt32 MOD_mkDutWrapper::METH_dut_response_get()
{
  tUInt32 DEF_dut_response_get__avValue1;
  PORT_EN_dut_response_get = (tUInt8)1u;
  DEF_WILL_FIRE_dut_response_get = (tUInt8)1u;
  DEF_dut_response_get__avValue1 = INST_fromApSyncQ.METH_first();
  PORT_dut_response_get = DEF_dut_response_get__avValue1;
  INST_fromApSyncQ.METH_deq();
  return PORT_dut_response_get;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_dut_response_get()
{
  DEF_CAN_FIRE_dut_response_get = INST_fromApSyncQ.METH_RDY_deq() && INST_fromApSyncQ.METH_RDY_first();
  PORT_RDY_dut_response_get = DEF_CAN_FIRE_dut_response_get;
  return PORT_RDY_dut_response_get;
}

void MOD_mkDutWrapper::METH_setfactor_put(tUInt32 ARG_setfactor_put)
{
  PORT_EN_setfactor_put = (tUInt8)1u;
  DEF_WILL_FIRE_setfactor_put = (tUInt8)1u;
  PORT_setfactor_put = ARG_setfactor_put;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_setfactor_put()
{
  DEF_CAN_FIRE_setfactor_put = (tUInt8)1u;
  PORT_RDY_setfactor_put = DEF_CAN_FIRE_setfactor_put;
  return PORT_RDY_setfactor_put;
}


/* Reset routines */

void MOD_mkDutWrapper::reset_rst_usr$OUT_RST(tUInt8 ARG_rst_in)
{
  PORT_rst_usr$OUT_RST = ARG_rst_in;
  INST_p_to_mp.reset_RST_N(ARG_rst_in);
  INST_p_splitter_outfifo.reset_RST(ARG_rst_in);
  INST_p_splitter_infifo.reset_RST(ARG_rst_in);
  INST_p_splitter_index.reset_RST(ARG_rst_in);
  INST_p_settablepitchadjust.reset_RST_N(ARG_rst_in);
  INST_p_ifft.reset_RST_N(ARG_rst_in);
  INST_p_from_mp.reset_RST_N(ARG_rst_in);
  INST_p_fir.reset_RST_N(ARG_rst_in);
  INST_p_fft.reset_RST_N(ARG_rst_in);
  INST_p_chunker_outfifo.reset_RST(ARG_rst_in);
  INST_p_chunker_infifo.reset_RST(ARG_rst_in);
  INST_p_chunker_index.reset_RST(ARG_rst_in);
  INST_fromApSyncQ.reset_sRST(ARG_rst_in);
}

void MOD_mkDutWrapper::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_toApSyncQ.reset_sRST(ARG_rst_in);
  INST_toApFactorSyncQ.reset_sRST(ARG_rst_in);
  INST_rst_usr.reset_IN_RST(ARG_rst_in);
}


/* Static handles to reset routines */

void MOD_mkDutWrapper::static_reset_rst_usr$OUT_RST(void *my_this, tUInt8 ARG_rst_in)
{
  (((MOD_mkDutWrapper *)(my_this))->reset_rst_usr$OUT_RST)(ARG_rst_in);
}


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDutWrapper::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}

void MOD_mkDutWrapper::set_clk_1(char const *s)
{
  __clk_handle_1 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDutWrapper::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_fromApSyncQ.dump_state(indent + 2u);
  INST_p_chunker_index.dump_state(indent + 2u);
  INST_p_chunker_infifo.dump_state(indent + 2u);
  INST_p_chunker_outfifo.dump_state(indent + 2u);
  INST_p_chunker_pending.dump_state(indent + 2u);
  INST_p_fft.dump_state(indent + 2u);
  INST_p_fir.dump_state(indent + 2u);
  INST_p_from_mp.dump_state(indent + 2u);
  INST_p_ifft.dump_state(indent + 2u);
  INST_p_settablepitchadjust.dump_state(indent + 2u);
  INST_p_splitter_index.dump_state(indent + 2u);
  INST_p_splitter_infifo.dump_state(indent + 2u);
  INST_p_splitter_outfifo.dump_state(indent + 2u);
  INST_p_to_mp.dump_state(indent + 2u);
  INST_rst_usr.dump_state(indent + 2u);
  INST_toApFactorSyncQ.dump_state(indent + 2u);
  INST_toApSyncQ.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDutWrapper::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 65u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_1), "CLK_clk_usr", 1u);
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_enqAPRequest", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_getAPResponse", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_chunker_iterate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_chunker_to_fft", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_fft_to_to_mp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_fir_to_chunker", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_frommp_to_ifft", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_ifft_to_splitter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_pitchadjust_to_frommp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_splitter_iterate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_p_to_mp_to_pitchadjust", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_dut_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_dut_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_setfactor_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31", 384u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "NOT_p_chunker_index_EQ_7___d4", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_enqAPRequest", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_getAPResponse", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_chunker_iterate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_chunker_to_fft", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_fft_to_to_mp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_fir_to_chunker", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_frommp_to_ifft", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_ifft_to_splitter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_pitchadjust_to_frommp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_splitter_iterate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_p_to_mp_to_pitchadjust", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_dut_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_dut_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_setfactor_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_chunker_index_EQ_7___d3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_chunker_outfifo_first____d96", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_chunker_pending__h2271", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_fft_response_get___d100", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_from_mp_response_get___d112", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_ifft_response_get___d116", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_settablepitchadjust_adjust_response_get___d108", 384u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_splitter_infifo_first____d42", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "p_to_mp_response_get___d104", 384u);
  vcd_write_def(sim_hdl, num++, "rst_usr$OUT_RST", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_1);
  vcd_write_def(sim_hdl, num++, "x__h1208", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_dut_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_dut_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_setfactor_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_dut_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_dut_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_setfactor_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_request_put", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_response_get", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "setfactor_put", 32u);
  num = INST_fromApSyncQ.dump_VCD_defs(num);
  num = INST_p_chunker_index.dump_VCD_defs(num);
  num = INST_p_chunker_infifo.dump_VCD_defs(num);
  num = INST_p_chunker_outfifo.dump_VCD_defs(num);
  num = INST_p_chunker_pending.dump_VCD_defs(num);
  num = INST_p_splitter_index.dump_VCD_defs(num);
  num = INST_p_splitter_infifo.dump_VCD_defs(num);
  num = INST_p_splitter_outfifo.dump_VCD_defs(num);
  num = INST_rst_usr.dump_VCD_defs(num);
  num = INST_toApFactorSyncQ.dump_VCD_defs(num);
  num = INST_toApSyncQ.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_p_fft.dump_VCD_defs(l);
    num = INST_p_fir.dump_VCD_defs(l);
    num = INST_p_from_mp.dump_VCD_defs(l);
    num = INST_p_ifft.dump_VCD_defs(l);
    num = INST_p_settablepitchadjust.dump_VCD_defs(l);
    num = INST_p_to_mp.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDutWrapper::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkDutWrapper::vcd_defs(tVCDDumpType dt, MOD_mkDutWrapper &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 384u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 384u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 384u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_enqAPRequest) != DEF_CAN_FIRE_RL_enqAPRequest)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_enqAPRequest, 1u);
	backing.DEF_CAN_FIRE_RL_enqAPRequest = DEF_CAN_FIRE_RL_enqAPRequest;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_getAPResponse) != DEF_CAN_FIRE_RL_getAPResponse)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_getAPResponse, 1u);
	backing.DEF_CAN_FIRE_RL_getAPResponse = DEF_CAN_FIRE_RL_getAPResponse;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_chunker_iterate) != DEF_CAN_FIRE_RL_p_chunker_iterate)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_chunker_iterate, 1u);
	backing.DEF_CAN_FIRE_RL_p_chunker_iterate = DEF_CAN_FIRE_RL_p_chunker_iterate;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_chunker_to_fft) != DEF_CAN_FIRE_RL_p_chunker_to_fft)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_chunker_to_fft, 1u);
	backing.DEF_CAN_FIRE_RL_p_chunker_to_fft = DEF_CAN_FIRE_RL_p_chunker_to_fft;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_fft_to_to_mp) != DEF_CAN_FIRE_RL_p_fft_to_to_mp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_fft_to_to_mp, 1u);
	backing.DEF_CAN_FIRE_RL_p_fft_to_to_mp = DEF_CAN_FIRE_RL_p_fft_to_to_mp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_fir_to_chunker) != DEF_CAN_FIRE_RL_p_fir_to_chunker)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_fir_to_chunker, 1u);
	backing.DEF_CAN_FIRE_RL_p_fir_to_chunker = DEF_CAN_FIRE_RL_p_fir_to_chunker;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_frommp_to_ifft) != DEF_CAN_FIRE_RL_p_frommp_to_ifft)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_frommp_to_ifft, 1u);
	backing.DEF_CAN_FIRE_RL_p_frommp_to_ifft = DEF_CAN_FIRE_RL_p_frommp_to_ifft;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_ifft_to_splitter) != DEF_CAN_FIRE_RL_p_ifft_to_splitter)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_ifft_to_splitter, 1u);
	backing.DEF_CAN_FIRE_RL_p_ifft_to_splitter = DEF_CAN_FIRE_RL_p_ifft_to_splitter;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp) != DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp, 1u);
	backing.DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp = DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_splitter_iterate) != DEF_CAN_FIRE_RL_p_splitter_iterate)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_splitter_iterate, 1u);
	backing.DEF_CAN_FIRE_RL_p_splitter_iterate = DEF_CAN_FIRE_RL_p_splitter_iterate;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust) != DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust, 1u);
	backing.DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust = DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_dut_request_put) != DEF_CAN_FIRE_dut_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_dut_request_put, 1u);
	backing.DEF_CAN_FIRE_dut_request_put = DEF_CAN_FIRE_dut_request_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_dut_response_get) != DEF_CAN_FIRE_dut_response_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_dut_response_get, 1u);
	backing.DEF_CAN_FIRE_dut_response_get = DEF_CAN_FIRE_dut_response_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_setfactor_put) != DEF_CAN_FIRE_setfactor_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_setfactor_put, 1u);
	backing.DEF_CAN_FIRE_setfactor_put = DEF_CAN_FIRE_setfactor_put;
      }
      ++num;
      if ((backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17) != DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17, 128u);
	backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17;
      }
      ++num;
      if ((backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24) != DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24, 256u);
	backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24;
      }
      ++num;
      if ((backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31) != DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31, 384u);
	backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31;
      }
      ++num;
      if ((backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38) != DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38, 512u);
	backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38;
      }
      ++num;
      if ((backing.DEF_NOT_p_chunker_index_EQ_7___d4) != DEF_NOT_p_chunker_index_EQ_7___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_p_chunker_index_EQ_7___d4, 1u);
	backing.DEF_NOT_p_chunker_index_EQ_7___d4 = DEF_NOT_p_chunker_index_EQ_7___d4;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_enqAPRequest) != DEF_WILL_FIRE_RL_enqAPRequest)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_enqAPRequest, 1u);
	backing.DEF_WILL_FIRE_RL_enqAPRequest = DEF_WILL_FIRE_RL_enqAPRequest;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_getAPResponse) != DEF_WILL_FIRE_RL_getAPResponse)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_getAPResponse, 1u);
	backing.DEF_WILL_FIRE_RL_getAPResponse = DEF_WILL_FIRE_RL_getAPResponse;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_chunker_iterate) != DEF_WILL_FIRE_RL_p_chunker_iterate)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_chunker_iterate, 1u);
	backing.DEF_WILL_FIRE_RL_p_chunker_iterate = DEF_WILL_FIRE_RL_p_chunker_iterate;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_chunker_to_fft) != DEF_WILL_FIRE_RL_p_chunker_to_fft)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_chunker_to_fft, 1u);
	backing.DEF_WILL_FIRE_RL_p_chunker_to_fft = DEF_WILL_FIRE_RL_p_chunker_to_fft;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_fft_to_to_mp) != DEF_WILL_FIRE_RL_p_fft_to_to_mp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_fft_to_to_mp, 1u);
	backing.DEF_WILL_FIRE_RL_p_fft_to_to_mp = DEF_WILL_FIRE_RL_p_fft_to_to_mp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_fir_to_chunker) != DEF_WILL_FIRE_RL_p_fir_to_chunker)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_fir_to_chunker, 1u);
	backing.DEF_WILL_FIRE_RL_p_fir_to_chunker = DEF_WILL_FIRE_RL_p_fir_to_chunker;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_frommp_to_ifft) != DEF_WILL_FIRE_RL_p_frommp_to_ifft)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_frommp_to_ifft, 1u);
	backing.DEF_WILL_FIRE_RL_p_frommp_to_ifft = DEF_WILL_FIRE_RL_p_frommp_to_ifft;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_ifft_to_splitter) != DEF_WILL_FIRE_RL_p_ifft_to_splitter)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_ifft_to_splitter, 1u);
	backing.DEF_WILL_FIRE_RL_p_ifft_to_splitter = DEF_WILL_FIRE_RL_p_ifft_to_splitter;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp) != DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp, 1u);
	backing.DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp = DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_splitter_iterate) != DEF_WILL_FIRE_RL_p_splitter_iterate)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_splitter_iterate, 1u);
	backing.DEF_WILL_FIRE_RL_p_splitter_iterate = DEF_WILL_FIRE_RL_p_splitter_iterate;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust) != DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust, 1u);
	backing.DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust = DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_dut_request_put) != DEF_WILL_FIRE_dut_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_dut_request_put, 1u);
	backing.DEF_WILL_FIRE_dut_request_put = DEF_WILL_FIRE_dut_request_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_dut_response_get) != DEF_WILL_FIRE_dut_response_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_dut_response_get, 1u);
	backing.DEF_WILL_FIRE_dut_response_get = DEF_WILL_FIRE_dut_response_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_setfactor_put) != DEF_WILL_FIRE_setfactor_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_setfactor_put, 1u);
	backing.DEF_WILL_FIRE_setfactor_put = DEF_WILL_FIRE_setfactor_put;
      }
      ++num;
      if ((backing.DEF_p_chunker_index_EQ_7___d3) != DEF_p_chunker_index_EQ_7___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_p_chunker_index_EQ_7___d3, 1u);
	backing.DEF_p_chunker_index_EQ_7___d3 = DEF_p_chunker_index_EQ_7___d3;
      }
      ++num;
      if ((backing.DEF_p_chunker_outfifo_first____d96) != DEF_p_chunker_outfifo_first____d96)
      {
	vcd_write_val(sim_hdl, num, DEF_p_chunker_outfifo_first____d96, 512u);
	backing.DEF_p_chunker_outfifo_first____d96 = DEF_p_chunker_outfifo_first____d96;
      }
      ++num;
      if ((backing.DEF_p_chunker_pending__h2271) != DEF_p_chunker_pending__h2271)
      {
	vcd_write_val(sim_hdl, num, DEF_p_chunker_pending__h2271, 512u);
	backing.DEF_p_chunker_pending__h2271 = DEF_p_chunker_pending__h2271;
      }
      ++num;
      if ((backing.DEF_p_fft_response_get___d100) != DEF_p_fft_response_get___d100)
      {
	vcd_write_val(sim_hdl, num, DEF_p_fft_response_get___d100, 512u);
	backing.DEF_p_fft_response_get___d100 = DEF_p_fft_response_get___d100;
      }
      ++num;
      if ((backing.DEF_p_from_mp_response_get___d112) != DEF_p_from_mp_response_get___d112)
      {
	vcd_write_val(sim_hdl, num, DEF_p_from_mp_response_get___d112, 512u);
	backing.DEF_p_from_mp_response_get___d112 = DEF_p_from_mp_response_get___d112;
      }
      ++num;
      if ((backing.DEF_p_ifft_response_get___d116) != DEF_p_ifft_response_get___d116)
      {
	vcd_write_val(sim_hdl, num, DEF_p_ifft_response_get___d116, 512u);
	backing.DEF_p_ifft_response_get___d116 = DEF_p_ifft_response_get___d116;
      }
      ++num;
      if ((backing.DEF_p_settablepitchadjust_adjust_response_get___d108) != DEF_p_settablepitchadjust_adjust_response_get___d108)
      {
	vcd_write_val(sim_hdl, num, DEF_p_settablepitchadjust_adjust_response_get___d108, 384u);
	backing.DEF_p_settablepitchadjust_adjust_response_get___d108 = DEF_p_settablepitchadjust_adjust_response_get___d108;
      }
      ++num;
      if ((backing.DEF_p_splitter_infifo_first____d42) != DEF_p_splitter_infifo_first____d42)
      {
	vcd_write_val(sim_hdl, num, DEF_p_splitter_infifo_first____d42, 512u);
	backing.DEF_p_splitter_infifo_first____d42 = DEF_p_splitter_infifo_first____d42;
      }
      ++num;
      if ((backing.DEF_p_to_mp_response_get___d104) != DEF_p_to_mp_response_get___d104)
      {
	vcd_write_val(sim_hdl, num, DEF_p_to_mp_response_get___d104, 384u);
	backing.DEF_p_to_mp_response_get___d104 = DEF_p_to_mp_response_get___d104;
      }
      ++num;
      if ((backing.PORT_rst_usr$OUT_RST) != PORT_rst_usr$OUT_RST)
      {
	vcd_write_val(sim_hdl, num, PORT_rst_usr$OUT_RST, 1u);
	backing.PORT_rst_usr$OUT_RST = PORT_rst_usr$OUT_RST;
      }
      ++num;
      if ((backing.DEF_x__h1208) != DEF_x__h1208)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1208, 3u);
	backing.DEF_x__h1208 = DEF_x__h1208;
      }
      ++num;
      if ((backing.PORT_EN_dut_request_put) != PORT_EN_dut_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_dut_request_put, 1u);
	backing.PORT_EN_dut_request_put = PORT_EN_dut_request_put;
      }
      ++num;
      if ((backing.PORT_EN_dut_response_get) != PORT_EN_dut_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_dut_response_get, 1u);
	backing.PORT_EN_dut_response_get = PORT_EN_dut_response_get;
      }
      ++num;
      if ((backing.PORT_EN_setfactor_put) != PORT_EN_setfactor_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_setfactor_put, 1u);
	backing.PORT_EN_setfactor_put = PORT_EN_setfactor_put;
      }
      ++num;
      if ((backing.PORT_RDY_dut_request_put) != PORT_RDY_dut_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_dut_request_put, 1u);
	backing.PORT_RDY_dut_request_put = PORT_RDY_dut_request_put;
      }
      ++num;
      if ((backing.PORT_RDY_dut_response_get) != PORT_RDY_dut_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_dut_response_get, 1u);
	backing.PORT_RDY_dut_response_get = PORT_RDY_dut_response_get;
      }
      ++num;
      if ((backing.PORT_RDY_setfactor_put) != PORT_RDY_setfactor_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_setfactor_put, 1u);
	backing.PORT_RDY_setfactor_put = PORT_RDY_setfactor_put;
      }
      ++num;
      if ((backing.PORT_dut_request_put) != PORT_dut_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_dut_request_put, 16u);
	backing.PORT_dut_request_put = PORT_dut_request_put;
      }
      ++num;
      if ((backing.PORT_dut_response_get) != PORT_dut_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_dut_response_get, 16u);
	backing.PORT_dut_response_get = PORT_dut_response_get;
      }
      ++num;
      if ((backing.PORT_setfactor_put) != PORT_setfactor_put)
      {
	vcd_write_val(sim_hdl, num, PORT_setfactor_put, 32u);
	backing.PORT_setfactor_put = PORT_setfactor_put;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_enqAPRequest, 1u);
      backing.DEF_CAN_FIRE_RL_enqAPRequest = DEF_CAN_FIRE_RL_enqAPRequest;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_getAPResponse, 1u);
      backing.DEF_CAN_FIRE_RL_getAPResponse = DEF_CAN_FIRE_RL_getAPResponse;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_chunker_iterate, 1u);
      backing.DEF_CAN_FIRE_RL_p_chunker_iterate = DEF_CAN_FIRE_RL_p_chunker_iterate;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_chunker_to_fft, 1u);
      backing.DEF_CAN_FIRE_RL_p_chunker_to_fft = DEF_CAN_FIRE_RL_p_chunker_to_fft;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_fft_to_to_mp, 1u);
      backing.DEF_CAN_FIRE_RL_p_fft_to_to_mp = DEF_CAN_FIRE_RL_p_fft_to_to_mp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_fir_to_chunker, 1u);
      backing.DEF_CAN_FIRE_RL_p_fir_to_chunker = DEF_CAN_FIRE_RL_p_fir_to_chunker;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_frommp_to_ifft, 1u);
      backing.DEF_CAN_FIRE_RL_p_frommp_to_ifft = DEF_CAN_FIRE_RL_p_frommp_to_ifft;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_ifft_to_splitter, 1u);
      backing.DEF_CAN_FIRE_RL_p_ifft_to_splitter = DEF_CAN_FIRE_RL_p_ifft_to_splitter;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp, 1u);
      backing.DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp = DEF_CAN_FIRE_RL_p_pitchadjust_to_frommp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_splitter_iterate, 1u);
      backing.DEF_CAN_FIRE_RL_p_splitter_iterate = DEF_CAN_FIRE_RL_p_splitter_iterate;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust, 1u);
      backing.DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust = DEF_CAN_FIRE_RL_p_to_mp_to_pitchadjust;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_dut_request_put, 1u);
      backing.DEF_CAN_FIRE_dut_request_put = DEF_CAN_FIRE_dut_request_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_dut_response_get, 1u);
      backing.DEF_CAN_FIRE_dut_response_get = DEF_CAN_FIRE_dut_response_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_setfactor_put, 1u);
      backing.DEF_CAN_FIRE_setfactor_put = DEF_CAN_FIRE_setfactor_put;
      vcd_write_val(sim_hdl, num++, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17, 128u);
      backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d17;
      vcd_write_val(sim_hdl, num++, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24, 256u);
      backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d24;
      vcd_write_val(sim_hdl, num++, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31, 384u);
      backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d31;
      vcd_write_val(sim_hdl, num++, DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38, 512u);
      backing.DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38 = DEF_IF_p_chunker_index_EQ_7_THEN_p_chunker_infifo__ETC___d38;
      vcd_write_val(sim_hdl, num++, DEF_NOT_p_chunker_index_EQ_7___d4, 1u);
      backing.DEF_NOT_p_chunker_index_EQ_7___d4 = DEF_NOT_p_chunker_index_EQ_7___d4;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_enqAPRequest, 1u);
      backing.DEF_WILL_FIRE_RL_enqAPRequest = DEF_WILL_FIRE_RL_enqAPRequest;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_getAPResponse, 1u);
      backing.DEF_WILL_FIRE_RL_getAPResponse = DEF_WILL_FIRE_RL_getAPResponse;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_chunker_iterate, 1u);
      backing.DEF_WILL_FIRE_RL_p_chunker_iterate = DEF_WILL_FIRE_RL_p_chunker_iterate;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_chunker_to_fft, 1u);
      backing.DEF_WILL_FIRE_RL_p_chunker_to_fft = DEF_WILL_FIRE_RL_p_chunker_to_fft;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_fft_to_to_mp, 1u);
      backing.DEF_WILL_FIRE_RL_p_fft_to_to_mp = DEF_WILL_FIRE_RL_p_fft_to_to_mp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_fir_to_chunker, 1u);
      backing.DEF_WILL_FIRE_RL_p_fir_to_chunker = DEF_WILL_FIRE_RL_p_fir_to_chunker;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_frommp_to_ifft, 1u);
      backing.DEF_WILL_FIRE_RL_p_frommp_to_ifft = DEF_WILL_FIRE_RL_p_frommp_to_ifft;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_ifft_to_splitter, 1u);
      backing.DEF_WILL_FIRE_RL_p_ifft_to_splitter = DEF_WILL_FIRE_RL_p_ifft_to_splitter;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp, 1u);
      backing.DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp = DEF_WILL_FIRE_RL_p_pitchadjust_to_frommp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_splitter_iterate, 1u);
      backing.DEF_WILL_FIRE_RL_p_splitter_iterate = DEF_WILL_FIRE_RL_p_splitter_iterate;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust, 1u);
      backing.DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust = DEF_WILL_FIRE_RL_p_to_mp_to_pitchadjust;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_dut_request_put, 1u);
      backing.DEF_WILL_FIRE_dut_request_put = DEF_WILL_FIRE_dut_request_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_dut_response_get, 1u);
      backing.DEF_WILL_FIRE_dut_response_get = DEF_WILL_FIRE_dut_response_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_setfactor_put, 1u);
      backing.DEF_WILL_FIRE_setfactor_put = DEF_WILL_FIRE_setfactor_put;
      vcd_write_val(sim_hdl, num++, DEF_p_chunker_index_EQ_7___d3, 1u);
      backing.DEF_p_chunker_index_EQ_7___d3 = DEF_p_chunker_index_EQ_7___d3;
      vcd_write_val(sim_hdl, num++, DEF_p_chunker_outfifo_first____d96, 512u);
      backing.DEF_p_chunker_outfifo_first____d96 = DEF_p_chunker_outfifo_first____d96;
      vcd_write_val(sim_hdl, num++, DEF_p_chunker_pending__h2271, 512u);
      backing.DEF_p_chunker_pending__h2271 = DEF_p_chunker_pending__h2271;
      vcd_write_val(sim_hdl, num++, DEF_p_fft_response_get___d100, 512u);
      backing.DEF_p_fft_response_get___d100 = DEF_p_fft_response_get___d100;
      vcd_write_val(sim_hdl, num++, DEF_p_from_mp_response_get___d112, 512u);
      backing.DEF_p_from_mp_response_get___d112 = DEF_p_from_mp_response_get___d112;
      vcd_write_val(sim_hdl, num++, DEF_p_ifft_response_get___d116, 512u);
      backing.DEF_p_ifft_response_get___d116 = DEF_p_ifft_response_get___d116;
      vcd_write_val(sim_hdl, num++, DEF_p_settablepitchadjust_adjust_response_get___d108, 384u);
      backing.DEF_p_settablepitchadjust_adjust_response_get___d108 = DEF_p_settablepitchadjust_adjust_response_get___d108;
      vcd_write_val(sim_hdl, num++, DEF_p_splitter_infifo_first____d42, 512u);
      backing.DEF_p_splitter_infifo_first____d42 = DEF_p_splitter_infifo_first____d42;
      vcd_write_val(sim_hdl, num++, DEF_p_to_mp_response_get___d104, 384u);
      backing.DEF_p_to_mp_response_get___d104 = DEF_p_to_mp_response_get___d104;
      vcd_write_val(sim_hdl, num++, PORT_rst_usr$OUT_RST, 1u);
      backing.PORT_rst_usr$OUT_RST = PORT_rst_usr$OUT_RST;
      vcd_write_val(sim_hdl, num++, DEF_x__h1208, 3u);
      backing.DEF_x__h1208 = DEF_x__h1208;
      vcd_write_val(sim_hdl, num++, PORT_EN_dut_request_put, 1u);
      backing.PORT_EN_dut_request_put = PORT_EN_dut_request_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_dut_response_get, 1u);
      backing.PORT_EN_dut_response_get = PORT_EN_dut_response_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_setfactor_put, 1u);
      backing.PORT_EN_setfactor_put = PORT_EN_setfactor_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_dut_request_put, 1u);
      backing.PORT_RDY_dut_request_put = PORT_RDY_dut_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_dut_response_get, 1u);
      backing.PORT_RDY_dut_response_get = PORT_RDY_dut_response_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_setfactor_put, 1u);
      backing.PORT_RDY_setfactor_put = PORT_RDY_setfactor_put;
      vcd_write_val(sim_hdl, num++, PORT_dut_request_put, 16u);
      backing.PORT_dut_request_put = PORT_dut_request_put;
      vcd_write_val(sim_hdl, num++, PORT_dut_response_get, 16u);
      backing.PORT_dut_response_get = PORT_dut_response_get;
      vcd_write_val(sim_hdl, num++, PORT_setfactor_put, 32u);
      backing.PORT_setfactor_put = PORT_setfactor_put;
    }
}

void MOD_mkDutWrapper::vcd_prims(tVCDDumpType dt, MOD_mkDutWrapper &backing)
{
  INST_fromApSyncQ.dump_VCD(dt, backing.INST_fromApSyncQ);
  INST_p_chunker_index.dump_VCD(dt, backing.INST_p_chunker_index);
  INST_p_chunker_infifo.dump_VCD(dt, backing.INST_p_chunker_infifo);
  INST_p_chunker_outfifo.dump_VCD(dt, backing.INST_p_chunker_outfifo);
  INST_p_chunker_pending.dump_VCD(dt, backing.INST_p_chunker_pending);
  INST_p_splitter_index.dump_VCD(dt, backing.INST_p_splitter_index);
  INST_p_splitter_infifo.dump_VCD(dt, backing.INST_p_splitter_infifo);
  INST_p_splitter_outfifo.dump_VCD(dt, backing.INST_p_splitter_outfifo);
  INST_rst_usr.dump_VCD(dt, backing.INST_rst_usr);
  INST_toApFactorSyncQ.dump_VCD(dt, backing.INST_toApFactorSyncQ);
  INST_toApSyncQ.dump_VCD(dt, backing.INST_toApSyncQ);
}

void MOD_mkDutWrapper::vcd_submodules(tVCDDumpType dt,
				      unsigned int levels,
				      MOD_mkDutWrapper &backing)
{
  INST_p_fft.dump_VCD(dt, levels, backing.INST_p_fft);
  INST_p_fir.dump_VCD(dt, levels, backing.INST_p_fir);
  INST_p_from_mp.dump_VCD(dt, levels, backing.INST_p_from_mp);
  INST_p_ifft.dump_VCD(dt, levels, backing.INST_p_ifft);
  INST_p_settablepitchadjust.dump_VCD(dt, levels, backing.INST_p_settablepitchadjust);
  INST_p_to_mp.dump_VCD(dt, levels, backing.INST_p_to_mp);
}
