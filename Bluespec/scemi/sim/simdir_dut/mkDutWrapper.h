/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Wed Apr  6 16:13:50 EDT 2016
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkDutWrapper_h__
#define __mkDutWrapper_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkSynthesizedDecrypt.h"
#include "mkSynthesizedEncrypt.h"


/* Class declaration for the mkDutWrapper module */
class MOD_mkDutWrapper : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
  tClock __clk_handle_1;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkSynthesizedDecrypt INST_decrypt;
  MOD_mkSynthesizedEncrypt INST_encrypt;
  MOD_SyncFIFO<tUInt64,tUInt8> INST_fromSyncQ;
  MOD_SyncReset INST_rst_usr;
  MOD_SyncFIFO<tUWide,tUInt8> INST_toKeySyncQ;
  MOD_SyncFIFO<tUInt64,tUInt8> INST_toSyncQ;
 
 /* Constructor */
 public:
  MOD_mkDutWrapper(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_rst_usr$OUT_RST;
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_dut_request_put;
  tUInt8 PORT_EN_dut_response_get;
  tUInt8 PORT_EN_setkey_put;
  tUInt64 PORT_dut_request_put;
  tUWide PORT_setkey_put;
  tUInt8 PORT_RDY_dut_request_put;
  tUInt64 PORT_dut_response_get;
  tUInt8 PORT_RDY_dut_response_get;
  tUInt8 PORT_RDY_setkey_put;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_setkey_put;
  tUInt8 DEF_WILL_FIRE_dut_response_get;
  tUInt8 DEF_WILL_FIRE_dut_request_put;
  tUInt8 DEF_WILL_FIRE_RL_putKey;
  tUInt8 DEF_CAN_FIRE_RL_putKey;
  tUInt8 DEF_WILL_FIRE_RL_getResponseDecrypt;
  tUInt8 DEF_CAN_FIRE_RL_getResponseDecrypt;
  tUInt8 DEF_WILL_FIRE_RL_getResponseEncrypt;
  tUInt8 DEF_CAN_FIRE_RL_getResponseEncrypt;
  tUInt8 DEF_WILL_FIRE_RL_enqRequest;
  tUInt8 DEF_CAN_FIRE_RL_enqRequest;
  tUInt8 DEF_CAN_FIRE_setkey_put;
  tUInt8 DEF_CAN_FIRE_dut_response_get;
  tUInt8 DEF_CAN_FIRE_dut_request_put;
  tUWide DEF_toKeySyncQ_first____d23;
  tUInt64 DEF_toSyncQ_first____d3;
  tUInt8 DEF_toKeySyncQ_first__3_BIT_0___d24;
  tUInt8 DEF_toSyncQ_first_BIT_0___d4;
 
 /* Local definitions */
 private:
  tUWide DEF_toKeySyncQ_first__3_BITS_96_TO_1___d30;
 
 /* Rules */
 public:
  void RL_enqRequest();
  void RL_getResponseEncrypt();
  void RL_getResponseDecrypt();
  void RL_putKey();
 
 /* Methods */
 public:
  void METH_dut_request_put(tUInt64 ARG_dut_request_put);
  tUInt8 METH_RDY_dut_request_put();
  tUInt64 METH_dut_response_get();
  tUInt8 METH_RDY_dut_response_get();
  void METH_setkey_put(tUWide ARG_setkey_put);
  tUInt8 METH_RDY_setkey_put();
 
 /* Reset routines */
 public:
  void reset_rst_usr$OUT_RST(tUInt8 ARG_rst_in);
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
  static void static_reset_rst_usr$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
  void set_clk_1(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDutWrapper &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDutWrapper &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing);
};

#endif /* ifndef __mkDutWrapper_h__ */
