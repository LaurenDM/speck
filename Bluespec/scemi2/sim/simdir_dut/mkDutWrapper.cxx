/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sat Mar 12 13:28:57 EST 2016
 * 
 */
#include "bluesim_primitives.h"
#include "mkDutWrapper.h"


/* Constructor */
MOD_mkDutWrapper::MOD_mkDutWrapper(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_m(simHdl, "m", this),
    PORT_RST_N((tUInt8)1u),
    DEF_memInit_request_put_BITS_535_TO_0___d2(536u),
    DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3(536u),
    DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4(537u)
{
  PORT_EN_cpuToHost = false;
  PORT_EN_hostToCpu = false;
  PORT_EN_memInit_request_put = false;
  PORT_EN_ddr3client_request_get = false;
  PORT_EN_ddr3client_response_put = false;
  PORT_hostToCpu_startpc = 0u;
  PORT_memInit_request_put.setSize(537u);
  PORT_memInit_request_put.clear();
  PORT_ddr3client_response_put.setSize(512u);
  PORT_ddr3client_response_put.clear();
  PORT_cpuToHost = 0u;
  PORT_RDY_cpuToHost = false;
  PORT_RDY_hostToCpu = false;
  PORT_RDY_memInit_request_put = false;
  PORT_memInit_done = false;
  PORT_RDY_memInit_done = false;
  PORT_ddr3client_request_get.setSize(601u);
  PORT_ddr3client_request_get.clear();
  PORT_RDY_ddr3client_request_get = false;
  PORT_RDY_ddr3client_response_put = false;
  symbol_count = 29u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDutWrapper::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_cpuToHost", SYM_DEF, &DEF_CAN_FIRE_cpuToHost, 1u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_ddr3client_request_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_ddr3client_request_get,
	      1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_ddr3client_response_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_ddr3client_response_put,
	      1u);
  init_symbol(&symbols[3u], "CAN_FIRE_hostToCpu", SYM_DEF, &DEF_CAN_FIRE_hostToCpu, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_memInit_done", SYM_DEF, &DEF_CAN_FIRE_memInit_done, 1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_memInit_request_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_memInit_request_put,
	      1u);
  init_symbol(&symbols[6u], "cpuToHost", SYM_PORT, &PORT_cpuToHost, 18u);
  init_symbol(&symbols[7u], "ddr3client_request_get", SYM_PORT, &PORT_ddr3client_request_get, 601u);
  init_symbol(&symbols[8u], "ddr3client_response_put", SYM_PORT, &PORT_ddr3client_response_put, 512u);
  init_symbol(&symbols[9u], "EN_cpuToHost", SYM_PORT, &PORT_EN_cpuToHost, 1u);
  init_symbol(&symbols[10u],
	      "EN_ddr3client_request_get",
	      SYM_PORT,
	      &PORT_EN_ddr3client_request_get,
	      1u);
  init_symbol(&symbols[11u],
	      "EN_ddr3client_response_put",
	      SYM_PORT,
	      &PORT_EN_ddr3client_response_put,
	      1u);
  init_symbol(&symbols[12u], "EN_hostToCpu", SYM_PORT, &PORT_EN_hostToCpu, 1u);
  init_symbol(&symbols[13u], "EN_memInit_request_put", SYM_PORT, &PORT_EN_memInit_request_put, 1u);
  init_symbol(&symbols[14u], "hostToCpu_startpc", SYM_PORT, &PORT_hostToCpu_startpc, 32u);
  init_symbol(&symbols[15u], "m", SYM_MODULE, &INST_m);
  init_symbol(&symbols[16u], "memInit_done", SYM_PORT, &PORT_memInit_done, 1u);
  init_symbol(&symbols[17u], "memInit_request_put", SYM_PORT, &PORT_memInit_request_put, 537u);
  init_symbol(&symbols[18u], "RDY_cpuToHost", SYM_PORT, &PORT_RDY_cpuToHost, 1u);
  init_symbol(&symbols[19u],
	      "RDY_ddr3client_request_get",
	      SYM_PORT,
	      &PORT_RDY_ddr3client_request_get,
	      1u);
  init_symbol(&symbols[20u],
	      "RDY_ddr3client_response_put",
	      SYM_PORT,
	      &PORT_RDY_ddr3client_response_put,
	      1u);
  init_symbol(&symbols[21u], "RDY_hostToCpu", SYM_PORT, &PORT_RDY_hostToCpu, 1u);
  init_symbol(&symbols[22u], "RDY_memInit_done", SYM_PORT, &PORT_RDY_memInit_done, 1u);
  init_symbol(&symbols[23u], "RDY_memInit_request_put", SYM_PORT, &PORT_RDY_memInit_request_put, 1u);
  init_symbol(&symbols[24u], "WILL_FIRE_cpuToHost", SYM_DEF, &DEF_WILL_FIRE_cpuToHost, 1u);
  init_symbol(&symbols[25u],
	      "WILL_FIRE_ddr3client_request_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_ddr3client_request_get,
	      1u);
  init_symbol(&symbols[26u],
	      "WILL_FIRE_ddr3client_response_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_ddr3client_response_put,
	      1u);
  init_symbol(&symbols[27u], "WILL_FIRE_hostToCpu", SYM_DEF, &DEF_WILL_FIRE_hostToCpu, 1u);
  init_symbol(&symbols[28u],
	      "WILL_FIRE_memInit_request_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_memInit_request_put,
	      1u);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkDutWrapper::METH_cpuToHost()
{
  PORT_EN_cpuToHost = (tUInt8)1u;
  DEF_WILL_FIRE_cpuToHost = (tUInt8)1u;
  tUInt32 DEF_AVMeth_m_cpuToHost;
  DEF_AVMeth_m_cpuToHost = INST_m.METH_cpuToHost();
  PORT_cpuToHost = DEF_AVMeth_m_cpuToHost;
  return PORT_cpuToHost;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_cpuToHost()
{
  DEF_CAN_FIRE_cpuToHost = INST_m.METH_RDY_cpuToHost();
  PORT_RDY_cpuToHost = DEF_CAN_FIRE_cpuToHost;
  return PORT_RDY_cpuToHost;
}

void MOD_mkDutWrapper::METH_hostToCpu(tUInt32 ARG_hostToCpu_startpc)
{
  PORT_EN_hostToCpu = (tUInt8)1u;
  DEF_WILL_FIRE_hostToCpu = (tUInt8)1u;
  PORT_hostToCpu_startpc = ARG_hostToCpu_startpc;
  INST_m.METH_hostToCpu(ARG_hostToCpu_startpc);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_hostToCpu()
{
  DEF_CAN_FIRE_hostToCpu = INST_m.METH_RDY_hostToCpu();
  PORT_RDY_hostToCpu = DEF_CAN_FIRE_hostToCpu;
  return PORT_RDY_hostToCpu;
}

void MOD_mkDutWrapper::METH_memInit_request_put(tUWide ARG_memInit_request_put)
{
  tUInt8 DEF_memInit_request_put_BIT_536___d1;
  PORT_EN_memInit_request_put = (tUInt8)1u;
  DEF_WILL_FIRE_memInit_request_put = (tUInt8)1u;
  PORT_memInit_request_put = ARG_memInit_request_put;
  wop_primExtractWide(536u,
		      537u,
		      ARG_memInit_request_put,
		      32u,
		      535u,
		      32u,
		      0u,
		      DEF_memInit_request_put_BITS_535_TO_0___d2);
  DEF_memInit_request_put_BIT_536___d1 = ARG_memInit_request_put.get_bits_in_word8(16u, 24u, 1u);
  DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3 = DEF_memInit_request_put_BIT_536___d1 ? DEF_memInit_request_put_BITS_535_TO_0___d2 : DEF_memInit_request_put_BITS_535_TO_0___d2;
  DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4.set_bits_in_word(33554431u & ((((tUInt32)(DEF_memInit_request_put_BIT_536___d1)) << 24u) | DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_bits_in_word32(16u,
																													0u,
																													24u)),
									       16u,
									       0u,
									       25u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(15u),
												   15u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(14u),
														       14u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(13u),
																	   13u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(12u),
																			       12u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(11u),
																						   11u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(10u),
																								       10u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(9u),
																											   9u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(8u),
																													      8u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(7u),
																																 7u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(6u),
																																		    6u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(5u),
																																				       5u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(4u),
																																							  4u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(3u),
																																									     3u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(2u),
																																												2u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(1u),
																																														   1u).set_whole_word(DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3.get_whole_word(0u),
																																																      0u);
  INST_m.METH_memInit_request_put(DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_memInit_request_put()
{
  DEF_CAN_FIRE_memInit_request_put = INST_m.METH_RDY_memInit_request_put();
  PORT_RDY_memInit_request_put = DEF_CAN_FIRE_memInit_request_put;
  return PORT_RDY_memInit_request_put;
}

tUInt8 MOD_mkDutWrapper::METH_memInit_done()
{
  PORT_memInit_done = INST_m.METH_memInit_done();
  return PORT_memInit_done;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_memInit_done()
{
  DEF_CAN_FIRE_memInit_done = (tUInt8)1u;
  PORT_RDY_memInit_done = DEF_CAN_FIRE_memInit_done;
  return PORT_RDY_memInit_done;
}

tUWide MOD_mkDutWrapper::METH_ddr3client_request_get()
{
  PORT_EN_ddr3client_request_get = (tUInt8)1u;
  DEF_WILL_FIRE_ddr3client_request_get = (tUInt8)1u;
  tUWide DEF_AVMeth_m_ddr3client_request_get(601u, false);
  DEF_AVMeth_m_ddr3client_request_get = INST_m.METH_ddr3client_request_get();
  PORT_ddr3client_request_get = DEF_AVMeth_m_ddr3client_request_get;
  return PORT_ddr3client_request_get;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_ddr3client_request_get()
{
  DEF_CAN_FIRE_ddr3client_request_get = INST_m.METH_RDY_ddr3client_request_get();
  PORT_RDY_ddr3client_request_get = DEF_CAN_FIRE_ddr3client_request_get;
  return PORT_RDY_ddr3client_request_get;
}

void MOD_mkDutWrapper::METH_ddr3client_response_put(tUWide ARG_ddr3client_response_put)
{
  PORT_EN_ddr3client_response_put = (tUInt8)1u;
  DEF_WILL_FIRE_ddr3client_response_put = (tUInt8)1u;
  PORT_ddr3client_response_put = ARG_ddr3client_response_put;
  INST_m.METH_ddr3client_response_put(ARG_ddr3client_response_put);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_ddr3client_response_put()
{
  DEF_CAN_FIRE_ddr3client_response_put = INST_m.METH_RDY_ddr3client_response_put();
  PORT_RDY_ddr3client_response_put = DEF_CAN_FIRE_ddr3client_response_put;
  return PORT_RDY_ddr3client_response_put;
}


/* Reset routines */

void MOD_mkDutWrapper::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_m.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDutWrapper::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDutWrapper::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_m.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDutWrapper::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 32u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_ddr3client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_ddr3client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_memInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3", 536u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_ddr3client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_ddr3client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "memInit_request_put_BITS_535_TO_0___d2", 536u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4", 537u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_ddr3client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_ddr3client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_ddr3client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_ddr3client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_memInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cpuToHost", 18u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ddr3client_request_get", 601u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ddr3client_response_put", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "hostToCpu_startpc", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "memInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "memInit_request_put", 537u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_m.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDutWrapper::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkDutWrapper::vcd_defs(tVCDDumpType dt, MOD_mkDutWrapper &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 536u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 536u);
    vcd_write_x(sim_hdl, num++, 537u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 18u);
    vcd_write_x(sim_hdl, num++, 601u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 537u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_cpuToHost) != DEF_CAN_FIRE_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_cpuToHost, 1u);
	backing.DEF_CAN_FIRE_cpuToHost = DEF_CAN_FIRE_cpuToHost;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_ddr3client_request_get) != DEF_CAN_FIRE_ddr3client_request_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_ddr3client_request_get, 1u);
	backing.DEF_CAN_FIRE_ddr3client_request_get = DEF_CAN_FIRE_ddr3client_request_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_ddr3client_response_put) != DEF_CAN_FIRE_ddr3client_response_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_ddr3client_response_put, 1u);
	backing.DEF_CAN_FIRE_ddr3client_response_put = DEF_CAN_FIRE_ddr3client_response_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_hostToCpu) != DEF_CAN_FIRE_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_hostToCpu, 1u);
	backing.DEF_CAN_FIRE_hostToCpu = DEF_CAN_FIRE_hostToCpu;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_memInit_done) != DEF_CAN_FIRE_memInit_done)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_memInit_done, 1u);
	backing.DEF_CAN_FIRE_memInit_done = DEF_CAN_FIRE_memInit_done;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_memInit_request_put) != DEF_CAN_FIRE_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_memInit_request_put, 1u);
	backing.DEF_CAN_FIRE_memInit_request_put = DEF_CAN_FIRE_memInit_request_put;
      }
      ++num;
      if ((backing.DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3) != DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3, 536u);
	backing.DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3 = DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_cpuToHost) != DEF_WILL_FIRE_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_cpuToHost, 1u);
	backing.DEF_WILL_FIRE_cpuToHost = DEF_WILL_FIRE_cpuToHost;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_ddr3client_request_get) != DEF_WILL_FIRE_ddr3client_request_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_ddr3client_request_get, 1u);
	backing.DEF_WILL_FIRE_ddr3client_request_get = DEF_WILL_FIRE_ddr3client_request_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_ddr3client_response_put) != DEF_WILL_FIRE_ddr3client_response_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_ddr3client_response_put, 1u);
	backing.DEF_WILL_FIRE_ddr3client_response_put = DEF_WILL_FIRE_ddr3client_response_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_hostToCpu) != DEF_WILL_FIRE_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_hostToCpu, 1u);
	backing.DEF_WILL_FIRE_hostToCpu = DEF_WILL_FIRE_hostToCpu;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_memInit_request_put) != DEF_WILL_FIRE_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_memInit_request_put, 1u);
	backing.DEF_WILL_FIRE_memInit_request_put = DEF_WILL_FIRE_memInit_request_put;
      }
      ++num;
      if ((backing.DEF_memInit_request_put_BITS_535_TO_0___d2) != DEF_memInit_request_put_BITS_535_TO_0___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_memInit_request_put_BITS_535_TO_0___d2, 536u);
	backing.DEF_memInit_request_put_BITS_535_TO_0___d2 = DEF_memInit_request_put_BITS_535_TO_0___d2;
      }
      ++num;
      if ((backing.DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4) != DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4, 537u);
	backing.DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4 = DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4;
      }
      ++num;
      if ((backing.PORT_EN_cpuToHost) != PORT_EN_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_cpuToHost, 1u);
	backing.PORT_EN_cpuToHost = PORT_EN_cpuToHost;
      }
      ++num;
      if ((backing.PORT_EN_ddr3client_request_get) != PORT_EN_ddr3client_request_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_ddr3client_request_get, 1u);
	backing.PORT_EN_ddr3client_request_get = PORT_EN_ddr3client_request_get;
      }
      ++num;
      if ((backing.PORT_EN_ddr3client_response_put) != PORT_EN_ddr3client_response_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_ddr3client_response_put, 1u);
	backing.PORT_EN_ddr3client_response_put = PORT_EN_ddr3client_response_put;
      }
      ++num;
      if ((backing.PORT_EN_hostToCpu) != PORT_EN_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_hostToCpu, 1u);
	backing.PORT_EN_hostToCpu = PORT_EN_hostToCpu;
      }
      ++num;
      if ((backing.PORT_EN_memInit_request_put) != PORT_EN_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_memInit_request_put, 1u);
	backing.PORT_EN_memInit_request_put = PORT_EN_memInit_request_put;
      }
      ++num;
      if ((backing.PORT_RDY_cpuToHost) != PORT_RDY_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_cpuToHost, 1u);
	backing.PORT_RDY_cpuToHost = PORT_RDY_cpuToHost;
      }
      ++num;
      if ((backing.PORT_RDY_ddr3client_request_get) != PORT_RDY_ddr3client_request_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_ddr3client_request_get, 1u);
	backing.PORT_RDY_ddr3client_request_get = PORT_RDY_ddr3client_request_get;
      }
      ++num;
      if ((backing.PORT_RDY_ddr3client_response_put) != PORT_RDY_ddr3client_response_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_ddr3client_response_put, 1u);
	backing.PORT_RDY_ddr3client_response_put = PORT_RDY_ddr3client_response_put;
      }
      ++num;
      if ((backing.PORT_RDY_hostToCpu) != PORT_RDY_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_hostToCpu, 1u);
	backing.PORT_RDY_hostToCpu = PORT_RDY_hostToCpu;
      }
      ++num;
      if ((backing.PORT_RDY_memInit_done) != PORT_RDY_memInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_memInit_done, 1u);
	backing.PORT_RDY_memInit_done = PORT_RDY_memInit_done;
      }
      ++num;
      if ((backing.PORT_RDY_memInit_request_put) != PORT_RDY_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_memInit_request_put, 1u);
	backing.PORT_RDY_memInit_request_put = PORT_RDY_memInit_request_put;
      }
      ++num;
      if ((backing.PORT_cpuToHost) != PORT_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, PORT_cpuToHost, 18u);
	backing.PORT_cpuToHost = PORT_cpuToHost;
      }
      ++num;
      if ((backing.PORT_ddr3client_request_get) != PORT_ddr3client_request_get)
      {
	vcd_write_val(sim_hdl, num, PORT_ddr3client_request_get, 601u);
	backing.PORT_ddr3client_request_get = PORT_ddr3client_request_get;
      }
      ++num;
      if ((backing.PORT_ddr3client_response_put) != PORT_ddr3client_response_put)
      {
	vcd_write_val(sim_hdl, num, PORT_ddr3client_response_put, 512u);
	backing.PORT_ddr3client_response_put = PORT_ddr3client_response_put;
      }
      ++num;
      if ((backing.PORT_hostToCpu_startpc) != PORT_hostToCpu_startpc)
      {
	vcd_write_val(sim_hdl, num, PORT_hostToCpu_startpc, 32u);
	backing.PORT_hostToCpu_startpc = PORT_hostToCpu_startpc;
      }
      ++num;
      if ((backing.PORT_memInit_done) != PORT_memInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_memInit_done, 1u);
	backing.PORT_memInit_done = PORT_memInit_done;
      }
      ++num;
      if ((backing.PORT_memInit_request_put) != PORT_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_memInit_request_put, 537u);
	backing.PORT_memInit_request_put = PORT_memInit_request_put;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_cpuToHost, 1u);
      backing.DEF_CAN_FIRE_cpuToHost = DEF_CAN_FIRE_cpuToHost;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_ddr3client_request_get, 1u);
      backing.DEF_CAN_FIRE_ddr3client_request_get = DEF_CAN_FIRE_ddr3client_request_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_ddr3client_response_put, 1u);
      backing.DEF_CAN_FIRE_ddr3client_response_put = DEF_CAN_FIRE_ddr3client_response_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_hostToCpu, 1u);
      backing.DEF_CAN_FIRE_hostToCpu = DEF_CAN_FIRE_hostToCpu;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_memInit_done, 1u);
      backing.DEF_CAN_FIRE_memInit_done = DEF_CAN_FIRE_memInit_done;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_memInit_request_put, 1u);
      backing.DEF_CAN_FIRE_memInit_request_put = DEF_CAN_FIRE_memInit_request_put;
      vcd_write_val(sim_hdl, num++, DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3, 536u);
      backing.DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3 = DEF_IF_memInit_request_put_BIT_536_THEN_DONTCARE_E_ETC___d3;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_cpuToHost, 1u);
      backing.DEF_WILL_FIRE_cpuToHost = DEF_WILL_FIRE_cpuToHost;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_ddr3client_request_get, 1u);
      backing.DEF_WILL_FIRE_ddr3client_request_get = DEF_WILL_FIRE_ddr3client_request_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_ddr3client_response_put, 1u);
      backing.DEF_WILL_FIRE_ddr3client_response_put = DEF_WILL_FIRE_ddr3client_response_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_hostToCpu, 1u);
      backing.DEF_WILL_FIRE_hostToCpu = DEF_WILL_FIRE_hostToCpu;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_memInit_request_put, 1u);
      backing.DEF_WILL_FIRE_memInit_request_put = DEF_WILL_FIRE_memInit_request_put;
      vcd_write_val(sim_hdl, num++, DEF_memInit_request_put_BITS_535_TO_0___d2, 536u);
      backing.DEF_memInit_request_put_BITS_535_TO_0___d2 = DEF_memInit_request_put_BITS_535_TO_0___d2;
      vcd_write_val(sim_hdl, num++, DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4, 537u);
      backing.DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4 = DEF_memInit_request_put_BIT_536_CONCAT_IF_memInit__ETC___d4;
      vcd_write_val(sim_hdl, num++, PORT_EN_cpuToHost, 1u);
      backing.PORT_EN_cpuToHost = PORT_EN_cpuToHost;
      vcd_write_val(sim_hdl, num++, PORT_EN_ddr3client_request_get, 1u);
      backing.PORT_EN_ddr3client_request_get = PORT_EN_ddr3client_request_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_ddr3client_response_put, 1u);
      backing.PORT_EN_ddr3client_response_put = PORT_EN_ddr3client_response_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_hostToCpu, 1u);
      backing.PORT_EN_hostToCpu = PORT_EN_hostToCpu;
      vcd_write_val(sim_hdl, num++, PORT_EN_memInit_request_put, 1u);
      backing.PORT_EN_memInit_request_put = PORT_EN_memInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_cpuToHost, 1u);
      backing.PORT_RDY_cpuToHost = PORT_RDY_cpuToHost;
      vcd_write_val(sim_hdl, num++, PORT_RDY_ddr3client_request_get, 1u);
      backing.PORT_RDY_ddr3client_request_get = PORT_RDY_ddr3client_request_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_ddr3client_response_put, 1u);
      backing.PORT_RDY_ddr3client_response_put = PORT_RDY_ddr3client_response_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_hostToCpu, 1u);
      backing.PORT_RDY_hostToCpu = PORT_RDY_hostToCpu;
      vcd_write_val(sim_hdl, num++, PORT_RDY_memInit_done, 1u);
      backing.PORT_RDY_memInit_done = PORT_RDY_memInit_done;
      vcd_write_val(sim_hdl, num++, PORT_RDY_memInit_request_put, 1u);
      backing.PORT_RDY_memInit_request_put = PORT_RDY_memInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_cpuToHost, 18u);
      backing.PORT_cpuToHost = PORT_cpuToHost;
      vcd_write_val(sim_hdl, num++, PORT_ddr3client_request_get, 601u);
      backing.PORT_ddr3client_request_get = PORT_ddr3client_request_get;
      vcd_write_val(sim_hdl, num++, PORT_ddr3client_response_put, 512u);
      backing.PORT_ddr3client_response_put = PORT_ddr3client_response_put;
      vcd_write_val(sim_hdl, num++, PORT_hostToCpu_startpc, 32u);
      backing.PORT_hostToCpu_startpc = PORT_hostToCpu_startpc;
      vcd_write_val(sim_hdl, num++, PORT_memInit_done, 1u);
      backing.PORT_memInit_done = PORT_memInit_done;
      vcd_write_val(sim_hdl, num++, PORT_memInit_request_put, 537u);
      backing.PORT_memInit_request_put = PORT_memInit_request_put;
    }
}

void MOD_mkDutWrapper::vcd_submodules(tVCDDumpType dt,
				      unsigned int levels,
				      MOD_mkDutWrapper &backing)
{
  INST_m.dump_VCD(dt, levels, backing.INST_m);
}
