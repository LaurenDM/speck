//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Sat Mar 12 14:01:24 EST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// started                        O     1 reg
// RDY_started                    O     1 const
// rd                             O    32
// RDY_rd                         O     1 const
// RDY_wr                         O     1
// cpuToHost                      O    18
// RDY_cpuToHost                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_id                       I    32 reg
// rd_idx                         I    12
// wr_idx                         I    13
// wr_val                         I    32
// EN_start                       I     1
// EN_wr                          I     1
// EN_cpuToHost                   I     1
//
// Combinational paths from inputs to outputs:
//   rd_idx -> rd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCsrFile(CLK,
		 RST_N,

		 start_id,
		 EN_start,
		 RDY_start,

		 started,
		 RDY_started,

		 rd_idx,
		 rd,
		 RDY_rd,

		 wr_idx,
		 wr_val,
		 EN_wr,
		 RDY_wr,

		 EN_cpuToHost,
		 cpuToHost,
		 RDY_cpuToHost);
  input  CLK;
  input  RST_N;

  // action method start
  input  [31 : 0] start_id;
  input  EN_start;
  output RDY_start;

  // value method started
  output started;
  output RDY_started;

  // value method rd
  input  [11 : 0] rd_idx;
  output [31 : 0] rd;
  output RDY_rd;

  // action method wr
  input  [12 : 0] wr_idx;
  input  [31 : 0] wr_val;
  input  EN_wr;
  output RDY_wr;

  // actionvalue method cpuToHost
  input  EN_cpuToHost;
  output [17 : 0] cpuToHost;
  output RDY_cpuToHost;

  // signals for module outputs
  reg [31 : 0] rd;
  wire [17 : 0] cpuToHost;
  wire RDY_cpuToHost, RDY_rd, RDY_start, RDY_started, RDY_wr, started;

  // inlined wires
  wire [18 : 0] toHostFifo_enqReq_wires_0$wget;
  wire toHostFifo_enqReq_wires_0$whas;

  // register coreId
  reg [31 : 0] coreId;
  wire [31 : 0] coreId$D_IN;
  wire coreId$EN;

  // register cycles
  reg [31 : 0] cycles;
  wire [31 : 0] cycles$D_IN;
  wire cycles$EN;

  // register numInsts
  reg [31 : 0] numInsts;
  wire [31 : 0] numInsts$D_IN;
  wire numInsts$EN;

  // register startReg
  reg startReg;
  wire startReg$D_IN, startReg$EN;

  // register toHostFifo_clearReq_ehrReg
  reg toHostFifo_clearReq_ehrReg;
  wire toHostFifo_clearReq_ehrReg$D_IN, toHostFifo_clearReq_ehrReg$EN;

  // register toHostFifo_data_0
  reg [17 : 0] toHostFifo_data_0;
  wire [17 : 0] toHostFifo_data_0$D_IN;
  wire toHostFifo_data_0$EN;

  // register toHostFifo_data_1
  reg [17 : 0] toHostFifo_data_1;
  wire [17 : 0] toHostFifo_data_1$D_IN;
  wire toHostFifo_data_1$EN;

  // register toHostFifo_deqP
  reg toHostFifo_deqP;
  wire toHostFifo_deqP$D_IN, toHostFifo_deqP$EN;

  // register toHostFifo_deqReq_ehrReg
  reg toHostFifo_deqReq_ehrReg;
  wire toHostFifo_deqReq_ehrReg$D_IN, toHostFifo_deqReq_ehrReg$EN;

  // register toHostFifo_empty
  reg toHostFifo_empty;
  wire toHostFifo_empty$D_IN, toHostFifo_empty$EN;

  // register toHostFifo_enqP
  reg toHostFifo_enqP;
  wire toHostFifo_enqP$D_IN, toHostFifo_enqP$EN;

  // register toHostFifo_enqReq_ehrReg
  reg [18 : 0] toHostFifo_enqReq_ehrReg;
  wire [18 : 0] toHostFifo_enqReq_ehrReg$D_IN;
  wire toHostFifo_enqReq_ehrReg$EN;

  // register toHostFifo_full
  reg toHostFifo_full;
  wire toHostFifo_full$D_IN, toHostFifo_full$EN;

  // ports of submodule toHostFifo_clearReq_virtual_reg_0
  wire toHostFifo_clearReq_virtual_reg_0$D_IN,
       toHostFifo_clearReq_virtual_reg_0$EN;

  // ports of submodule toHostFifo_clearReq_virtual_reg_1
  wire toHostFifo_clearReq_virtual_reg_1$D_IN,
       toHostFifo_clearReq_virtual_reg_1$EN,
       toHostFifo_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule toHostFifo_deqReq_virtual_reg_0
  wire toHostFifo_deqReq_virtual_reg_0$D_IN,
       toHostFifo_deqReq_virtual_reg_0$EN;

  // ports of submodule toHostFifo_deqReq_virtual_reg_1
  wire toHostFifo_deqReq_virtual_reg_1$D_IN,
       toHostFifo_deqReq_virtual_reg_1$EN;

  // ports of submodule toHostFifo_deqReq_virtual_reg_2
  wire toHostFifo_deqReq_virtual_reg_2$D_IN,
       toHostFifo_deqReq_virtual_reg_2$EN,
       toHostFifo_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule toHostFifo_enqReq_virtual_reg_0
  wire toHostFifo_enqReq_virtual_reg_0$D_IN,
       toHostFifo_enqReq_virtual_reg_0$EN;

  // ports of submodule toHostFifo_enqReq_virtual_reg_1
  wire toHostFifo_enqReq_virtual_reg_1$D_IN,
       toHostFifo_enqReq_virtual_reg_1$EN;

  // ports of submodule toHostFifo_enqReq_virtual_reg_2
  wire toHostFifo_enqReq_virtual_reg_2$D_IN,
       toHostFifo_enqReq_virtual_reg_2$EN,
       toHostFifo_enqReq_virtual_reg_2$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_count,
       CAN_FIRE_RL_toHostFifo_canonicalize,
       CAN_FIRE_RL_toHostFifo_clearReq_canonicalize,
       CAN_FIRE_RL_toHostFifo_deqReq_canonicalize,
       CAN_FIRE_RL_toHostFifo_enqReq_canonicalize,
       CAN_FIRE_cpuToHost,
       CAN_FIRE_start,
       CAN_FIRE_wr,
       WILL_FIRE_RL_count,
       WILL_FIRE_RL_toHostFifo_canonicalize,
       WILL_FIRE_RL_toHostFifo_clearReq_canonicalize,
       WILL_FIRE_RL_toHostFifo_deqReq_canonicalize,
       WILL_FIRE_RL_toHostFifo_enqReq_canonicalize,
       WILL_FIRE_cpuToHost,
       WILL_FIRE_start,
       WILL_FIRE_wr;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_cycles$write_1__VAL_1;

  // remaining internal signals
  reg [15 : 0] CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q2;
  reg [1 : 0] CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q1;
  wire [17 : 0] IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d27;
  wire IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d71,
       IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d74,
       IF_NOT_toHostFifo_enqReq_virtual_reg_2_read__3_ETC___d80,
       IF_toHostFifo_deqReq_wires_1_whas__3_THEN_toHo_ETC___d39,
       IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13,
       _theResult_____2__h5282,
       next_deqP___1__h5687,
       toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52,
       v__h4637,
       v__h4996;

  // action method start
  assign RDY_start = !startReg ;
  assign CAN_FIRE_start = !startReg ;
  assign WILL_FIRE_start = EN_start ;

  // value method started
  assign started = startReg ;
  assign RDY_started = 1'd1 ;

  // value method rd
  always@(rd_idx or coreId or cycles or numInsts)
  begin
    case (rd_idx)
      12'hC00: rd = cycles;
      12'hC02: rd = numInsts;
      default: rd = coreId;
    endcase
  end
  assign RDY_rd = 1'd1 ;

  // action method wr
  assign RDY_wr = !toHostFifo_full ;
  assign CAN_FIRE_wr = !toHostFifo_full ;
  assign WILL_FIRE_wr = EN_wr ;

  // actionvalue method cpuToHost
  assign cpuToHost =
	     { CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q1,
	       CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q2 } ;
  assign RDY_cpuToHost = !toHostFifo_empty ;
  assign CAN_FIRE_cpuToHost = !toHostFifo_empty ;
  assign WILL_FIRE_cpuToHost = EN_cpuToHost ;

  // submodule toHostFifo_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_clearReq_virtual_reg_0(.CLK(CLK),
							     .D_IN(toHostFifo_clearReq_virtual_reg_0$D_IN),
							     .EN(toHostFifo_clearReq_virtual_reg_0$EN),
							     .Q_OUT());

  // submodule toHostFifo_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_clearReq_virtual_reg_1(.CLK(CLK),
							     .D_IN(toHostFifo_clearReq_virtual_reg_1$D_IN),
							     .EN(toHostFifo_clearReq_virtual_reg_1$EN),
							     .Q_OUT(toHostFifo_clearReq_virtual_reg_1$Q_OUT));

  // submodule toHostFifo_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_deqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(toHostFifo_deqReq_virtual_reg_0$D_IN),
							   .EN(toHostFifo_deqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule toHostFifo_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_deqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(toHostFifo_deqReq_virtual_reg_1$D_IN),
							   .EN(toHostFifo_deqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule toHostFifo_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_deqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(toHostFifo_deqReq_virtual_reg_2$D_IN),
							   .EN(toHostFifo_deqReq_virtual_reg_2$EN),
							   .Q_OUT(toHostFifo_deqReq_virtual_reg_2$Q_OUT));

  // submodule toHostFifo_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_enqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(toHostFifo_enqReq_virtual_reg_0$D_IN),
							   .EN(toHostFifo_enqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule toHostFifo_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_enqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(toHostFifo_enqReq_virtual_reg_1$D_IN),
							   .EN(toHostFifo_enqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule toHostFifo_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) toHostFifo_enqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(toHostFifo_enqReq_virtual_reg_2$D_IN),
							   .EN(toHostFifo_enqReq_virtual_reg_2$EN),
							   .Q_OUT(toHostFifo_enqReq_virtual_reg_2$Q_OUT));

  // rule RL_count
  assign CAN_FIRE_RL_count = startReg ;
  assign WILL_FIRE_RL_count = startReg ;

  // rule RL_toHostFifo_canonicalize
  assign CAN_FIRE_RL_toHostFifo_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_toHostFifo_canonicalize = 1'd1 ;

  // rule RL_toHostFifo_enqReq_canonicalize
  assign CAN_FIRE_RL_toHostFifo_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_toHostFifo_enqReq_canonicalize = 1'd1 ;

  // rule RL_toHostFifo_deqReq_canonicalize
  assign CAN_FIRE_RL_toHostFifo_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_toHostFifo_deqReq_canonicalize = 1'd1 ;

  // rule RL_toHostFifo_clearReq_canonicalize
  assign CAN_FIRE_RL_toHostFifo_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_toHostFifo_clearReq_canonicalize = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_cycles$write_1__VAL_1 = cycles + 32'd1 ;

  // inlined wires
  assign toHostFifo_enqReq_wires_0$wget = { 1'd1, wr_val[17:0] } ;
  assign toHostFifo_enqReq_wires_0$whas =
	     EN_wr && wr_idx[12] && wr_idx[11:0] == 12'h780 ;

  // register coreId
  assign coreId$D_IN = start_id ;
  assign coreId$EN = EN_start ;

  // register cycles
  assign cycles$D_IN = startReg ? MUX_cycles$write_1__VAL_1 : 32'd0 ;
  assign cycles$EN = startReg || EN_start ;

  // register numInsts
  assign numInsts$D_IN = numInsts + 32'd1 ;
  assign numInsts$EN = EN_wr ;

  // register startReg
  assign startReg$D_IN = 1'd1 ;
  assign startReg$EN = EN_start ;

  // register toHostFifo_clearReq_ehrReg
  assign toHostFifo_clearReq_ehrReg$D_IN = 1'd0 ;
  assign toHostFifo_clearReq_ehrReg$EN = 1'd1 ;

  // register toHostFifo_data_0
  assign toHostFifo_data_0$D_IN =
	     IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d27 ;
  assign toHostFifo_data_0$EN =
	     toHostFifo_enqP == 1'd0 &&
	     toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52 &&
	     !toHostFifo_enqReq_virtual_reg_2$Q_OUT &&
	     IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13 ;

  // register toHostFifo_data_1
  assign toHostFifo_data_1$D_IN =
	     IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d27 ;
  assign toHostFifo_data_1$EN =
	     toHostFifo_enqP == 1'd1 &&
	     toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52 &&
	     !toHostFifo_enqReq_virtual_reg_2$Q_OUT &&
	     IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13 ;

  // register toHostFifo_deqP
  assign toHostFifo_deqP$D_IN =
	     toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52 &&
	     _theResult_____2__h5282 ;
  assign toHostFifo_deqP$EN = 1'd1 ;

  // register toHostFifo_deqReq_ehrReg
  assign toHostFifo_deqReq_ehrReg$D_IN = 1'd0 ;
  assign toHostFifo_deqReq_ehrReg$EN = 1'd1 ;

  // register toHostFifo_empty
  assign toHostFifo_empty$D_IN =
	     !toHostFifo_clearReq_virtual_reg_1$Q_OUT &&
	     toHostFifo_clearReq_ehrReg ||
	     IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d71 &&
	     IF_NOT_toHostFifo_enqReq_virtual_reg_2_read__3_ETC___d80 ;
  assign toHostFifo_empty$EN = 1'd1 ;

  // register toHostFifo_enqP
  assign toHostFifo_enqP$D_IN =
	     toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52 &&
	     v__h4637 ;
  assign toHostFifo_enqP$EN = 1'd1 ;

  // register toHostFifo_enqReq_ehrReg
  assign toHostFifo_enqReq_ehrReg$D_IN = 19'b0101010101010101010 ;
  assign toHostFifo_enqReq_ehrReg$EN = 1'd1 ;

  // register toHostFifo_full
  assign toHostFifo_full$D_IN =
	     toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52 &&
	     IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d74 ;
  assign toHostFifo_full$EN = 1'd1 ;

  // submodule toHostFifo_clearReq_virtual_reg_0
  assign toHostFifo_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign toHostFifo_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule toHostFifo_clearReq_virtual_reg_1
  assign toHostFifo_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign toHostFifo_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule toHostFifo_deqReq_virtual_reg_0
  assign toHostFifo_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign toHostFifo_deqReq_virtual_reg_0$EN = EN_cpuToHost ;

  // submodule toHostFifo_deqReq_virtual_reg_1
  assign toHostFifo_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign toHostFifo_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule toHostFifo_deqReq_virtual_reg_2
  assign toHostFifo_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign toHostFifo_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule toHostFifo_enqReq_virtual_reg_0
  assign toHostFifo_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign toHostFifo_enqReq_virtual_reg_0$EN = toHostFifo_enqReq_wires_0$whas ;

  // submodule toHostFifo_enqReq_virtual_reg_1
  assign toHostFifo_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign toHostFifo_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule toHostFifo_enqReq_virtual_reg_2
  assign toHostFifo_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign toHostFifo_enqReq_virtual_reg_2$EN = 1'd1 ;

  // remaining internal signals
  assign IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d71 =
	     _theResult_____2__h5282 == v__h4637 ;
  assign IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d74 =
	     IF_NOT_toHostFifo_deqReq_virtual_reg_2_read__2_ETC___d71 &&
	     (!toHostFifo_enqReq_virtual_reg_2$Q_OUT &&
	      IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13 ||
	      toHostFifo_full) ;
  assign IF_NOT_toHostFifo_enqReq_virtual_reg_2_read__3_ETC___d80 =
	     (!toHostFifo_enqReq_virtual_reg_2$Q_OUT &&
	      IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13) ?
	       toHostFifo_empty :
	       !toHostFifo_deqReq_virtual_reg_2$Q_OUT &&
	       IF_toHostFifo_deqReq_wires_1_whas__3_THEN_toHo_ETC___d39 ||
	       toHostFifo_empty ;
  assign IF_toHostFifo_deqReq_wires_1_whas__3_THEN_toHo_ETC___d39 =
	     EN_cpuToHost || toHostFifo_deqReq_ehrReg ;
  assign IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13 =
	     toHostFifo_enqReq_wires_0$whas ?
	       toHostFifo_enqReq_wires_0$wget[18] :
	       toHostFifo_enqReq_ehrReg[18] ;
  assign IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d27 =
	     toHostFifo_enqReq_wires_0$whas ?
	       toHostFifo_enqReq_wires_0$wget[17:0] :
	       toHostFifo_enqReq_ehrReg[17:0] ;
  assign _theResult_____2__h5282 =
	     (!toHostFifo_deqReq_virtual_reg_2$Q_OUT &&
	      IF_toHostFifo_deqReq_wires_1_whas__3_THEN_toHo_ETC___d39) ?
	       next_deqP___1__h5687 :
	       toHostFifo_deqP ;
  assign next_deqP___1__h5687 = toHostFifo_deqP + 1'd1 ;
  assign toHostFifo_clearReq_virtual_reg_1_read__8_OR_I_ETC___d52 =
	     toHostFifo_clearReq_virtual_reg_1$Q_OUT ||
	     !toHostFifo_clearReq_ehrReg ;
  assign v__h4637 =
	     (!toHostFifo_enqReq_virtual_reg_2$Q_OUT &&
	      IF_toHostFifo_enqReq_wires_1_whas_THEN_toHostF_ETC___d13) ?
	       v__h4996 :
	       toHostFifo_enqP ;
  assign v__h4996 = toHostFifo_enqP + 1'd1 ;
  always@(toHostFifo_deqP or toHostFifo_data_0 or toHostFifo_data_1)
  begin
    case (toHostFifo_deqP)
      1'd0:
	  CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q1 =
	      toHostFifo_data_0[17:16];
      1'd1:
	  CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q1 =
	      toHostFifo_data_1[17:16];
    endcase
  end
  always@(toHostFifo_deqP or toHostFifo_data_0 or toHostFifo_data_1)
  begin
    case (toHostFifo_deqP)
      1'd0:
	  CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q2 =
	      toHostFifo_data_0[15:0];
      1'd1:
	  CASE_toHostFifo_deqP_0_toHostFifo_data_0_BITS__ETC__q2 =
	      toHostFifo_data_1[15:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        coreId <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	numInsts <= `BSV_ASSIGNMENT_DELAY 32'd0;
	startReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toHostFifo_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toHostFifo_deqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toHostFifo_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toHostFifo_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	toHostFifo_enqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toHostFifo_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 19'd174762;
	toHostFifo_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (coreId$EN) coreId <= `BSV_ASSIGNMENT_DELAY coreId$D_IN;
	if (cycles$EN) cycles <= `BSV_ASSIGNMENT_DELAY cycles$D_IN;
	if (numInsts$EN) numInsts <= `BSV_ASSIGNMENT_DELAY numInsts$D_IN;
	if (startReg$EN) startReg <= `BSV_ASSIGNMENT_DELAY startReg$D_IN;
	if (toHostFifo_clearReq_ehrReg$EN)
	  toHostFifo_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      toHostFifo_clearReq_ehrReg$D_IN;
	if (toHostFifo_deqP$EN)
	  toHostFifo_deqP <= `BSV_ASSIGNMENT_DELAY toHostFifo_deqP$D_IN;
	if (toHostFifo_deqReq_ehrReg$EN)
	  toHostFifo_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      toHostFifo_deqReq_ehrReg$D_IN;
	if (toHostFifo_empty$EN)
	  toHostFifo_empty <= `BSV_ASSIGNMENT_DELAY toHostFifo_empty$D_IN;
	if (toHostFifo_enqP$EN)
	  toHostFifo_enqP <= `BSV_ASSIGNMENT_DELAY toHostFifo_enqP$D_IN;
	if (toHostFifo_enqReq_ehrReg$EN)
	  toHostFifo_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      toHostFifo_enqReq_ehrReg$D_IN;
	if (toHostFifo_full$EN)
	  toHostFifo_full <= `BSV_ASSIGNMENT_DELAY toHostFifo_full$D_IN;
      end
    if (toHostFifo_data_0$EN)
      toHostFifo_data_0 <= `BSV_ASSIGNMENT_DELAY toHostFifo_data_0$D_IN;
    if (toHostFifo_data_1$EN)
      toHostFifo_data_1 <= `BSV_ASSIGNMENT_DELAY toHostFifo_data_1$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coreId = 32'hAAAAAAAA;
    cycles = 32'hAAAAAAAA;
    numInsts = 32'hAAAAAAAA;
    startReg = 1'h0;
    toHostFifo_clearReq_ehrReg = 1'h0;
    toHostFifo_data_0 = 18'h2AAAA;
    toHostFifo_data_1 = 18'h2AAAA;
    toHostFifo_deqP = 1'h0;
    toHostFifo_deqReq_ehrReg = 1'h0;
    toHostFifo_empty = 1'h0;
    toHostFifo_enqP = 1'h0;
    toHostFifo_enqReq_ehrReg = 19'h2AAAA;
    toHostFifo_full = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (startReg)
	$display("\nCycle %d ----------------------------------------------------",
		 cycles);
  end
  // synopsys translate_on
endmodule  // mkCsrFile

