//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Sat Mar 12 14:02:25 EST 2016
//
//
// Ports:
// Name                         I/O  size props
// cpuToHost                      O    18
// RDY_cpuToHost                  O     1
// RDY_hostToCpu                  O     1
// RDY_memInit_request_put        O     1
// memInit_done                   O     1 reg
// RDY_memInit_done               O     1 const
// ddr3client_request_get         O   601
// RDY_ddr3client_request_get     O     1
// RDY_ddr3client_response_put    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hostToCpu_startpc              I    32
// memInit_request_put            I   537
// ddr3client_response_put        I   512
// EN_hostToCpu                   I     1
// EN_memInit_request_put         I     1
// EN_ddr3client_response_put     I     1
// EN_cpuToHost                   I     1
// EN_ddr3client_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDutWrapper(CLK,
		    RST_N,

		    EN_cpuToHost,
		    cpuToHost,
		    RDY_cpuToHost,

		    hostToCpu_startpc,
		    EN_hostToCpu,
		    RDY_hostToCpu,

		    memInit_request_put,
		    EN_memInit_request_put,
		    RDY_memInit_request_put,

		    memInit_done,
		    RDY_memInit_done,

		    EN_ddr3client_request_get,
		    ddr3client_request_get,
		    RDY_ddr3client_request_get,

		    ddr3client_response_put,
		    EN_ddr3client_response_put,
		    RDY_ddr3client_response_put);
  input  CLK;
  input  RST_N;

  // actionvalue method cpuToHost
  input  EN_cpuToHost;
  output [17 : 0] cpuToHost;
  output RDY_cpuToHost;

  // action method hostToCpu
  input  [31 : 0] hostToCpu_startpc;
  input  EN_hostToCpu;
  output RDY_hostToCpu;

  // action method memInit_request_put
  input  [536 : 0] memInit_request_put;
  input  EN_memInit_request_put;
  output RDY_memInit_request_put;

  // value method memInit_done
  output memInit_done;
  output RDY_memInit_done;

  // actionvalue method ddr3client_request_get
  input  EN_ddr3client_request_get;
  output [600 : 0] ddr3client_request_get;
  output RDY_ddr3client_request_get;

  // action method ddr3client_response_put
  input  [511 : 0] ddr3client_response_put;
  input  EN_ddr3client_response_put;
  output RDY_ddr3client_response_put;

  // signals for module outputs
  wire [600 : 0] ddr3client_request_get;
  wire [17 : 0] cpuToHost;
  wire RDY_cpuToHost,
       RDY_ddr3client_request_get,
       RDY_ddr3client_response_put,
       RDY_hostToCpu,
       RDY_memInit_done,
       RDY_memInit_request_put,
       memInit_done;

  // ports of submodule m
  wire [600 : 0] m$ddr3client_request_get;
  wire [536 : 0] m$memInit_request_put;
  wire [511 : 0] m$ddr3client_response_put;
  wire [31 : 0] m$hostToCpu_startpc;
  wire [17 : 0] m$cpuToHost;
  wire m$EN_cpuToHost,
       m$EN_ddr3client_request_get,
       m$EN_ddr3client_response_put,
       m$EN_hostToCpu,
       m$EN_memInit_request_put,
       m$RDY_cpuToHost,
       m$RDY_ddr3client_request_get,
       m$RDY_ddr3client_response_put,
       m$RDY_hostToCpu,
       m$RDY_memInit_request_put,
       m$memInit_done;

  // rule scheduling signals
  wire CAN_FIRE_cpuToHost,
       CAN_FIRE_ddr3client_request_get,
       CAN_FIRE_ddr3client_response_put,
       CAN_FIRE_hostToCpu,
       CAN_FIRE_memInit_request_put,
       WILL_FIRE_cpuToHost,
       WILL_FIRE_ddr3client_request_get,
       WILL_FIRE_ddr3client_response_put,
       WILL_FIRE_hostToCpu,
       WILL_FIRE_memInit_request_put;

  // actionvalue method cpuToHost
  assign cpuToHost = m$cpuToHost ;
  assign RDY_cpuToHost = m$RDY_cpuToHost ;
  assign CAN_FIRE_cpuToHost = m$RDY_cpuToHost ;
  assign WILL_FIRE_cpuToHost = EN_cpuToHost ;

  // action method hostToCpu
  assign RDY_hostToCpu = m$RDY_hostToCpu ;
  assign CAN_FIRE_hostToCpu = m$RDY_hostToCpu ;
  assign WILL_FIRE_hostToCpu = EN_hostToCpu ;

  // action method memInit_request_put
  assign RDY_memInit_request_put = m$RDY_memInit_request_put ;
  assign CAN_FIRE_memInit_request_put = m$RDY_memInit_request_put ;
  assign WILL_FIRE_memInit_request_put = EN_memInit_request_put ;

  // value method memInit_done
  assign memInit_done = m$memInit_done ;
  assign RDY_memInit_done = 1'd1 ;

  // actionvalue method ddr3client_request_get
  assign ddr3client_request_get = m$ddr3client_request_get ;
  assign RDY_ddr3client_request_get = m$RDY_ddr3client_request_get ;
  assign CAN_FIRE_ddr3client_request_get = m$RDY_ddr3client_request_get ;
  assign WILL_FIRE_ddr3client_request_get = EN_ddr3client_request_get ;

  // action method ddr3client_response_put
  assign RDY_ddr3client_response_put = m$RDY_ddr3client_response_put ;
  assign CAN_FIRE_ddr3client_response_put = m$RDY_ddr3client_response_put ;
  assign WILL_FIRE_ddr3client_response_put = EN_ddr3client_response_put ;

  // submodule m
  mkProc m(.CLK(CLK),
	   .RST_N(RST_N),
	   .ddr3client_response_put(m$ddr3client_response_put),
	   .hostToCpu_startpc(m$hostToCpu_startpc),
	   .memInit_request_put(m$memInit_request_put),
	   .EN_cpuToHost(m$EN_cpuToHost),
	   .EN_hostToCpu(m$EN_hostToCpu),
	   .EN_memInit_request_put(m$EN_memInit_request_put),
	   .EN_ddr3client_request_get(m$EN_ddr3client_request_get),
	   .EN_ddr3client_response_put(m$EN_ddr3client_response_put),
	   .cpuToHost(m$cpuToHost),
	   .RDY_cpuToHost(m$RDY_cpuToHost),
	   .RDY_hostToCpu(m$RDY_hostToCpu),
	   .RDY_memInit_request_put(m$RDY_memInit_request_put),
	   .memInit_done(m$memInit_done),
	   .RDY_memInit_done(),
	   .ddr3client_request_get(m$ddr3client_request_get),
	   .RDY_ddr3client_request_get(m$RDY_ddr3client_request_get),
	   .RDY_ddr3client_response_put(m$RDY_ddr3client_response_put));

  // submodule m
  assign m$ddr3client_response_put = ddr3client_response_put ;
  assign m$hostToCpu_startpc = hostToCpu_startpc ;
  assign m$memInit_request_put = memInit_request_put ;
  assign m$EN_cpuToHost = EN_cpuToHost ;
  assign m$EN_hostToCpu = EN_hostToCpu ;
  assign m$EN_memInit_request_put = EN_memInit_request_put ;
  assign m$EN_ddr3client_request_get = EN_ddr3client_request_get ;
  assign m$EN_ddr3client_response_put = EN_ddr3client_response_put ;
endmodule  // mkDutWrapper

