/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Tue Apr 19 10:48:19 EDT 2016
 * 
 */
#include "bluesim_primitives.h"
#include "mkSynthesizedDRAM.h"


/* Constructor */
MOD_mkSynthesizedDRAM::MOD_mkSynthesizedDRAM(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_decrypt(simHdl, "decrypt", this),
    INST_encrypt(simHdl, "encrypt", this),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_encrypt_setKey = false;
  PORT_EN_encrypt_inputMessage = false;
  PORT_EN_encrypt_getResult = false;
  PORT_EN_decrypt_setKey = false;
  PORT_EN_decrypt_inputMessage = false;
  PORT_EN_decrypt_getResult = false;
  PORT_encrypt_setKey_key.setSize(96u);
  PORT_encrypt_setKey_key.clear();
  PORT_encrypt_inputMessage_text = 0llu;
  PORT_decrypt_setKey_key.setSize(96u);
  PORT_decrypt_setKey_key.clear();
  PORT_decrypt_inputMessage_text = 0llu;
  PORT_RDY_encrypt_setKey = false;
  PORT_RDY_encrypt_inputMessage = false;
  PORT_encrypt_getResult = 0llu;
  PORT_RDY_encrypt_getResult = false;
  PORT_RDY_decrypt_setKey = false;
  PORT_RDY_decrypt_inputMessage = false;
  PORT_decrypt_getResult = 0llu;
  PORT_RDY_decrypt_getResult = false;
  symbol_count = 32u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkSynthesizedDRAM::init_symbols_0()
{
  init_symbol(&symbols[0u],
	      "CAN_FIRE_decrypt_getResult",
	      SYM_DEF,
	      &DEF_CAN_FIRE_decrypt_getResult,
	      1u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_decrypt_inputMessage",
	      SYM_DEF,
	      &DEF_CAN_FIRE_decrypt_inputMessage,
	      1u);
  init_symbol(&symbols[2u], "CAN_FIRE_decrypt_setKey", SYM_DEF, &DEF_CAN_FIRE_decrypt_setKey, 1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_encrypt_getResult",
	      SYM_DEF,
	      &DEF_CAN_FIRE_encrypt_getResult,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_encrypt_inputMessage",
	      SYM_DEF,
	      &DEF_CAN_FIRE_encrypt_inputMessage,
	      1u);
  init_symbol(&symbols[5u], "CAN_FIRE_encrypt_setKey", SYM_DEF, &DEF_CAN_FIRE_encrypt_setKey, 1u);
  init_symbol(&symbols[6u], "decrypt", SYM_MODULE, &INST_decrypt);
  init_symbol(&symbols[7u], "decrypt_getResult", SYM_PORT, &PORT_decrypt_getResult, 48u);
  init_symbol(&symbols[8u],
	      "decrypt_inputMessage_text",
	      SYM_PORT,
	      &PORT_decrypt_inputMessage_text,
	      48u);
  init_symbol(&symbols[9u], "decrypt_setKey_key", SYM_PORT, &PORT_decrypt_setKey_key, 96u);
  init_symbol(&symbols[10u], "EN_decrypt_getResult", SYM_PORT, &PORT_EN_decrypt_getResult, 1u);
  init_symbol(&symbols[11u], "EN_decrypt_inputMessage", SYM_PORT, &PORT_EN_decrypt_inputMessage, 1u);
  init_symbol(&symbols[12u], "EN_decrypt_setKey", SYM_PORT, &PORT_EN_decrypt_setKey, 1u);
  init_symbol(&symbols[13u], "EN_encrypt_getResult", SYM_PORT, &PORT_EN_encrypt_getResult, 1u);
  init_symbol(&symbols[14u], "EN_encrypt_inputMessage", SYM_PORT, &PORT_EN_encrypt_inputMessage, 1u);
  init_symbol(&symbols[15u], "EN_encrypt_setKey", SYM_PORT, &PORT_EN_encrypt_setKey, 1u);
  init_symbol(&symbols[16u], "encrypt", SYM_MODULE, &INST_encrypt);
  init_symbol(&symbols[17u], "encrypt_getResult", SYM_PORT, &PORT_encrypt_getResult, 48u);
  init_symbol(&symbols[18u],
	      "encrypt_inputMessage_text",
	      SYM_PORT,
	      &PORT_encrypt_inputMessage_text,
	      48u);
  init_symbol(&symbols[19u], "encrypt_setKey_key", SYM_PORT, &PORT_encrypt_setKey_key, 96u);
  init_symbol(&symbols[20u], "RDY_decrypt_getResult", SYM_PORT, &PORT_RDY_decrypt_getResult, 1u);
  init_symbol(&symbols[21u],
	      "RDY_decrypt_inputMessage",
	      SYM_PORT,
	      &PORT_RDY_decrypt_inputMessage,
	      1u);
  init_symbol(&symbols[22u], "RDY_decrypt_setKey", SYM_PORT, &PORT_RDY_decrypt_setKey, 1u);
  init_symbol(&symbols[23u], "RDY_encrypt_getResult", SYM_PORT, &PORT_RDY_encrypt_getResult, 1u);
  init_symbol(&symbols[24u],
	      "RDY_encrypt_inputMessage",
	      SYM_PORT,
	      &PORT_RDY_encrypt_inputMessage,
	      1u);
  init_symbol(&symbols[25u], "RDY_encrypt_setKey", SYM_PORT, &PORT_RDY_encrypt_setKey, 1u);
  init_symbol(&symbols[26u],
	      "WILL_FIRE_decrypt_getResult",
	      SYM_DEF,
	      &DEF_WILL_FIRE_decrypt_getResult,
	      1u);
  init_symbol(&symbols[27u],
	      "WILL_FIRE_decrypt_inputMessage",
	      SYM_DEF,
	      &DEF_WILL_FIRE_decrypt_inputMessage,
	      1u);
  init_symbol(&symbols[28u], "WILL_FIRE_decrypt_setKey", SYM_DEF, &DEF_WILL_FIRE_decrypt_setKey, 1u);
  init_symbol(&symbols[29u],
	      "WILL_FIRE_encrypt_getResult",
	      SYM_DEF,
	      &DEF_WILL_FIRE_encrypt_getResult,
	      1u);
  init_symbol(&symbols[30u],
	      "WILL_FIRE_encrypt_inputMessage",
	      SYM_DEF,
	      &DEF_WILL_FIRE_encrypt_inputMessage,
	      1u);
  init_symbol(&symbols[31u], "WILL_FIRE_encrypt_setKey", SYM_DEF, &DEF_WILL_FIRE_encrypt_setKey, 1u);
}


/* Rule actions */


/* Methods */

void MOD_mkSynthesizedDRAM::METH_encrypt_setKey(tUWide ARG_encrypt_setKey_key)
{
  PORT_EN_encrypt_setKey = (tUInt8)1u;
  DEF_WILL_FIRE_encrypt_setKey = (tUInt8)1u;
  PORT_encrypt_setKey_key = ARG_encrypt_setKey_key;
}

tUInt8 MOD_mkSynthesizedDRAM::METH_RDY_encrypt_setKey()
{
  DEF_CAN_FIRE_encrypt_setKey = (tUInt8)1u;
  PORT_RDY_encrypt_setKey = DEF_CAN_FIRE_encrypt_setKey;
  return PORT_RDY_encrypt_setKey;
}

void MOD_mkSynthesizedDRAM::METH_encrypt_inputMessage(tUInt64 ARG_encrypt_inputMessage_text)
{
  PORT_EN_encrypt_inputMessage = (tUInt8)1u;
  DEF_WILL_FIRE_encrypt_inputMessage = (tUInt8)1u;
  PORT_encrypt_inputMessage_text = ARG_encrypt_inputMessage_text;
}

tUInt8 MOD_mkSynthesizedDRAM::METH_RDY_encrypt_inputMessage()
{
  DEF_CAN_FIRE_encrypt_inputMessage = (tUInt8)1u;
  PORT_RDY_encrypt_inputMessage = DEF_CAN_FIRE_encrypt_inputMessage;
  return PORT_RDY_encrypt_inputMessage;
}

tUInt64 MOD_mkSynthesizedDRAM::METH_encrypt_getResult()
{
  PORT_EN_encrypt_getResult = (tUInt8)1u;
  DEF_WILL_FIRE_encrypt_getResult = (tUInt8)1u;
  PORT_encrypt_getResult = 187649984473770llu;
  return PORT_encrypt_getResult;
}

tUInt8 MOD_mkSynthesizedDRAM::METH_RDY_encrypt_getResult()
{
  DEF_CAN_FIRE_encrypt_getResult = (tUInt8)1u;
  PORT_RDY_encrypt_getResult = DEF_CAN_FIRE_encrypt_getResult;
  return PORT_RDY_encrypt_getResult;
}

void MOD_mkSynthesizedDRAM::METH_decrypt_setKey(tUWide ARG_decrypt_setKey_key)
{
  PORT_EN_decrypt_setKey = (tUInt8)1u;
  DEF_WILL_FIRE_decrypt_setKey = (tUInt8)1u;
  PORT_decrypt_setKey_key = ARG_decrypt_setKey_key;
}

tUInt8 MOD_mkSynthesizedDRAM::METH_RDY_decrypt_setKey()
{
  DEF_CAN_FIRE_decrypt_setKey = (tUInt8)1u;
  PORT_RDY_decrypt_setKey = DEF_CAN_FIRE_decrypt_setKey;
  return PORT_RDY_decrypt_setKey;
}

void MOD_mkSynthesizedDRAM::METH_decrypt_inputMessage(tUInt64 ARG_decrypt_inputMessage_text)
{
  PORT_EN_decrypt_inputMessage = (tUInt8)1u;
  DEF_WILL_FIRE_decrypt_inputMessage = (tUInt8)1u;
  PORT_decrypt_inputMessage_text = ARG_decrypt_inputMessage_text;
}

tUInt8 MOD_mkSynthesizedDRAM::METH_RDY_decrypt_inputMessage()
{
  DEF_CAN_FIRE_decrypt_inputMessage = (tUInt8)1u;
  PORT_RDY_decrypt_inputMessage = DEF_CAN_FIRE_decrypt_inputMessage;
  return PORT_RDY_decrypt_inputMessage;
}

tUInt64 MOD_mkSynthesizedDRAM::METH_decrypt_getResult()
{
  PORT_EN_decrypt_getResult = (tUInt8)1u;
  DEF_WILL_FIRE_decrypt_getResult = (tUInt8)1u;
  PORT_decrypt_getResult = 187649984473770llu;
  return PORT_decrypt_getResult;
}

tUInt8 MOD_mkSynthesizedDRAM::METH_RDY_decrypt_getResult()
{
  DEF_CAN_FIRE_decrypt_getResult = (tUInt8)1u;
  PORT_RDY_decrypt_getResult = DEF_CAN_FIRE_decrypt_getResult;
  return PORT_RDY_decrypt_getResult;
}


/* Reset routines */

void MOD_mkSynthesizedDRAM::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_encrypt.reset_RST_N(ARG_rst_in);
  INST_decrypt.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkSynthesizedDRAM::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkSynthesizedDRAM::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_decrypt.dump_state(indent + 2u);
  INST_encrypt.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkSynthesizedDRAM::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 31u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_decrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_decrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_decrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_encrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_encrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_encrypt_setKey", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_decrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_decrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_decrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_encrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_encrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_encrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_decrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_decrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_decrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_encrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_encrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_encrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_decrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_decrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_decrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_encrypt_getResult", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_encrypt_inputMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_encrypt_setKey", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "decrypt_getResult", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "decrypt_inputMessage_text", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "decrypt_setKey_key", 96u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "encrypt_getResult", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "encrypt_inputMessage_text", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "encrypt_setKey_key", 96u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_decrypt.dump_VCD_defs(l);
    num = INST_encrypt.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkSynthesizedDRAM::dump_VCD(tVCDDumpType dt,
				     unsigned int levels,
				     MOD_mkSynthesizedDRAM &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkSynthesizedDRAM::vcd_defs(tVCDDumpType dt, MOD_mkSynthesizedDRAM &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 96u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 96u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_decrypt_getResult) != DEF_CAN_FIRE_decrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_decrypt_getResult, 1u);
	backing.DEF_CAN_FIRE_decrypt_getResult = DEF_CAN_FIRE_decrypt_getResult;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_decrypt_inputMessage) != DEF_CAN_FIRE_decrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_decrypt_inputMessage, 1u);
	backing.DEF_CAN_FIRE_decrypt_inputMessage = DEF_CAN_FIRE_decrypt_inputMessage;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_decrypt_setKey) != DEF_CAN_FIRE_decrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_decrypt_setKey, 1u);
	backing.DEF_CAN_FIRE_decrypt_setKey = DEF_CAN_FIRE_decrypt_setKey;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_encrypt_getResult) != DEF_CAN_FIRE_encrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_encrypt_getResult, 1u);
	backing.DEF_CAN_FIRE_encrypt_getResult = DEF_CAN_FIRE_encrypt_getResult;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_encrypt_inputMessage) != DEF_CAN_FIRE_encrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_encrypt_inputMessage, 1u);
	backing.DEF_CAN_FIRE_encrypt_inputMessage = DEF_CAN_FIRE_encrypt_inputMessage;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_encrypt_setKey) != DEF_CAN_FIRE_encrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_encrypt_setKey, 1u);
	backing.DEF_CAN_FIRE_encrypt_setKey = DEF_CAN_FIRE_encrypt_setKey;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_decrypt_getResult) != DEF_WILL_FIRE_decrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_decrypt_getResult, 1u);
	backing.DEF_WILL_FIRE_decrypt_getResult = DEF_WILL_FIRE_decrypt_getResult;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_decrypt_inputMessage) != DEF_WILL_FIRE_decrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_decrypt_inputMessage, 1u);
	backing.DEF_WILL_FIRE_decrypt_inputMessage = DEF_WILL_FIRE_decrypt_inputMessage;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_decrypt_setKey) != DEF_WILL_FIRE_decrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_decrypt_setKey, 1u);
	backing.DEF_WILL_FIRE_decrypt_setKey = DEF_WILL_FIRE_decrypt_setKey;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_encrypt_getResult) != DEF_WILL_FIRE_encrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_encrypt_getResult, 1u);
	backing.DEF_WILL_FIRE_encrypt_getResult = DEF_WILL_FIRE_encrypt_getResult;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_encrypt_inputMessage) != DEF_WILL_FIRE_encrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_encrypt_inputMessage, 1u);
	backing.DEF_WILL_FIRE_encrypt_inputMessage = DEF_WILL_FIRE_encrypt_inputMessage;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_encrypt_setKey) != DEF_WILL_FIRE_encrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_encrypt_setKey, 1u);
	backing.DEF_WILL_FIRE_encrypt_setKey = DEF_WILL_FIRE_encrypt_setKey;
      }
      ++num;
      if ((backing.PORT_EN_decrypt_getResult) != PORT_EN_decrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_decrypt_getResult, 1u);
	backing.PORT_EN_decrypt_getResult = PORT_EN_decrypt_getResult;
      }
      ++num;
      if ((backing.PORT_EN_decrypt_inputMessage) != PORT_EN_decrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_decrypt_inputMessage, 1u);
	backing.PORT_EN_decrypt_inputMessage = PORT_EN_decrypt_inputMessage;
      }
      ++num;
      if ((backing.PORT_EN_decrypt_setKey) != PORT_EN_decrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_decrypt_setKey, 1u);
	backing.PORT_EN_decrypt_setKey = PORT_EN_decrypt_setKey;
      }
      ++num;
      if ((backing.PORT_EN_encrypt_getResult) != PORT_EN_encrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_encrypt_getResult, 1u);
	backing.PORT_EN_encrypt_getResult = PORT_EN_encrypt_getResult;
      }
      ++num;
      if ((backing.PORT_EN_encrypt_inputMessage) != PORT_EN_encrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_encrypt_inputMessage, 1u);
	backing.PORT_EN_encrypt_inputMessage = PORT_EN_encrypt_inputMessage;
      }
      ++num;
      if ((backing.PORT_EN_encrypt_setKey) != PORT_EN_encrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_encrypt_setKey, 1u);
	backing.PORT_EN_encrypt_setKey = PORT_EN_encrypt_setKey;
      }
      ++num;
      if ((backing.PORT_RDY_decrypt_getResult) != PORT_RDY_decrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_decrypt_getResult, 1u);
	backing.PORT_RDY_decrypt_getResult = PORT_RDY_decrypt_getResult;
      }
      ++num;
      if ((backing.PORT_RDY_decrypt_inputMessage) != PORT_RDY_decrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_decrypt_inputMessage, 1u);
	backing.PORT_RDY_decrypt_inputMessage = PORT_RDY_decrypt_inputMessage;
      }
      ++num;
      if ((backing.PORT_RDY_decrypt_setKey) != PORT_RDY_decrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_decrypt_setKey, 1u);
	backing.PORT_RDY_decrypt_setKey = PORT_RDY_decrypt_setKey;
      }
      ++num;
      if ((backing.PORT_RDY_encrypt_getResult) != PORT_RDY_encrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_encrypt_getResult, 1u);
	backing.PORT_RDY_encrypt_getResult = PORT_RDY_encrypt_getResult;
      }
      ++num;
      if ((backing.PORT_RDY_encrypt_inputMessage) != PORT_RDY_encrypt_inputMessage)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_encrypt_inputMessage, 1u);
	backing.PORT_RDY_encrypt_inputMessage = PORT_RDY_encrypt_inputMessage;
      }
      ++num;
      if ((backing.PORT_RDY_encrypt_setKey) != PORT_RDY_encrypt_setKey)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_encrypt_setKey, 1u);
	backing.PORT_RDY_encrypt_setKey = PORT_RDY_encrypt_setKey;
      }
      ++num;
      if ((backing.PORT_decrypt_getResult) != PORT_decrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, PORT_decrypt_getResult, 48u);
	backing.PORT_decrypt_getResult = PORT_decrypt_getResult;
      }
      ++num;
      if ((backing.PORT_decrypt_inputMessage_text) != PORT_decrypt_inputMessage_text)
      {
	vcd_write_val(sim_hdl, num, PORT_decrypt_inputMessage_text, 48u);
	backing.PORT_decrypt_inputMessage_text = PORT_decrypt_inputMessage_text;
      }
      ++num;
      if ((backing.PORT_decrypt_setKey_key) != PORT_decrypt_setKey_key)
      {
	vcd_write_val(sim_hdl, num, PORT_decrypt_setKey_key, 96u);
	backing.PORT_decrypt_setKey_key = PORT_decrypt_setKey_key;
      }
      ++num;
      if ((backing.PORT_encrypt_getResult) != PORT_encrypt_getResult)
      {
	vcd_write_val(sim_hdl, num, PORT_encrypt_getResult, 48u);
	backing.PORT_encrypt_getResult = PORT_encrypt_getResult;
      }
      ++num;
      if ((backing.PORT_encrypt_inputMessage_text) != PORT_encrypt_inputMessage_text)
      {
	vcd_write_val(sim_hdl, num, PORT_encrypt_inputMessage_text, 48u);
	backing.PORT_encrypt_inputMessage_text = PORT_encrypt_inputMessage_text;
      }
      ++num;
      if ((backing.PORT_encrypt_setKey_key) != PORT_encrypt_setKey_key)
      {
	vcd_write_val(sim_hdl, num, PORT_encrypt_setKey_key, 96u);
	backing.PORT_encrypt_setKey_key = PORT_encrypt_setKey_key;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_decrypt_getResult, 1u);
      backing.DEF_CAN_FIRE_decrypt_getResult = DEF_CAN_FIRE_decrypt_getResult;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_decrypt_inputMessage, 1u);
      backing.DEF_CAN_FIRE_decrypt_inputMessage = DEF_CAN_FIRE_decrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_decrypt_setKey, 1u);
      backing.DEF_CAN_FIRE_decrypt_setKey = DEF_CAN_FIRE_decrypt_setKey;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_encrypt_getResult, 1u);
      backing.DEF_CAN_FIRE_encrypt_getResult = DEF_CAN_FIRE_encrypt_getResult;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_encrypt_inputMessage, 1u);
      backing.DEF_CAN_FIRE_encrypt_inputMessage = DEF_CAN_FIRE_encrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_encrypt_setKey, 1u);
      backing.DEF_CAN_FIRE_encrypt_setKey = DEF_CAN_FIRE_encrypt_setKey;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_decrypt_getResult, 1u);
      backing.DEF_WILL_FIRE_decrypt_getResult = DEF_WILL_FIRE_decrypt_getResult;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_decrypt_inputMessage, 1u);
      backing.DEF_WILL_FIRE_decrypt_inputMessage = DEF_WILL_FIRE_decrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_decrypt_setKey, 1u);
      backing.DEF_WILL_FIRE_decrypt_setKey = DEF_WILL_FIRE_decrypt_setKey;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_encrypt_getResult, 1u);
      backing.DEF_WILL_FIRE_encrypt_getResult = DEF_WILL_FIRE_encrypt_getResult;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_encrypt_inputMessage, 1u);
      backing.DEF_WILL_FIRE_encrypt_inputMessage = DEF_WILL_FIRE_encrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_encrypt_setKey, 1u);
      backing.DEF_WILL_FIRE_encrypt_setKey = DEF_WILL_FIRE_encrypt_setKey;
      vcd_write_val(sim_hdl, num++, PORT_EN_decrypt_getResult, 1u);
      backing.PORT_EN_decrypt_getResult = PORT_EN_decrypt_getResult;
      vcd_write_val(sim_hdl, num++, PORT_EN_decrypt_inputMessage, 1u);
      backing.PORT_EN_decrypt_inputMessage = PORT_EN_decrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, PORT_EN_decrypt_setKey, 1u);
      backing.PORT_EN_decrypt_setKey = PORT_EN_decrypt_setKey;
      vcd_write_val(sim_hdl, num++, PORT_EN_encrypt_getResult, 1u);
      backing.PORT_EN_encrypt_getResult = PORT_EN_encrypt_getResult;
      vcd_write_val(sim_hdl, num++, PORT_EN_encrypt_inputMessage, 1u);
      backing.PORT_EN_encrypt_inputMessage = PORT_EN_encrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, PORT_EN_encrypt_setKey, 1u);
      backing.PORT_EN_encrypt_setKey = PORT_EN_encrypt_setKey;
      vcd_write_val(sim_hdl, num++, PORT_RDY_decrypt_getResult, 1u);
      backing.PORT_RDY_decrypt_getResult = PORT_RDY_decrypt_getResult;
      vcd_write_val(sim_hdl, num++, PORT_RDY_decrypt_inputMessage, 1u);
      backing.PORT_RDY_decrypt_inputMessage = PORT_RDY_decrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, PORT_RDY_decrypt_setKey, 1u);
      backing.PORT_RDY_decrypt_setKey = PORT_RDY_decrypt_setKey;
      vcd_write_val(sim_hdl, num++, PORT_RDY_encrypt_getResult, 1u);
      backing.PORT_RDY_encrypt_getResult = PORT_RDY_encrypt_getResult;
      vcd_write_val(sim_hdl, num++, PORT_RDY_encrypt_inputMessage, 1u);
      backing.PORT_RDY_encrypt_inputMessage = PORT_RDY_encrypt_inputMessage;
      vcd_write_val(sim_hdl, num++, PORT_RDY_encrypt_setKey, 1u);
      backing.PORT_RDY_encrypt_setKey = PORT_RDY_encrypt_setKey;
      vcd_write_val(sim_hdl, num++, PORT_decrypt_getResult, 48u);
      backing.PORT_decrypt_getResult = PORT_decrypt_getResult;
      vcd_write_val(sim_hdl, num++, PORT_decrypt_inputMessage_text, 48u);
      backing.PORT_decrypt_inputMessage_text = PORT_decrypt_inputMessage_text;
      vcd_write_val(sim_hdl, num++, PORT_decrypt_setKey_key, 96u);
      backing.PORT_decrypt_setKey_key = PORT_decrypt_setKey_key;
      vcd_write_val(sim_hdl, num++, PORT_encrypt_getResult, 48u);
      backing.PORT_encrypt_getResult = PORT_encrypt_getResult;
      vcd_write_val(sim_hdl, num++, PORT_encrypt_inputMessage_text, 48u);
      backing.PORT_encrypt_inputMessage_text = PORT_encrypt_inputMessage_text;
      vcd_write_val(sim_hdl, num++, PORT_encrypt_setKey_key, 96u);
      backing.PORT_encrypt_setKey_key = PORT_encrypt_setKey_key;
    }
}

void MOD_mkSynthesizedDRAM::vcd_submodules(tVCDDumpType dt,
					   unsigned int levels,
					   MOD_mkSynthesizedDRAM &backing)
{
  INST_decrypt.dump_VCD(dt, levels, backing.INST_decrypt);
  INST_encrypt.dump_VCD(dt, levels, backing.INST_encrypt);
}
