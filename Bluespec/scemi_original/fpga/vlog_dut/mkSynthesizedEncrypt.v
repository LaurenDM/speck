//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Apr 26 20:09:27 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_setKey                     O     1
// RDY_inputMessage               O     1 reg
// getResult                      O    48 reg
// RDY_getResult                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setKey_key                     I    96
// inputMessage_text              I    48 reg
// EN_setKey                      I     1
// EN_inputMessage                I     1
// EN_getResult                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSynthesizedEncrypt(CLK,
			    RST_N,

			    setKey_key,
			    EN_setKey,
			    RDY_setKey,

			    inputMessage_text,
			    EN_inputMessage,
			    RDY_inputMessage,

			    EN_getResult,
			    getResult,
			    RDY_getResult);
  input  CLK;
  input  RST_N;

  // action method setKey
  input  [95 : 0] setKey_key;
  input  EN_setKey;
  output RDY_setKey;

  // action method inputMessage
  input  [47 : 0] inputMessage_text;
  input  EN_inputMessage;
  output RDY_inputMessage;

  // actionvalue method getResult
  input  EN_getResult;
  output [47 : 0] getResult;
  output RDY_getResult;

  // signals for module outputs
  wire [47 : 0] getResult;
  wire RDY_getResult, RDY_inputMessage, RDY_setKey;

  // register enc_alpha
  reg [4 : 0] enc_alpha;
  wire [4 : 0] enc_alpha$D_IN;
  wire enc_alpha$EN;

  // register enc_beta
  reg [4 : 0] enc_beta;
  wire [4 : 0] enc_beta$D_IN;
  wire enc_beta$EN;

  // register enc_k0
  reg [23 : 0] enc_k0;
  wire [23 : 0] enc_k0$D_IN;
  wire enc_k0$EN;

  // register enc_l_0
  reg [23 : 0] enc_l_0;
  wire [23 : 0] enc_l_0$D_IN;
  wire enc_l_0$EN;

  // register enc_l_1
  reg [23 : 0] enc_l_1;
  wire [23 : 0] enc_l_1$D_IN;
  wire enc_l_1$EN;

  // register enc_l_10
  reg [23 : 0] enc_l_10;
  wire [23 : 0] enc_l_10$D_IN;
  wire enc_l_10$EN;

  // register enc_l_11
  reg [23 : 0] enc_l_11;
  wire [23 : 0] enc_l_11$D_IN;
  wire enc_l_11$EN;

  // register enc_l_12
  reg [23 : 0] enc_l_12;
  wire [23 : 0] enc_l_12$D_IN;
  wire enc_l_12$EN;

  // register enc_l_13
  reg [23 : 0] enc_l_13;
  wire [23 : 0] enc_l_13$D_IN;
  wire enc_l_13$EN;

  // register enc_l_14
  reg [23 : 0] enc_l_14;
  wire [23 : 0] enc_l_14$D_IN;
  wire enc_l_14$EN;

  // register enc_l_15
  reg [23 : 0] enc_l_15;
  wire [23 : 0] enc_l_15$D_IN;
  wire enc_l_15$EN;

  // register enc_l_16
  reg [23 : 0] enc_l_16;
  wire [23 : 0] enc_l_16$D_IN;
  wire enc_l_16$EN;

  // register enc_l_17
  reg [23 : 0] enc_l_17;
  wire [23 : 0] enc_l_17$D_IN;
  wire enc_l_17$EN;

  // register enc_l_18
  reg [23 : 0] enc_l_18;
  wire [23 : 0] enc_l_18$D_IN;
  wire enc_l_18$EN;

  // register enc_l_19
  reg [23 : 0] enc_l_19;
  wire [23 : 0] enc_l_19$D_IN;
  wire enc_l_19$EN;

  // register enc_l_2
  reg [23 : 0] enc_l_2;
  wire [23 : 0] enc_l_2$D_IN;
  wire enc_l_2$EN;

  // register enc_l_20
  reg [23 : 0] enc_l_20;
  wire [23 : 0] enc_l_20$D_IN;
  wire enc_l_20$EN;

  // register enc_l_21
  reg [23 : 0] enc_l_21;
  wire [23 : 0] enc_l_21$D_IN;
  wire enc_l_21$EN;

  // register enc_l_22
  reg [23 : 0] enc_l_22;
  wire [23 : 0] enc_l_22$D_IN;
  wire enc_l_22$EN;

  // register enc_l_23
  reg [23 : 0] enc_l_23;
  wire [23 : 0] enc_l_23$D_IN;
  wire enc_l_23$EN;

  // register enc_l_24
  reg [23 : 0] enc_l_24;
  wire [23 : 0] enc_l_24$D_IN;
  wire enc_l_24$EN;

  // register enc_l_25
  reg [23 : 0] enc_l_25;
  wire [23 : 0] enc_l_25$D_IN;
  wire enc_l_25$EN;

  // register enc_l_3
  reg [23 : 0] enc_l_3;
  wire [23 : 0] enc_l_3$D_IN;
  wire enc_l_3$EN;

  // register enc_l_4
  reg [23 : 0] enc_l_4;
  wire [23 : 0] enc_l_4$D_IN;
  wire enc_l_4$EN;

  // register enc_l_5
  reg [23 : 0] enc_l_5;
  wire [23 : 0] enc_l_5$D_IN;
  wire enc_l_5$EN;

  // register enc_l_6
  reg [23 : 0] enc_l_6;
  wire [23 : 0] enc_l_6$D_IN;
  wire enc_l_6$EN;

  // register enc_l_7
  reg [23 : 0] enc_l_7;
  wire [23 : 0] enc_l_7$D_IN;
  wire enc_l_7$EN;

  // register enc_l_8
  reg [23 : 0] enc_l_8;
  wire [23 : 0] enc_l_8$D_IN;
  wire enc_l_8$EN;

  // register enc_l_9
  reg [23 : 0] enc_l_9;
  wire [23 : 0] enc_l_9$D_IN;
  wire enc_l_9$EN;

  // register enc_round_0
  reg [23 : 0] enc_round_0;
  wire [23 : 0] enc_round_0$D_IN;
  wire enc_round_0$EN;

  // register enc_roundkey_0
  reg [23 : 0] enc_roundkey_0;
  wire [23 : 0] enc_roundkey_0$D_IN;
  wire enc_roundkey_0$EN;

  // register enc_xyReg_0
  reg [47 : 0] enc_xyReg_0;
  wire [47 : 0] enc_xyReg_0$D_IN;
  wire enc_xyReg_0$EN;

  // ports of submodule enc_ciphertextFIFO
  wire [47 : 0] enc_ciphertextFIFO$D_IN, enc_ciphertextFIFO$D_OUT;
  wire enc_ciphertextFIFO$CLR,
       enc_ciphertextFIFO$DEQ,
       enc_ciphertextFIFO$EMPTY_N,
       enc_ciphertextFIFO$ENQ;

  // ports of submodule enc_plaintextFIFO
  wire [47 : 0] enc_plaintextFIFO$D_IN, enc_plaintextFIFO$D_OUT;
  wire enc_plaintextFIFO$CLR,
       enc_plaintextFIFO$DEQ,
       enc_plaintextFIFO$EMPTY_N,
       enc_plaintextFIFO$ENQ,
       enc_plaintextFIFO$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_enc_pipeline,
       CAN_FIRE_getResult,
       CAN_FIRE_inputMessage,
       CAN_FIRE_setKey,
       WILL_FIRE_RL_enc_pipeline,
       WILL_FIRE_getResult,
       WILL_FIRE_inputMessage,
       WILL_FIRE_setKey;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_enc_l_0$write_1__VAL_1;
  wire MUX_enc_l_0$write_1__SEL_1,
       MUX_enc_l_1$write_1__SEL_1,
       MUX_enc_l_2$write_1__SEL_1;

  // remaining internal signals
  reg [23 : 0] SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54;
  wire [23 : 0] IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d335,
		IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d82,
		IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d114,
		IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d146,
		IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d367,
		IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d399,
		IF_24_MINUS_enc_alpha_0_1_BIT_4_2_THEN_IF_24_M_ETC___d405,
		IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d236,
		IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d433,
		IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d268,
		IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d300,
		IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d465,
		IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d497,
		IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150,
		IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307,
		IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403,
		b__h15251,
		b__h26146,
		b__h36930,
		b__h4261,
		x__h3189;
  wire [4 : 0] _24_MINUS_enc_alpha_0___d21;

  // action method setKey
  assign RDY_setKey = !enc_plaintextFIFO$EMPTY_N && enc_round_0 == 24'd0 ;
  assign CAN_FIRE_setKey =
	     !enc_plaintextFIFO$EMPTY_N && enc_round_0 == 24'd0 ;
  assign WILL_FIRE_setKey = EN_setKey ;

  // action method inputMessage
  assign RDY_inputMessage = enc_plaintextFIFO$FULL_N ;
  assign CAN_FIRE_inputMessage = enc_plaintextFIFO$FULL_N ;
  assign WILL_FIRE_inputMessage = EN_inputMessage ;

  // actionvalue method getResult
  assign getResult = enc_ciphertextFIFO$D_OUT ;
  assign RDY_getResult = enc_ciphertextFIFO$EMPTY_N ;
  assign CAN_FIRE_getResult = enc_ciphertextFIFO$EMPTY_N ;
  assign WILL_FIRE_getResult = EN_getResult ;

  // submodule enc_ciphertextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) enc_ciphertextFIFO(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(enc_ciphertextFIFO$D_IN),
							      .ENQ(enc_ciphertextFIFO$ENQ),
							      .DEQ(enc_ciphertextFIFO$DEQ),
							      .CLR(enc_ciphertextFIFO$CLR),
							      .D_OUT(enc_ciphertextFIFO$D_OUT),
							      .FULL_N(),
							      .EMPTY_N(enc_ciphertextFIFO$EMPTY_N));

  // submodule enc_plaintextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) enc_plaintextFIFO(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(enc_plaintextFIFO$D_IN),
							     .ENQ(enc_plaintextFIFO$ENQ),
							     .DEQ(enc_plaintextFIFO$DEQ),
							     .CLR(enc_plaintextFIFO$CLR),
							     .D_OUT(enc_plaintextFIFO$D_OUT),
							     .FULL_N(enc_plaintextFIFO$FULL_N),
							     .EMPTY_N(enc_plaintextFIFO$EMPTY_N));

  // rule RL_enc_pipeline
  assign CAN_FIRE_RL_enc_pipeline =
	     enc_plaintextFIFO$EMPTY_N || enc_round_0 != 24'd0 ;
  assign WILL_FIRE_RL_enc_pipeline = CAN_FIRE_RL_enc_pipeline ;

  // inputs to muxes for submodule ports
  assign MUX_enc_l_0$write_1__SEL_1 =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd0 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;
  assign MUX_enc_l_1$write_1__SEL_1 =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd1 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;
  assign MUX_enc_l_2$write_1__SEL_1 =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd2 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;
  assign MUX_enc_l_0$write_1__VAL_1 =
	     b__h4261 +
	     IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150 ^
	     enc_round_0 ;

  // register enc_alpha
  assign enc_alpha$D_IN = 5'h0 ;
  assign enc_alpha$EN = 1'b0 ;

  // register enc_beta
  assign enc_beta$D_IN = 5'h0 ;
  assign enc_beta$EN = 1'b0 ;

  // register enc_k0
  assign enc_k0$D_IN = setKey_key[23:0] ;
  assign enc_k0$EN = EN_setKey ;

  // register enc_l_0
  assign enc_l_0$D_IN =
	     MUX_enc_l_0$write_1__SEL_1 ?
	       MUX_enc_l_0$write_1__VAL_1 :
	       setKey_key[47:24] ;
  assign enc_l_0$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd0 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ||
	     EN_setKey ;

  // register enc_l_1
  assign enc_l_1$D_IN =
	     MUX_enc_l_1$write_1__SEL_1 ?
	       MUX_enc_l_0$write_1__VAL_1 :
	       setKey_key[71:48] ;
  assign enc_l_1$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd1 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ||
	     EN_setKey ;

  // register enc_l_10
  assign enc_l_10$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_10$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd10 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_11
  assign enc_l_11$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_11$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd11 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_12
  assign enc_l_12$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_12$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd12 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_13
  assign enc_l_13$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_13$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd13 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_14
  assign enc_l_14$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_14$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd14 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_15
  assign enc_l_15$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_15$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd15 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_16
  assign enc_l_16$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_16$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd16 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_17
  assign enc_l_17$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_17$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd17 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_18
  assign enc_l_18$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_18$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd18 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_19
  assign enc_l_19$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_19$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd19 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_2
  assign enc_l_2$D_IN =
	     MUX_enc_l_2$write_1__SEL_1 ?
	       MUX_enc_l_0$write_1__VAL_1 :
	       setKey_key[95:72] ;
  assign enc_l_2$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd2 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ||
	     EN_setKey ;

  // register enc_l_20
  assign enc_l_20$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_20$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd20 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_21
  assign enc_l_21$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_21$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd21 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_22
  assign enc_l_22$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_22$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd22 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_23
  assign enc_l_23$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_23$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd23 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_24
  assign enc_l_24$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_24$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd24 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_25
  assign enc_l_25$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_25$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd25 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_3
  assign enc_l_3$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_3$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd3 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_4
  assign enc_l_4$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_4$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd4 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_5
  assign enc_l_5$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_5$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd5 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_6
  assign enc_l_6$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_6$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd6 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_7
  assign enc_l_7$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_7$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd7 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_8
  assign enc_l_8$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_8$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd8 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_l_9
  assign enc_l_9$D_IN = MUX_enc_l_0$write_1__VAL_1 ;
  assign enc_l_9$EN =
	     WILL_FIRE_RL_enc_pipeline && x__h3189 == 24'd9 &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_round_0
  assign enc_round_0$D_IN =
	     (enc_round_0 == 24'd0 && !enc_plaintextFIFO$EMPTY_N) ?
	       24'd0 :
	       enc_round_0 + 24'd1 ;
  assign enc_round_0$EN = CAN_FIRE_RL_enc_pipeline ;

  // register enc_roundkey_0
  assign enc_roundkey_0$D_IN =
	     b__h15251 ^
	     b__h4261 +
	     IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150 ^
	     enc_round_0 ;
  assign enc_roundkey_0$EN =
	     WILL_FIRE_RL_enc_pipeline &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // register enc_xyReg_0
  assign enc_xyReg_0$D_IN =
	     { IF_24_MINUS_enc_alpha_0_1_BIT_4_2_THEN_IF_24_M_ETC___d405,
	       b__h36930 ^
	       IF_24_MINUS_enc_alpha_0_1_BIT_4_2_THEN_IF_24_M_ETC___d405 } ;
  assign enc_xyReg_0$EN =
	     WILL_FIRE_RL_enc_pipeline &&
	     (enc_round_0 != 24'd0 || enc_plaintextFIFO$EMPTY_N) ;

  // submodule enc_ciphertextFIFO
  assign enc_ciphertextFIFO$D_IN = 48'h0 ;
  assign enc_ciphertextFIFO$ENQ = 1'b0 ;
  assign enc_ciphertextFIFO$DEQ = EN_getResult ;
  assign enc_ciphertextFIFO$CLR = 1'b0 ;

  // submodule enc_plaintextFIFO
  assign enc_plaintextFIFO$D_IN = inputMessage_text ;
  assign enc_plaintextFIFO$ENQ = EN_inputMessage ;
  assign enc_plaintextFIFO$DEQ =
	     WILL_FIRE_RL_enc_pipeline && enc_plaintextFIFO$EMPTY_N &&
	     enc_round_0 == 24'd0 ;
  assign enc_plaintextFIFO$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d335 =
	     _24_MINUS_enc_alpha_0___d21[2] ?
	       (_24_MINUS_enc_alpha_0___d21[1] ?
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[16:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:17] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[17:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:18] }) :
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[18:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:19] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[19:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:20] })) :
	       (_24_MINUS_enc_alpha_0___d21[1] ?
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[20:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:21] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[21:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:22] }) :
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[22:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23] } :
		     IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307)) ;
  assign IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d82 =
	     _24_MINUS_enc_alpha_0___d21[2] ?
	       (_24_MINUS_enc_alpha_0___d21[1] ?
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[16:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:17] } :
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[17:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:18] }) :
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[18:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:19] } :
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[19:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:20] })) :
	       (_24_MINUS_enc_alpha_0___d21[1] ?
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[20:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:21] } :
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[21:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:22] }) :
		  (_24_MINUS_enc_alpha_0___d21[0] ?
		     { SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[22:0],
		       SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23] } :
		     SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54)) ;
  assign IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d114 =
	     _24_MINUS_enc_alpha_0___d21[3] ?
	       IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d82 :
	       (_24_MINUS_enc_alpha_0___d21[2] ?
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:1] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[1:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:2] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[2:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:3] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[3:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:4] })) :
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[4:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:5] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[5:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:6] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[6:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:7] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[7:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:8] }))) ;
  assign IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d146 =
	     _24_MINUS_enc_alpha_0___d21[3] ?
	       (_24_MINUS_enc_alpha_0___d21[2] ?
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[8:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:9] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[9:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:10] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[10:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:11] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[11:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:12] })) :
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[12:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:13] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[13:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:14] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[14:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:15] } :
			{ SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[15:0],
			  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54[23:16] }))) :
	       IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d82 ;
  assign IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d367 =
	     _24_MINUS_enc_alpha_0___d21[3] ?
	       IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d335 :
	       (_24_MINUS_enc_alpha_0___d21[2] ?
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:1] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[1:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:2] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[2:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:3] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[3:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:4] })) :
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[4:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:5] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[5:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:6] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[6:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:7] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[7:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:8] }))) ;
  assign IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d399 =
	     _24_MINUS_enc_alpha_0___d21[3] ?
	       (_24_MINUS_enc_alpha_0___d21[2] ?
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[8:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:9] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[9:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:10] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[10:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:11] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[11:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:12] })) :
		  (_24_MINUS_enc_alpha_0___d21[1] ?
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[12:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:13] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[13:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:14] }) :
		     (_24_MINUS_enc_alpha_0___d21[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[14:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:15] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[15:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307[23:16] }))) :
	       IF_24_MINUS_enc_alpha_0_1_BIT_2_4_THEN_IF_24_M_ETC___d335 ;
  assign IF_24_MINUS_enc_alpha_0_1_BIT_4_2_THEN_IF_24_M_ETC___d405 =
	     b__h26146 +
	     IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403 ^
	     IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150 ;
  assign IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d236 =
	     enc_beta[2] ?
	       (enc_beta[1] ?
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[16:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:17] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[17:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:18] }) :
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[18:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:19] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[19:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:20] })) :
	       (enc_beta[1] ?
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[20:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:21] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[21:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:22] }) :
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[22:0],
		       IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23] } :
		     IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150)) ;
  assign IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d433 =
	     enc_beta[2] ?
	       (enc_beta[1] ?
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[16:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:17] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[17:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:18] }) :
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[18:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:19] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[19:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:20] })) :
	       (enc_beta[1] ?
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[20:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:21] } :
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[21:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:22] }) :
		  (enc_beta[0] ?
		     { IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[22:0],
		       IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23] } :
		     IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403)) ;
  assign IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d268 =
	     enc_beta[3] ?
	       IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d236 :
	       (enc_beta[2] ?
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:1] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[1:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:2] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[2:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:3] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[3:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:4] })) :
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[4:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:5] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[5:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:6] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[6:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:7] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[7:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:8] }))) ;
  assign IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d300 =
	     enc_beta[3] ?
	       (enc_beta[2] ?
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[8:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:9] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[9:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:10] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[10:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:11] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[11:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:12] })) :
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[12:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:13] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[13:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:14] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[14:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:15] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[15:0],
			  IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150[23:16] }))) :
	       IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d236 ;
  assign IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d465 =
	     enc_beta[3] ?
	       IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d433 :
	       (enc_beta[2] ?
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:1] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[1:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:2] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[2:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:3] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[3:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:4] })) :
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[4:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:5] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[5:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:6] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[6:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:7] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[7:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:8] }))) ;
  assign IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d497 =
	     enc_beta[3] ?
	       (enc_beta[2] ?
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[8:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:9] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[9:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:10] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[10:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:11] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[11:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:12] })) :
		  (enc_beta[1] ?
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[12:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:13] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[13:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:14] }) :
		     (enc_beta[0] ?
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[14:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:15] } :
			{ IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[15:0],
			  IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403[23:16] }))) :
	       IF_enc_beta_03_BIT_2_06_THEN_IF_enc_beta_03_BI_ETC___d433 ;
  assign IF_enc_round_0_EQ_0_THEN_enc_k0_48_ELSE_enc_ro_ETC___d150 =
	     (enc_round_0 == 24'd0) ? enc_k0 : enc_roundkey_0 ;
  assign IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d307 =
	     (enc_round_0 == 24'd0) ?
	       enc_plaintextFIFO$D_OUT[47:24] :
	       enc_xyReg_0[47:24] ;
  assign IF_enc_round_0_EQ_0_THEN_enc_plaintextFIFO_fir_ETC___d403 =
	     (enc_round_0 == 24'd0) ?
	       enc_plaintextFIFO$D_OUT[23:0] :
	       enc_xyReg_0[23:0] ;
  assign _24_MINUS_enc_alpha_0___d21 = 5'd24 - enc_alpha ;
  assign b__h15251 =
	     enc_beta[4] ?
	       IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d268 :
	       IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d300 ;
  assign b__h26146 =
	     _24_MINUS_enc_alpha_0___d21[4] ?
	       IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d367 :
	       IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d399 ;
  assign b__h36930 =
	     enc_beta[4] ?
	       IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d465 :
	       IF_enc_beta_03_BIT_3_05_THEN_IF_enc_beta_03_BI_ETC___d497 ;
  assign b__h4261 =
	     _24_MINUS_enc_alpha_0___d21[4] ?
	       IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d114 :
	       IF_24_MINUS_enc_alpha_0_1_BIT_3_3_THEN_IF_24_M_ETC___d146 ;
  assign x__h3189 = enc_round_0 + 24'd4 - 24'd1 ;
  always@(enc_round_0 or
	  enc_l_0 or
	  enc_l_1 or
	  enc_l_2 or
	  enc_l_3 or
	  enc_l_4 or
	  enc_l_5 or
	  enc_l_6 or
	  enc_l_7 or
	  enc_l_8 or
	  enc_l_9 or
	  enc_l_10 or
	  enc_l_11 or
	  enc_l_12 or
	  enc_l_13 or
	  enc_l_14 or
	  enc_l_15 or
	  enc_l_16 or
	  enc_l_17 or
	  enc_l_18 or
	  enc_l_19 or
	  enc_l_20 or
	  enc_l_21 or enc_l_22 or enc_l_23 or enc_l_24 or enc_l_25)
  begin
    case (enc_round_0)
      24'd0:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_0;
      24'd1:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_1;
      24'd2:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_2;
      24'd3:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_3;
      24'd4:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_4;
      24'd5:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_5;
      24'd6:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_6;
      24'd7:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_7;
      24'd8:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_8;
      24'd9:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_9;
      24'd10:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_10;
      24'd11:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_11;
      24'd12:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_12;
      24'd13:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_13;
      24'd14:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_14;
      24'd15:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_15;
      24'd16:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_16;
      24'd17:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_17;
      24'd18:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_18;
      24'd19:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_19;
      24'd20:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_20;
      24'd21:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_21;
      24'd22:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_22;
      24'd23:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_23;
      24'd24:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_24;
      24'd25:
	  SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 = enc_l_25;
      default: SEL_ARR_enc_l_0_7_enc_l_1_8_enc_l_2_9_enc_l_3__ETC___d54 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        enc_alpha <= `BSV_ASSIGNMENT_DELAY 5'd8;
	enc_beta <= `BSV_ASSIGNMENT_DELAY 5'd3;
	enc_k0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_1 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_10 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_11 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_12 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_13 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_14 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_15 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_16 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_17 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_18 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_19 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_2 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_20 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_21 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_22 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_23 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_24 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_25 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_3 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_4 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_5 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_6 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_7 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_8 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_l_9 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_round_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_roundkey_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	enc_xyReg_0 <= `BSV_ASSIGNMENT_DELAY 48'd0;
      end
    else
      begin
        if (enc_alpha$EN) enc_alpha <= `BSV_ASSIGNMENT_DELAY enc_alpha$D_IN;
	if (enc_beta$EN) enc_beta <= `BSV_ASSIGNMENT_DELAY enc_beta$D_IN;
	if (enc_k0$EN) enc_k0 <= `BSV_ASSIGNMENT_DELAY enc_k0$D_IN;
	if (enc_l_0$EN) enc_l_0 <= `BSV_ASSIGNMENT_DELAY enc_l_0$D_IN;
	if (enc_l_1$EN) enc_l_1 <= `BSV_ASSIGNMENT_DELAY enc_l_1$D_IN;
	if (enc_l_10$EN) enc_l_10 <= `BSV_ASSIGNMENT_DELAY enc_l_10$D_IN;
	if (enc_l_11$EN) enc_l_11 <= `BSV_ASSIGNMENT_DELAY enc_l_11$D_IN;
	if (enc_l_12$EN) enc_l_12 <= `BSV_ASSIGNMENT_DELAY enc_l_12$D_IN;
	if (enc_l_13$EN) enc_l_13 <= `BSV_ASSIGNMENT_DELAY enc_l_13$D_IN;
	if (enc_l_14$EN) enc_l_14 <= `BSV_ASSIGNMENT_DELAY enc_l_14$D_IN;
	if (enc_l_15$EN) enc_l_15 <= `BSV_ASSIGNMENT_DELAY enc_l_15$D_IN;
	if (enc_l_16$EN) enc_l_16 <= `BSV_ASSIGNMENT_DELAY enc_l_16$D_IN;
	if (enc_l_17$EN) enc_l_17 <= `BSV_ASSIGNMENT_DELAY enc_l_17$D_IN;
	if (enc_l_18$EN) enc_l_18 <= `BSV_ASSIGNMENT_DELAY enc_l_18$D_IN;
	if (enc_l_19$EN) enc_l_19 <= `BSV_ASSIGNMENT_DELAY enc_l_19$D_IN;
	if (enc_l_2$EN) enc_l_2 <= `BSV_ASSIGNMENT_DELAY enc_l_2$D_IN;
	if (enc_l_20$EN) enc_l_20 <= `BSV_ASSIGNMENT_DELAY enc_l_20$D_IN;
	if (enc_l_21$EN) enc_l_21 <= `BSV_ASSIGNMENT_DELAY enc_l_21$D_IN;
	if (enc_l_22$EN) enc_l_22 <= `BSV_ASSIGNMENT_DELAY enc_l_22$D_IN;
	if (enc_l_23$EN) enc_l_23 <= `BSV_ASSIGNMENT_DELAY enc_l_23$D_IN;
	if (enc_l_24$EN) enc_l_24 <= `BSV_ASSIGNMENT_DELAY enc_l_24$D_IN;
	if (enc_l_25$EN) enc_l_25 <= `BSV_ASSIGNMENT_DELAY enc_l_25$D_IN;
	if (enc_l_3$EN) enc_l_3 <= `BSV_ASSIGNMENT_DELAY enc_l_3$D_IN;
	if (enc_l_4$EN) enc_l_4 <= `BSV_ASSIGNMENT_DELAY enc_l_4$D_IN;
	if (enc_l_5$EN) enc_l_5 <= `BSV_ASSIGNMENT_DELAY enc_l_5$D_IN;
	if (enc_l_6$EN) enc_l_6 <= `BSV_ASSIGNMENT_DELAY enc_l_6$D_IN;
	if (enc_l_7$EN) enc_l_7 <= `BSV_ASSIGNMENT_DELAY enc_l_7$D_IN;
	if (enc_l_8$EN) enc_l_8 <= `BSV_ASSIGNMENT_DELAY enc_l_8$D_IN;
	if (enc_l_9$EN) enc_l_9 <= `BSV_ASSIGNMENT_DELAY enc_l_9$D_IN;
	if (enc_round_0$EN)
	  enc_round_0 <= `BSV_ASSIGNMENT_DELAY enc_round_0$D_IN;
	if (enc_roundkey_0$EN)
	  enc_roundkey_0 <= `BSV_ASSIGNMENT_DELAY enc_roundkey_0$D_IN;
	if (enc_xyReg_0$EN)
	  enc_xyReg_0 <= `BSV_ASSIGNMENT_DELAY enc_xyReg_0$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    enc_alpha = 5'h0A;
    enc_beta = 5'h0A;
    enc_k0 = 24'hAAAAAA;
    enc_l_0 = 24'hAAAAAA;
    enc_l_1 = 24'hAAAAAA;
    enc_l_10 = 24'hAAAAAA;
    enc_l_11 = 24'hAAAAAA;
    enc_l_12 = 24'hAAAAAA;
    enc_l_13 = 24'hAAAAAA;
    enc_l_14 = 24'hAAAAAA;
    enc_l_15 = 24'hAAAAAA;
    enc_l_16 = 24'hAAAAAA;
    enc_l_17 = 24'hAAAAAA;
    enc_l_18 = 24'hAAAAAA;
    enc_l_19 = 24'hAAAAAA;
    enc_l_2 = 24'hAAAAAA;
    enc_l_20 = 24'hAAAAAA;
    enc_l_21 = 24'hAAAAAA;
    enc_l_22 = 24'hAAAAAA;
    enc_l_23 = 24'hAAAAAA;
    enc_l_24 = 24'hAAAAAA;
    enc_l_25 = 24'hAAAAAA;
    enc_l_3 = 24'hAAAAAA;
    enc_l_4 = 24'hAAAAAA;
    enc_l_5 = 24'hAAAAAA;
    enc_l_6 = 24'hAAAAAA;
    enc_l_7 = 24'hAAAAAA;
    enc_l_8 = 24'hAAAAAA;
    enc_l_9 = 24'hAAAAAA;
    enc_round_0 = 24'hAAAAAA;
    enc_roundkey_0 = 24'hAAAAAA;
    enc_xyReg_0 = 48'hAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSynthesizedEncrypt

