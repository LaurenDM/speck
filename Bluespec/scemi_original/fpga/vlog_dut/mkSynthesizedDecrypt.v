//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Apr 26 20:09:29 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_setKey                     O     1
// RDY_inputMessage               O     1 reg
// getResult                      O    48 reg
// RDY_getResult                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setKey_key                     I    96
// inputMessage_text              I    48 reg
// EN_setKey                      I     1
// EN_inputMessage                I     1
// EN_getResult                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSynthesizedDecrypt(CLK,
			    RST_N,

			    setKey_key,
			    EN_setKey,
			    RDY_setKey,

			    inputMessage_text,
			    EN_inputMessage,
			    RDY_inputMessage,

			    EN_getResult,
			    getResult,
			    RDY_getResult);
  input  CLK;
  input  RST_N;

  // action method setKey
  input  [95 : 0] setKey_key;
  input  EN_setKey;
  output RDY_setKey;

  // action method inputMessage
  input  [47 : 0] inputMessage_text;
  input  EN_inputMessage;
  output RDY_inputMessage;

  // actionvalue method getResult
  input  EN_getResult;
  output [47 : 0] getResult;
  output RDY_getResult;

  // signals for module outputs
  wire [47 : 0] getResult;
  wire RDY_getResult, RDY_inputMessage, RDY_setKey;

  // register dec_alpha
  reg [4 : 0] dec_alpha;
  wire [4 : 0] dec_alpha$D_IN;
  wire dec_alpha$EN;

  // register dec_beta
  reg [4 : 0] dec_beta;
  wire [4 : 0] dec_beta$D_IN;
  wire dec_beta$EN;

  // register dec_k0
  reg [23 : 0] dec_k0;
  wire [23 : 0] dec_k0$D_IN;
  wire dec_k0$EN;

  // register dec_l_0
  reg [23 : 0] dec_l_0;
  wire [23 : 0] dec_l_0$D_IN;
  wire dec_l_0$EN;

  // register dec_l_1
  reg [23 : 0] dec_l_1;
  wire [23 : 0] dec_l_1$D_IN;
  wire dec_l_1$EN;

  // register dec_l_10
  reg [23 : 0] dec_l_10;
  wire [23 : 0] dec_l_10$D_IN;
  wire dec_l_10$EN;

  // register dec_l_11
  reg [23 : 0] dec_l_11;
  wire [23 : 0] dec_l_11$D_IN;
  wire dec_l_11$EN;

  // register dec_l_12
  reg [23 : 0] dec_l_12;
  wire [23 : 0] dec_l_12$D_IN;
  wire dec_l_12$EN;

  // register dec_l_13
  reg [23 : 0] dec_l_13;
  wire [23 : 0] dec_l_13$D_IN;
  wire dec_l_13$EN;

  // register dec_l_14
  reg [23 : 0] dec_l_14;
  wire [23 : 0] dec_l_14$D_IN;
  wire dec_l_14$EN;

  // register dec_l_15
  reg [23 : 0] dec_l_15;
  wire [23 : 0] dec_l_15$D_IN;
  wire dec_l_15$EN;

  // register dec_l_16
  reg [23 : 0] dec_l_16;
  wire [23 : 0] dec_l_16$D_IN;
  wire dec_l_16$EN;

  // register dec_l_17
  reg [23 : 0] dec_l_17;
  wire [23 : 0] dec_l_17$D_IN;
  wire dec_l_17$EN;

  // register dec_l_18
  reg [23 : 0] dec_l_18;
  wire [23 : 0] dec_l_18$D_IN;
  wire dec_l_18$EN;

  // register dec_l_19
  reg [23 : 0] dec_l_19;
  wire [23 : 0] dec_l_19$D_IN;
  wire dec_l_19$EN;

  // register dec_l_2
  reg [23 : 0] dec_l_2;
  wire [23 : 0] dec_l_2$D_IN;
  wire dec_l_2$EN;

  // register dec_l_20
  reg [23 : 0] dec_l_20;
  wire [23 : 0] dec_l_20$D_IN;
  wire dec_l_20$EN;

  // register dec_l_21
  reg [23 : 0] dec_l_21;
  wire [23 : 0] dec_l_21$D_IN;
  wire dec_l_21$EN;

  // register dec_l_22
  reg [23 : 0] dec_l_22;
  wire [23 : 0] dec_l_22$D_IN;
  wire dec_l_22$EN;

  // register dec_l_23
  reg [23 : 0] dec_l_23;
  wire [23 : 0] dec_l_23$D_IN;
  wire dec_l_23$EN;

  // register dec_l_24
  reg [23 : 0] dec_l_24;
  wire [23 : 0] dec_l_24$D_IN;
  wire dec_l_24$EN;

  // register dec_l_25
  reg [23 : 0] dec_l_25;
  wire [23 : 0] dec_l_25$D_IN;
  wire dec_l_25$EN;

  // register dec_l_3
  reg [23 : 0] dec_l_3;
  wire [23 : 0] dec_l_3$D_IN;
  wire dec_l_3$EN;

  // register dec_l_4
  reg [23 : 0] dec_l_4;
  wire [23 : 0] dec_l_4$D_IN;
  wire dec_l_4$EN;

  // register dec_l_5
  reg [23 : 0] dec_l_5;
  wire [23 : 0] dec_l_5$D_IN;
  wire dec_l_5$EN;

  // register dec_l_6
  reg [23 : 0] dec_l_6;
  wire [23 : 0] dec_l_6$D_IN;
  wire dec_l_6$EN;

  // register dec_l_7
  reg [23 : 0] dec_l_7;
  wire [23 : 0] dec_l_7$D_IN;
  wire dec_l_7$EN;

  // register dec_l_8
  reg [23 : 0] dec_l_8;
  wire [23 : 0] dec_l_8$D_IN;
  wire dec_l_8$EN;

  // register dec_l_9
  reg [23 : 0] dec_l_9;
  wire [23 : 0] dec_l_9$D_IN;
  wire dec_l_9$EN;

  // register dec_round_0
  reg [23 : 0] dec_round_0;
  wire [23 : 0] dec_round_0$D_IN;
  wire dec_round_0$EN;

  // register dec_roundkey_0
  reg [23 : 0] dec_roundkey_0;
  wire [23 : 0] dec_roundkey_0$D_IN;
  wire dec_roundkey_0$EN;

  // register dec_xyReg_0
  reg [47 : 0] dec_xyReg_0;
  wire [47 : 0] dec_xyReg_0$D_IN;
  wire dec_xyReg_0$EN;

  // ports of submodule dec_ciphertextFIFO
  wire [47 : 0] dec_ciphertextFIFO$D_IN, dec_ciphertextFIFO$D_OUT;
  wire dec_ciphertextFIFO$CLR,
       dec_ciphertextFIFO$DEQ,
       dec_ciphertextFIFO$EMPTY_N,
       dec_ciphertextFIFO$ENQ,
       dec_ciphertextFIFO$FULL_N;

  // ports of submodule dec_plaintextFIFO
  wire [47 : 0] dec_plaintextFIFO$D_IN, dec_plaintextFIFO$D_OUT;
  wire dec_plaintextFIFO$CLR,
       dec_plaintextFIFO$DEQ,
       dec_plaintextFIFO$EMPTY_N,
       dec_plaintextFIFO$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_dec_pipeline,
       CAN_FIRE_getResult,
       CAN_FIRE_inputMessage,
       CAN_FIRE_setKey,
       WILL_FIRE_RL_dec_pipeline,
       WILL_FIRE_getResult,
       WILL_FIRE_inputMessage,
       WILL_FIRE_setKey;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_dec_l_0$write_1__VAL_1;
  wire MUX_dec_l_0$write_1__SEL_1,
       MUX_dec_l_1$write_1__SEL_1,
       MUX_dec_l_2$write_1__SEL_1;

  // remaining internal signals
  reg [23 : 0] SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53;
  wire [23 : 0] IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d341,
		IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d94,
		IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d126,
		IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d158,
		IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d373,
		IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d405,
		IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d188,
		IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d435,
		IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d220,
		IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d252,
		IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d467,
		IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d499,
		IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d308,
		IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313,
		IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407,
		IF_dec_round_0_EQ_0_THEN_dec_k0_3_ELSE_dec_rou_ETC___d65,
		SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160,
		SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66,
		b__h11332,
		b__h26175,
		b__h33143,
		x__h3189;
  wire [4 : 0] _24_MINUS_dec_beta_6___d57;

  // action method setKey
  assign RDY_setKey = !dec_ciphertextFIFO$EMPTY_N && dec_round_0 == 24'd0 ;
  assign CAN_FIRE_setKey =
	     !dec_ciphertextFIFO$EMPTY_N && dec_round_0 == 24'd0 ;
  assign WILL_FIRE_setKey = EN_setKey ;

  // action method inputMessage
  assign RDY_inputMessage = dec_ciphertextFIFO$FULL_N ;
  assign CAN_FIRE_inputMessage = dec_ciphertextFIFO$FULL_N ;
  assign WILL_FIRE_inputMessage = EN_inputMessage ;

  // actionvalue method getResult
  assign getResult = dec_plaintextFIFO$D_OUT ;
  assign RDY_getResult = dec_plaintextFIFO$EMPTY_N ;
  assign CAN_FIRE_getResult = dec_plaintextFIFO$EMPTY_N ;
  assign WILL_FIRE_getResult = EN_getResult ;

  // submodule dec_ciphertextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) dec_ciphertextFIFO(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(dec_ciphertextFIFO$D_IN),
							      .ENQ(dec_ciphertextFIFO$ENQ),
							      .DEQ(dec_ciphertextFIFO$DEQ),
							      .CLR(dec_ciphertextFIFO$CLR),
							      .D_OUT(dec_ciphertextFIFO$D_OUT),
							      .FULL_N(dec_ciphertextFIFO$FULL_N),
							      .EMPTY_N(dec_ciphertextFIFO$EMPTY_N));

  // submodule dec_plaintextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) dec_plaintextFIFO(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dec_plaintextFIFO$D_IN),
							     .ENQ(dec_plaintextFIFO$ENQ),
							     .DEQ(dec_plaintextFIFO$DEQ),
							     .CLR(dec_plaintextFIFO$CLR),
							     .D_OUT(dec_plaintextFIFO$D_OUT),
							     .FULL_N(),
							     .EMPTY_N(dec_plaintextFIFO$EMPTY_N));

  // rule RL_dec_pipeline
  assign CAN_FIRE_RL_dec_pipeline =
	     dec_ciphertextFIFO$EMPTY_N || dec_round_0 != 24'd0 ;
  assign WILL_FIRE_RL_dec_pipeline = CAN_FIRE_RL_dec_pipeline ;

  // inputs to muxes for submodule ports
  assign MUX_dec_l_0$write_1__SEL_1 =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd0 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;
  assign MUX_dec_l_1$write_1__SEL_1 =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd1 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;
  assign MUX_dec_l_2$write_1__SEL_1 =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd2 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;
  assign MUX_dec_l_0$write_1__VAL_1 =
	     dec_alpha[4] ?
	       IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d220 :
	       IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d252 ;

  // register dec_alpha
  assign dec_alpha$D_IN = 5'h0 ;
  assign dec_alpha$EN = 1'b0 ;

  // register dec_beta
  assign dec_beta$D_IN = 5'h0 ;
  assign dec_beta$EN = 1'b0 ;

  // register dec_k0
  assign dec_k0$D_IN = setKey_key[23:0] ;
  assign dec_k0$EN = EN_setKey ;

  // register dec_l_0
  assign dec_l_0$D_IN =
	     MUX_dec_l_0$write_1__SEL_1 ?
	       MUX_dec_l_0$write_1__VAL_1 :
	       setKey_key[47:24] ;
  assign dec_l_0$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd0 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ||
	     EN_setKey ;

  // register dec_l_1
  assign dec_l_1$D_IN =
	     MUX_dec_l_1$write_1__SEL_1 ?
	       MUX_dec_l_0$write_1__VAL_1 :
	       setKey_key[71:48] ;
  assign dec_l_1$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd1 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ||
	     EN_setKey ;

  // register dec_l_10
  assign dec_l_10$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_10$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd10 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_11
  assign dec_l_11$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_11$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd11 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_12
  assign dec_l_12$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_12$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd12 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_13
  assign dec_l_13$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_13$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd13 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_14
  assign dec_l_14$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_14$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd14 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_15
  assign dec_l_15$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_15$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd15 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_16
  assign dec_l_16$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_16$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd16 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_17
  assign dec_l_17$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_17$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd17 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_18
  assign dec_l_18$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_18$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd18 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_19
  assign dec_l_19$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_19$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd19 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_2
  assign dec_l_2$D_IN =
	     MUX_dec_l_2$write_1__SEL_1 ?
	       MUX_dec_l_0$write_1__VAL_1 :
	       setKey_key[95:72] ;
  assign dec_l_2$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd2 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ||
	     EN_setKey ;

  // register dec_l_20
  assign dec_l_20$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_20$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd20 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_21
  assign dec_l_21$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_21$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd21 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_22
  assign dec_l_22$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_22$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd22 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_23
  assign dec_l_23$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_23$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd23 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_24
  assign dec_l_24$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_24$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd24 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_25
  assign dec_l_25$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_25$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd25 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_3
  assign dec_l_3$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_3$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd3 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_4
  assign dec_l_4$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_4$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd4 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_5
  assign dec_l_5$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_5$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd5 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_6
  assign dec_l_6$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_6$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd6 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_7
  assign dec_l_7$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_7$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd7 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_8
  assign dec_l_8$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_8$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd8 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_l_9
  assign dec_l_9$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_9$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h3189 == 24'd9 &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_round_0
  assign dec_round_0$D_IN =
	     (dec_round_0 == 24'd0 && !dec_ciphertextFIFO$EMPTY_N) ?
	       24'd0 :
	       dec_round_0 + 24'd1 ;
  assign dec_round_0$EN = CAN_FIRE_RL_dec_pipeline ;

  // register dec_roundkey_0
  assign dec_roundkey_0$D_IN = b__h11332 ;
  assign dec_roundkey_0$EN =
	     WILL_FIRE_RL_dec_pipeline &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // register dec_xyReg_0
  assign dec_xyReg_0$D_IN = { b__h26175, b__h33143 } ;
  assign dec_xyReg_0$EN =
	     WILL_FIRE_RL_dec_pipeline &&
	     (dec_round_0 != 24'd0 || dec_ciphertextFIFO$EMPTY_N) ;

  // submodule dec_ciphertextFIFO
  assign dec_ciphertextFIFO$D_IN = inputMessage_text ;
  assign dec_ciphertextFIFO$ENQ = EN_inputMessage ;
  assign dec_ciphertextFIFO$DEQ =
	     WILL_FIRE_RL_dec_pipeline && dec_ciphertextFIFO$EMPTY_N &&
	     dec_round_0 == 24'd0 ;
  assign dec_ciphertextFIFO$CLR = 1'b0 ;

  // submodule dec_plaintextFIFO
  assign dec_plaintextFIFO$D_IN = 48'h0 ;
  assign dec_plaintextFIFO$ENQ = 1'b0 ;
  assign dec_plaintextFIFO$DEQ = EN_getResult ;
  assign dec_plaintextFIFO$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d341 =
	     _24_MINUS_dec_beta_6___d57[2] ?
	       (_24_MINUS_dec_beta_6___d57[1] ?
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[16:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:17] } :
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[17:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:18] }) :
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[18:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:19] } :
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[19:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:20] })) :
	       (_24_MINUS_dec_beta_6___d57[1] ?
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[20:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:21] } :
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[21:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:22] }) :
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[22:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23] } :
		     IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313)) ;
  assign IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d94 =
	     _24_MINUS_dec_beta_6___d57[2] ?
	       (_24_MINUS_dec_beta_6___d57[1] ?
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[16:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:17] } :
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[17:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:18] }) :
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[18:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:19] } :
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[19:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:20] })) :
	       (_24_MINUS_dec_beta_6___d57[1] ?
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[20:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:21] } :
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[21:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:22] }) :
		  (_24_MINUS_dec_beta_6___d57[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[22:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23] } :
		     SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66)) ;
  assign IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d126 =
	     _24_MINUS_dec_beta_6___d57[3] ?
	       IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d94 :
	       (_24_MINUS_dec_beta_6___d57[2] ?
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:1] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[1:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:2] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[2:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:3] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[3:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:4] })) :
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[4:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:5] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[5:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:6] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[6:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:7] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[7:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:8] }))) ;
  assign IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d158 =
	     _24_MINUS_dec_beta_6___d57[3] ?
	       (_24_MINUS_dec_beta_6___d57[2] ?
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[8:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:9] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[9:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:10] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[10:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:11] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[11:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:12] })) :
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[12:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:13] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[13:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:14] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[14:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:15] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[15:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66[23:16] }))) :
	       IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d94 ;
  assign IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d373 =
	     _24_MINUS_dec_beta_6___d57[3] ?
	       IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d341 :
	       (_24_MINUS_dec_beta_6___d57[2] ?
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:1] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[1:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:2] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[2:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:3] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[3:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:4] })) :
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[4:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:5] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[5:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:6] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[6:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:7] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[7:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:8] }))) ;
  assign IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d405 =
	     _24_MINUS_dec_beta_6___d57[3] ?
	       (_24_MINUS_dec_beta_6___d57[2] ?
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[8:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:9] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[9:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:10] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[10:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:11] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[11:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:12] })) :
		  (_24_MINUS_dec_beta_6___d57[1] ?
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[12:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:13] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[13:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:14] }) :
		     (_24_MINUS_dec_beta_6___d57[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[14:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:15] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[15:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313[23:16] }))) :
	       IF_24_MINUS_dec_beta_6_7_BIT_2_0_THEN_IF_24_MI_ETC___d341 ;
  assign IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d188 =
	     dec_alpha[2] ?
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[16:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:17] } :
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[17:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:18] }) :
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[18:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:19] } :
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[19:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:20] })) :
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[20:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:21] } :
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[21:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:22] }) :
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[22:0],
		       SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23] } :
		     SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160)) ;
  assign IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d435 =
	     dec_alpha[2] ?
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[16:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:17] } :
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[17:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:18] }) :
		  (dec_alpha[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[18:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:19] } :
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[19:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:20] })) :
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[20:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:21] } :
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[21:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:22] }) :
		  (dec_alpha[0] ?
		     { IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[22:0],
		       IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23] } :
		     IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407)) ;
  assign IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d220 =
	     dec_alpha[3] ?
	       IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d188 :
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:1] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[1:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:2] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[2:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:3] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[3:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:4] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[4:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:5] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[5:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:6] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[6:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:7] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[7:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:8] }))) ;
  assign IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d252 =
	     dec_alpha[3] ?
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[8:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:9] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[9:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:10] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[10:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:11] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[11:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:12] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[12:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:13] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[13:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:14] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[14:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:15] } :
			{ SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[15:0],
			  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160[23:16] }))) :
	       IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d188 ;
  assign IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d467 =
	     dec_alpha[3] ?
	       IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d435 :
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:1] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[1:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:2] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[2:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:3] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[3:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:4] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[4:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:5] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[5:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:6] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[6:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:7] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[7:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:8] }))) ;
  assign IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d499 =
	     dec_alpha[3] ?
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[8:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:9] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[9:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:10] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[10:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:11] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[11:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:12] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[12:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:13] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[13:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:14] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[14:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:15] } :
			{ IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[15:0],
			  IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407[23:16] }))) :
	       IF_dec_alpha_0_BIT_2_3_THEN_IF_dec_alpha_0_BIT_ETC___d435 ;
  assign IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d308 =
	     (dec_round_0 == 24'd0) ?
	       dec_ciphertextFIFO$D_OUT[47:24] :
	       dec_xyReg_0[47:24] ;
  assign IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d313 =
	     IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d308 ^
	     ((dec_round_0 == 24'd0) ?
		dec_ciphertextFIFO$D_OUT[23:0] :
		dec_xyReg_0[23:0]) ;
  assign IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d407 =
	     (IF_dec_round_0_EQ_0_THEN_dec_ciphertextFIFO_fi_ETC___d308 ^
	      IF_dec_round_0_EQ_0_THEN_dec_k0_3_ELSE_dec_rou_ETC___d65) -
	     b__h33143 ;
  assign IF_dec_round_0_EQ_0_THEN_dec_k0_3_ELSE_dec_rou_ETC___d65 =
	     (dec_round_0 == 24'd0) ? dec_k0 : dec_roundkey_0 ;
  assign SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d160 =
	     (SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 ^
	      24'd21 - dec_round_0) -
	     b__h11332 ;
  assign SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d66 =
	     SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 ^
	     IF_dec_round_0_EQ_0_THEN_dec_k0_3_ELSE_dec_rou_ETC___d65 ;
  assign _24_MINUS_dec_beta_6___d57 = 5'd24 - dec_beta ;
  assign b__h11332 =
	     _24_MINUS_dec_beta_6___d57[4] ?
	       IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d126 :
	       IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d158 ;
  assign b__h26175 =
	     dec_alpha[4] ?
	       IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d467 :
	       IF_dec_alpha_0_BIT_3_2_THEN_IF_dec_alpha_0_BIT_ETC___d499 ;
  assign b__h33143 =
	     _24_MINUS_dec_beta_6___d57[4] ?
	       IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d373 :
	       IF_24_MINUS_dec_beta_6_7_BIT_3_9_THEN_IF_24_MI_ETC___d405 ;
  assign x__h3189 = dec_round_0 + 24'd4 - 24'd1 ;
  always@(dec_round_0 or
	  dec_l_0 or
	  dec_l_1 or
	  dec_l_2 or
	  dec_l_3 or
	  dec_l_4 or
	  dec_l_5 or
	  dec_l_6 or
	  dec_l_7 or
	  dec_l_8 or
	  dec_l_9 or
	  dec_l_10 or
	  dec_l_11 or
	  dec_l_12 or
	  dec_l_13 or
	  dec_l_14 or
	  dec_l_15 or
	  dec_l_16 or
	  dec_l_17 or
	  dec_l_18 or
	  dec_l_19 or
	  dec_l_20 or
	  dec_l_21 or dec_l_22 or dec_l_23 or dec_l_24 or dec_l_25)
  begin
    case (dec_round_0)
      24'd0:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_0;
      24'd1:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_1;
      24'd2:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_2;
      24'd3:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_3;
      24'd4:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_4;
      24'd5:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_5;
      24'd6:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_6;
      24'd7:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_7;
      24'd8:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_8;
      24'd9:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_9;
      24'd10:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_10;
      24'd11:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_11;
      24'd12:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_12;
      24'd13:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_13;
      24'd14:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_14;
      24'd15:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_15;
      24'd16:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_16;
      24'd17:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_17;
      24'd18:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_18;
      24'd19:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_19;
      24'd20:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_20;
      24'd21:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_21;
      24'd22:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_22;
      24'd23:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_23;
      24'd24:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_24;
      24'd25:
	  SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 = dec_l_25;
      default: SEL_ARR_dec_l_0_6_dec_l_1_7_dec_l_2_8_dec_l_3__ETC___d53 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dec_alpha <= `BSV_ASSIGNMENT_DELAY 5'd8;
	dec_beta <= `BSV_ASSIGNMENT_DELAY 5'd3;
	dec_k0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_1 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_10 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_11 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_12 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_13 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_14 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_15 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_16 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_17 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_18 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_19 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_2 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_20 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_21 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_22 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_23 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_24 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_25 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_3 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_4 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_5 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_6 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_7 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_8 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_9 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_round_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_roundkey_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_xyReg_0 <= `BSV_ASSIGNMENT_DELAY 48'd0;
      end
    else
      begin
        if (dec_alpha$EN) dec_alpha <= `BSV_ASSIGNMENT_DELAY dec_alpha$D_IN;
	if (dec_beta$EN) dec_beta <= `BSV_ASSIGNMENT_DELAY dec_beta$D_IN;
	if (dec_k0$EN) dec_k0 <= `BSV_ASSIGNMENT_DELAY dec_k0$D_IN;
	if (dec_l_0$EN) dec_l_0 <= `BSV_ASSIGNMENT_DELAY dec_l_0$D_IN;
	if (dec_l_1$EN) dec_l_1 <= `BSV_ASSIGNMENT_DELAY dec_l_1$D_IN;
	if (dec_l_10$EN) dec_l_10 <= `BSV_ASSIGNMENT_DELAY dec_l_10$D_IN;
	if (dec_l_11$EN) dec_l_11 <= `BSV_ASSIGNMENT_DELAY dec_l_11$D_IN;
	if (dec_l_12$EN) dec_l_12 <= `BSV_ASSIGNMENT_DELAY dec_l_12$D_IN;
	if (dec_l_13$EN) dec_l_13 <= `BSV_ASSIGNMENT_DELAY dec_l_13$D_IN;
	if (dec_l_14$EN) dec_l_14 <= `BSV_ASSIGNMENT_DELAY dec_l_14$D_IN;
	if (dec_l_15$EN) dec_l_15 <= `BSV_ASSIGNMENT_DELAY dec_l_15$D_IN;
	if (dec_l_16$EN) dec_l_16 <= `BSV_ASSIGNMENT_DELAY dec_l_16$D_IN;
	if (dec_l_17$EN) dec_l_17 <= `BSV_ASSIGNMENT_DELAY dec_l_17$D_IN;
	if (dec_l_18$EN) dec_l_18 <= `BSV_ASSIGNMENT_DELAY dec_l_18$D_IN;
	if (dec_l_19$EN) dec_l_19 <= `BSV_ASSIGNMENT_DELAY dec_l_19$D_IN;
	if (dec_l_2$EN) dec_l_2 <= `BSV_ASSIGNMENT_DELAY dec_l_2$D_IN;
	if (dec_l_20$EN) dec_l_20 <= `BSV_ASSIGNMENT_DELAY dec_l_20$D_IN;
	if (dec_l_21$EN) dec_l_21 <= `BSV_ASSIGNMENT_DELAY dec_l_21$D_IN;
	if (dec_l_22$EN) dec_l_22 <= `BSV_ASSIGNMENT_DELAY dec_l_22$D_IN;
	if (dec_l_23$EN) dec_l_23 <= `BSV_ASSIGNMENT_DELAY dec_l_23$D_IN;
	if (dec_l_24$EN) dec_l_24 <= `BSV_ASSIGNMENT_DELAY dec_l_24$D_IN;
	if (dec_l_25$EN) dec_l_25 <= `BSV_ASSIGNMENT_DELAY dec_l_25$D_IN;
	if (dec_l_3$EN) dec_l_3 <= `BSV_ASSIGNMENT_DELAY dec_l_3$D_IN;
	if (dec_l_4$EN) dec_l_4 <= `BSV_ASSIGNMENT_DELAY dec_l_4$D_IN;
	if (dec_l_5$EN) dec_l_5 <= `BSV_ASSIGNMENT_DELAY dec_l_5$D_IN;
	if (dec_l_6$EN) dec_l_6 <= `BSV_ASSIGNMENT_DELAY dec_l_6$D_IN;
	if (dec_l_7$EN) dec_l_7 <= `BSV_ASSIGNMENT_DELAY dec_l_7$D_IN;
	if (dec_l_8$EN) dec_l_8 <= `BSV_ASSIGNMENT_DELAY dec_l_8$D_IN;
	if (dec_l_9$EN) dec_l_9 <= `BSV_ASSIGNMENT_DELAY dec_l_9$D_IN;
	if (dec_round_0$EN)
	  dec_round_0 <= `BSV_ASSIGNMENT_DELAY dec_round_0$D_IN;
	if (dec_roundkey_0$EN)
	  dec_roundkey_0 <= `BSV_ASSIGNMENT_DELAY dec_roundkey_0$D_IN;
	if (dec_xyReg_0$EN)
	  dec_xyReg_0 <= `BSV_ASSIGNMENT_DELAY dec_xyReg_0$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dec_alpha = 5'h0A;
    dec_beta = 5'h0A;
    dec_k0 = 24'hAAAAAA;
    dec_l_0 = 24'hAAAAAA;
    dec_l_1 = 24'hAAAAAA;
    dec_l_10 = 24'hAAAAAA;
    dec_l_11 = 24'hAAAAAA;
    dec_l_12 = 24'hAAAAAA;
    dec_l_13 = 24'hAAAAAA;
    dec_l_14 = 24'hAAAAAA;
    dec_l_15 = 24'hAAAAAA;
    dec_l_16 = 24'hAAAAAA;
    dec_l_17 = 24'hAAAAAA;
    dec_l_18 = 24'hAAAAAA;
    dec_l_19 = 24'hAAAAAA;
    dec_l_2 = 24'hAAAAAA;
    dec_l_20 = 24'hAAAAAA;
    dec_l_21 = 24'hAAAAAA;
    dec_l_22 = 24'hAAAAAA;
    dec_l_23 = 24'hAAAAAA;
    dec_l_24 = 24'hAAAAAA;
    dec_l_25 = 24'hAAAAAA;
    dec_l_3 = 24'hAAAAAA;
    dec_l_4 = 24'hAAAAAA;
    dec_l_5 = 24'hAAAAAA;
    dec_l_6 = 24'hAAAAAA;
    dec_l_7 = 24'hAAAAAA;
    dec_l_8 = 24'hAAAAAA;
    dec_l_9 = 24'hAAAAAA;
    dec_round_0 = 24'hAAAAAA;
    dec_roundkey_0 = 24'hAAAAAA;
    dec_xyReg_0 = 48'hAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSynthesizedDecrypt

