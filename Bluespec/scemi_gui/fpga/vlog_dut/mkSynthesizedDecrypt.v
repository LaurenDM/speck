//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May  4 17:24:33 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_setKey                     O     1
// RDY_inputMessage               O     1 reg
// getResult                      O    48 reg
// RDY_getResult                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setKey_key                     I    96
// inputMessage_text              I    48 reg
// EN_setKey                      I     1
// EN_inputMessage                I     1
// EN_getResult                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSynthesizedDecrypt(CLK,
			    RST_N,

			    setKey_key,
			    EN_setKey,
			    RDY_setKey,

			    inputMessage_text,
			    EN_inputMessage,
			    RDY_inputMessage,

			    EN_getResult,
			    getResult,
			    RDY_getResult);
  input  CLK;
  input  RST_N;

  // action method setKey
  input  [95 : 0] setKey_key;
  input  EN_setKey;
  output RDY_setKey;

  // action method inputMessage
  input  [47 : 0] inputMessage_text;
  input  EN_inputMessage;
  output RDY_inputMessage;

  // actionvalue method getResult
  input  EN_getResult;
  output [47 : 0] getResult;
  output RDY_getResult;

  // signals for module outputs
  wire [47 : 0] getResult;
  wire RDY_getResult, RDY_inputMessage, RDY_setKey;

  // register dec_alpha
  reg [4 : 0] dec_alpha;
  wire [4 : 0] dec_alpha$D_IN;
  wire dec_alpha$EN;

  // register dec_beta
  reg [4 : 0] dec_beta;
  wire [4 : 0] dec_beta$D_IN;
  wire dec_beta$EN;

  // register dec_k0
  reg [23 : 0] dec_k0;
  wire [23 : 0] dec_k0$D_IN;
  wire dec_k0$EN;

  // register dec_l_0
  reg [23 : 0] dec_l_0;
  wire [23 : 0] dec_l_0$D_IN;
  wire dec_l_0$EN;

  // register dec_l_1
  reg [23 : 0] dec_l_1;
  wire [23 : 0] dec_l_1$D_IN;
  wire dec_l_1$EN;

  // register dec_l_10
  reg [23 : 0] dec_l_10;
  wire [23 : 0] dec_l_10$D_IN;
  wire dec_l_10$EN;

  // register dec_l_11
  reg [23 : 0] dec_l_11;
  wire [23 : 0] dec_l_11$D_IN;
  wire dec_l_11$EN;

  // register dec_l_12
  reg [23 : 0] dec_l_12;
  wire [23 : 0] dec_l_12$D_IN;
  wire dec_l_12$EN;

  // register dec_l_13
  reg [23 : 0] dec_l_13;
  wire [23 : 0] dec_l_13$D_IN;
  wire dec_l_13$EN;

  // register dec_l_14
  reg [23 : 0] dec_l_14;
  wire [23 : 0] dec_l_14$D_IN;
  wire dec_l_14$EN;

  // register dec_l_15
  reg [23 : 0] dec_l_15;
  wire [23 : 0] dec_l_15$D_IN;
  wire dec_l_15$EN;

  // register dec_l_16
  reg [23 : 0] dec_l_16;
  wire [23 : 0] dec_l_16$D_IN;
  wire dec_l_16$EN;

  // register dec_l_17
  reg [23 : 0] dec_l_17;
  wire [23 : 0] dec_l_17$D_IN;
  wire dec_l_17$EN;

  // register dec_l_18
  reg [23 : 0] dec_l_18;
  wire [23 : 0] dec_l_18$D_IN;
  wire dec_l_18$EN;

  // register dec_l_19
  reg [23 : 0] dec_l_19;
  wire [23 : 0] dec_l_19$D_IN;
  wire dec_l_19$EN;

  // register dec_l_2
  reg [23 : 0] dec_l_2;
  wire [23 : 0] dec_l_2$D_IN;
  wire dec_l_2$EN;

  // register dec_l_20
  reg [23 : 0] dec_l_20;
  wire [23 : 0] dec_l_20$D_IN;
  wire dec_l_20$EN;

  // register dec_l_21
  reg [23 : 0] dec_l_21;
  wire [23 : 0] dec_l_21$D_IN;
  wire dec_l_21$EN;

  // register dec_l_22
  reg [23 : 0] dec_l_22;
  wire [23 : 0] dec_l_22$D_IN;
  wire dec_l_22$EN;

  // register dec_l_23
  reg [23 : 0] dec_l_23;
  wire [23 : 0] dec_l_23$D_IN;
  wire dec_l_23$EN;

  // register dec_l_24
  reg [23 : 0] dec_l_24;
  wire [23 : 0] dec_l_24$D_IN;
  wire dec_l_24$EN;

  // register dec_l_25
  reg [23 : 0] dec_l_25;
  wire [23 : 0] dec_l_25$D_IN;
  wire dec_l_25$EN;

  // register dec_l_3
  reg [23 : 0] dec_l_3;
  wire [23 : 0] dec_l_3$D_IN;
  wire dec_l_3$EN;

  // register dec_l_4
  reg [23 : 0] dec_l_4;
  wire [23 : 0] dec_l_4$D_IN;
  wire dec_l_4$EN;

  // register dec_l_5
  reg [23 : 0] dec_l_5;
  wire [23 : 0] dec_l_5$D_IN;
  wire dec_l_5$EN;

  // register dec_l_6
  reg [23 : 0] dec_l_6;
  wire [23 : 0] dec_l_6$D_IN;
  wire dec_l_6$EN;

  // register dec_l_7
  reg [23 : 0] dec_l_7;
  wire [23 : 0] dec_l_7$D_IN;
  wire dec_l_7$EN;

  // register dec_l_8
  reg [23 : 0] dec_l_8;
  wire [23 : 0] dec_l_8$D_IN;
  wire dec_l_8$EN;

  // register dec_l_9
  reg [23 : 0] dec_l_9;
  wire [23 : 0] dec_l_9$D_IN;
  wire dec_l_9$EN;

  // register dec_round
  reg [23 : 0] dec_round;
  wire [23 : 0] dec_round$D_IN;
  wire dec_round$EN;

  // register dec_roundkey
  reg [23 : 0] dec_roundkey;
  wire [23 : 0] dec_roundkey$D_IN;
  wire dec_roundkey$EN;

  // register dec_xyReg
  reg [47 : 0] dec_xyReg;
  wire [47 : 0] dec_xyReg$D_IN;
  wire dec_xyReg$EN;

  // ports of submodule dec_ciphertextFIFO
  wire [47 : 0] dec_ciphertextFIFO$D_IN, dec_ciphertextFIFO$D_OUT;
  wire dec_ciphertextFIFO$CLR,
       dec_ciphertextFIFO$DEQ,
       dec_ciphertextFIFO$EMPTY_N,
       dec_ciphertextFIFO$ENQ,
       dec_ciphertextFIFO$FULL_N;

  // ports of submodule dec_plaintextFIFO
  wire [47 : 0] dec_plaintextFIFO$D_IN, dec_plaintextFIFO$D_OUT;
  wire dec_plaintextFIFO$CLR,
       dec_plaintextFIFO$DEQ,
       dec_plaintextFIFO$EMPTY_N,
       dec_plaintextFIFO$ENQ,
       dec_plaintextFIFO$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_dec_pipeline,
       CAN_FIRE_getResult,
       CAN_FIRE_inputMessage,
       CAN_FIRE_setKey,
       WILL_FIRE_RL_dec_pipeline,
       WILL_FIRE_getResult,
       WILL_FIRE_inputMessage,
       WILL_FIRE_setKey;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_dec_l_0$write_1__VAL_1, MUX_dec_roundkey$write_1__VAL_2;
  wire MUX_dec_l_0$write_1__SEL_1,
       MUX_dec_l_1$write_1__SEL_1,
       MUX_dec_l_2$write_1__SEL_1;

  // remaining internal signals
  reg [23 : 0] SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50;
  wire [23 : 0] IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d315,
		IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d89,
		IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d121,
		IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d153,
		IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d347,
		IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d379,
		IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d183,
		IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d409,
		IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d215,
		IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d247,
		IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d441,
		IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d473,
		IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d282,
		IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287,
		IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381,
		SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155,
		SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61,
		b__h10555,
		b__h25240,
		b__h32205,
		x__h2443;
  wire [4 : 0] _24_MINUS_dec_beta_3___d54;

  // action method setKey
  assign RDY_setKey = !dec_ciphertextFIFO$EMPTY_N ;
  assign CAN_FIRE_setKey = !dec_ciphertextFIFO$EMPTY_N ;
  assign WILL_FIRE_setKey = EN_setKey ;

  // action method inputMessage
  assign RDY_inputMessage = dec_ciphertextFIFO$FULL_N ;
  assign CAN_FIRE_inputMessage = dec_ciphertextFIFO$FULL_N ;
  assign WILL_FIRE_inputMessage = EN_inputMessage ;

  // actionvalue method getResult
  assign getResult = dec_plaintextFIFO$D_OUT ;
  assign RDY_getResult = dec_plaintextFIFO$EMPTY_N ;
  assign CAN_FIRE_getResult = dec_plaintextFIFO$EMPTY_N ;
  assign WILL_FIRE_getResult = EN_getResult ;

  // submodule dec_ciphertextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) dec_ciphertextFIFO(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(dec_ciphertextFIFO$D_IN),
							      .ENQ(dec_ciphertextFIFO$ENQ),
							      .DEQ(dec_ciphertextFIFO$DEQ),
							      .CLR(dec_ciphertextFIFO$CLR),
							      .D_OUT(dec_ciphertextFIFO$D_OUT),
							      .FULL_N(dec_ciphertextFIFO$FULL_N),
							      .EMPTY_N(dec_ciphertextFIFO$EMPTY_N));

  // submodule dec_plaintextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) dec_plaintextFIFO(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dec_plaintextFIFO$D_IN),
							     .ENQ(dec_plaintextFIFO$ENQ),
							     .DEQ(dec_plaintextFIFO$DEQ),
							     .CLR(dec_plaintextFIFO$CLR),
							     .D_OUT(dec_plaintextFIFO$D_OUT),
							     .FULL_N(dec_plaintextFIFO$FULL_N),
							     .EMPTY_N(dec_plaintextFIFO$EMPTY_N));

  // rule RL_dec_pipeline
  assign CAN_FIRE_RL_dec_pipeline =
	     (dec_round != 24'd22 ||
	      dec_plaintextFIFO$FULL_N && dec_ciphertextFIFO$EMPTY_N) &&
	     dec_ciphertextFIFO$EMPTY_N ;
  assign WILL_FIRE_RL_dec_pipeline = CAN_FIRE_RL_dec_pipeline ;

  // inputs to muxes for submodule ports
  assign MUX_dec_l_0$write_1__SEL_1 =
	     WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd0 ;
  assign MUX_dec_l_1$write_1__SEL_1 =
	     WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd1 ;
  assign MUX_dec_l_2$write_1__SEL_1 =
	     WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd2 ;
  assign MUX_dec_l_0$write_1__VAL_1 =
	     dec_alpha[4] ?
	       IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d215 :
	       IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d247 ;
  assign MUX_dec_roundkey$write_1__VAL_2 =
	     (dec_round == 24'd22) ? dec_k0 : b__h10555 ;

  // register dec_alpha
  assign dec_alpha$D_IN = 5'h0 ;
  assign dec_alpha$EN = 1'b0 ;

  // register dec_beta
  assign dec_beta$D_IN = 5'h0 ;
  assign dec_beta$EN = 1'b0 ;

  // register dec_k0
  assign dec_k0$D_IN = setKey_key[23:0] ;
  assign dec_k0$EN = EN_setKey ;

  // register dec_l_0
  assign dec_l_0$D_IN =
	     MUX_dec_l_0$write_1__SEL_1 ?
	       MUX_dec_l_0$write_1__VAL_1 :
	       setKey_key[47:24] ;
  assign dec_l_0$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd0 || EN_setKey ;

  // register dec_l_1
  assign dec_l_1$D_IN =
	     MUX_dec_l_1$write_1__SEL_1 ?
	       MUX_dec_l_0$write_1__VAL_1 :
	       setKey_key[71:48] ;
  assign dec_l_1$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd1 || EN_setKey ;

  // register dec_l_10
  assign dec_l_10$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_10$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd10 ;

  // register dec_l_11
  assign dec_l_11$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_11$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd11 ;

  // register dec_l_12
  assign dec_l_12$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_12$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd12 ;

  // register dec_l_13
  assign dec_l_13$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_13$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd13 ;

  // register dec_l_14
  assign dec_l_14$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_14$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd14 ;

  // register dec_l_15
  assign dec_l_15$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_15$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd15 ;

  // register dec_l_16
  assign dec_l_16$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_16$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd16 ;

  // register dec_l_17
  assign dec_l_17$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_17$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd17 ;

  // register dec_l_18
  assign dec_l_18$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_18$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd18 ;

  // register dec_l_19
  assign dec_l_19$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_19$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd19 ;

  // register dec_l_2
  assign dec_l_2$D_IN =
	     MUX_dec_l_2$write_1__SEL_1 ?
	       MUX_dec_l_0$write_1__VAL_1 :
	       setKey_key[95:72] ;
  assign dec_l_2$EN =
	     WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd2 || EN_setKey ;

  // register dec_l_20
  assign dec_l_20$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_20$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd20 ;

  // register dec_l_21
  assign dec_l_21$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_21$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd21 ;

  // register dec_l_22
  assign dec_l_22$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_22$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd22 ;

  // register dec_l_23
  assign dec_l_23$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_23$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd23 ;

  // register dec_l_24
  assign dec_l_24$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_24$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd24 ;

  // register dec_l_25
  assign dec_l_25$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_25$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd25 ;

  // register dec_l_3
  assign dec_l_3$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_3$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd3 ;

  // register dec_l_4
  assign dec_l_4$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_4$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd4 ;

  // register dec_l_5
  assign dec_l_5$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_5$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd5 ;

  // register dec_l_6
  assign dec_l_6$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_6$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd6 ;

  // register dec_l_7
  assign dec_l_7$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_7$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd7 ;

  // register dec_l_8
  assign dec_l_8$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_8$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd8 ;

  // register dec_l_9
  assign dec_l_9$D_IN = MUX_dec_l_0$write_1__VAL_1 ;
  assign dec_l_9$EN = WILL_FIRE_RL_dec_pipeline && x__h2443 == 24'd9 ;

  // register dec_round
  assign dec_round$D_IN = (dec_round == 24'd22) ? 24'd0 : dec_round + 24'd1 ;
  assign dec_round$EN = CAN_FIRE_RL_dec_pipeline ;

  // register dec_roundkey
  assign dec_roundkey$D_IN =
	     EN_setKey ? setKey_key[23:0] : MUX_dec_roundkey$write_1__VAL_2 ;
  assign dec_roundkey$EN = EN_setKey || WILL_FIRE_RL_dec_pipeline ;

  // register dec_xyReg
  assign dec_xyReg$D_IN = { b__h25240, b__h32205 } ;
  assign dec_xyReg$EN = WILL_FIRE_RL_dec_pipeline && dec_round != 24'd22 ;

  // submodule dec_ciphertextFIFO
  assign dec_ciphertextFIFO$D_IN = inputMessage_text ;
  assign dec_ciphertextFIFO$ENQ = EN_inputMessage ;
  assign dec_ciphertextFIFO$DEQ =
	     WILL_FIRE_RL_dec_pipeline && dec_round == 24'd22 ;
  assign dec_ciphertextFIFO$CLR = 1'b0 ;

  // submodule dec_plaintextFIFO
  assign dec_plaintextFIFO$D_IN = { b__h25240, b__h32205 } ;
  assign dec_plaintextFIFO$ENQ =
	     WILL_FIRE_RL_dec_pipeline && dec_round == 24'd22 ;
  assign dec_plaintextFIFO$DEQ = EN_getResult ;
  assign dec_plaintextFIFO$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d315 =
	     _24_MINUS_dec_beta_3___d54[2] ?
	       (_24_MINUS_dec_beta_3___d54[1] ?
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[16:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:17] } :
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[17:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:18] }) :
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[18:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:19] } :
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[19:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:20] })) :
	       (_24_MINUS_dec_beta_3___d54[1] ?
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[20:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:21] } :
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[21:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:22] }) :
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[22:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23] } :
		     IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287)) ;
  assign IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d89 =
	     _24_MINUS_dec_beta_3___d54[2] ?
	       (_24_MINUS_dec_beta_3___d54[1] ?
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[16:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:17] } :
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[17:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:18] }) :
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[18:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:19] } :
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[19:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:20] })) :
	       (_24_MINUS_dec_beta_3___d54[1] ?
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[20:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:21] } :
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[21:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:22] }) :
		  (_24_MINUS_dec_beta_3___d54[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[22:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23] } :
		     SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61)) ;
  assign IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d121 =
	     _24_MINUS_dec_beta_3___d54[3] ?
	       IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d89 :
	       (_24_MINUS_dec_beta_3___d54[2] ?
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:1] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[1:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:2] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[2:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:3] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[3:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:4] })) :
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[4:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:5] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[5:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:6] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[6:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:7] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[7:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:8] }))) ;
  assign IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d153 =
	     _24_MINUS_dec_beta_3___d54[3] ?
	       (_24_MINUS_dec_beta_3___d54[2] ?
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[8:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:9] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[9:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:10] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[10:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:11] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[11:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:12] })) :
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[12:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:13] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[13:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:14] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[14:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:15] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[15:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61[23:16] }))) :
	       IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d89 ;
  assign IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d347 =
	     _24_MINUS_dec_beta_3___d54[3] ?
	       IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d315 :
	       (_24_MINUS_dec_beta_3___d54[2] ?
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:1] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[1:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:2] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[2:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:3] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[3:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:4] })) :
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[4:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:5] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[5:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:6] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[6:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:7] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[7:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:8] }))) ;
  assign IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d379 =
	     _24_MINUS_dec_beta_3___d54[3] ?
	       (_24_MINUS_dec_beta_3___d54[2] ?
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[8:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:9] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[9:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:10] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[10:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:11] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[11:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:12] })) :
		  (_24_MINUS_dec_beta_3___d54[1] ?
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[12:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:13] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[13:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:14] }) :
		     (_24_MINUS_dec_beta_3___d54[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[14:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:15] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[15:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287[23:16] }))) :
	       IF_24_MINUS_dec_beta_3_4_BIT_2_7_THEN_IF_24_MI_ETC___d315 ;
  assign IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d183 =
	     dec_alpha[2] ?
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[16:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:17] } :
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[17:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:18] }) :
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[18:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:19] } :
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[19:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:20] })) :
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[20:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:21] } :
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[21:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:22] }) :
		  (dec_alpha[0] ?
		     { SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[22:0],
		       SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23] } :
		     SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155)) ;
  assign IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d409 =
	     dec_alpha[2] ?
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[16:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:17] } :
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[17:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:18] }) :
		  (dec_alpha[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[18:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:19] } :
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[19:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:20] })) :
	       (dec_alpha[1] ?
		  (dec_alpha[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[20:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:21] } :
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[21:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:22] }) :
		  (dec_alpha[0] ?
		     { IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[22:0],
		       IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23] } :
		     IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381)) ;
  assign IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d215 =
	     dec_alpha[3] ?
	       IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d183 :
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:1] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[1:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:2] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[2:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:3] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[3:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:4] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[4:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:5] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[5:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:6] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[6:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:7] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[7:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:8] }))) ;
  assign IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d247 =
	     dec_alpha[3] ?
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[8:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:9] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[9:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:10] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[10:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:11] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[11:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:12] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[12:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:13] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[13:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:14] }) :
		     (dec_alpha[0] ?
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[14:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:15] } :
			{ SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[15:0],
			  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155[23:16] }))) :
	       IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d183 ;
  assign IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d441 =
	     dec_alpha[3] ?
	       IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d409 :
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:1] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[1:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:2] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[2:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:3] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[3:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:4] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[4:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:5] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[5:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:6] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[6:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:7] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[7:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:8] }))) ;
  assign IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d473 =
	     dec_alpha[3] ?
	       (dec_alpha[2] ?
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[8:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:9] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[9:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:10] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[10:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:11] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[11:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:12] })) :
		  (dec_alpha[1] ?
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[12:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:13] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[13:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:14] }) :
		     (dec_alpha[0] ?
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[14:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:15] } :
			{ IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[15:0],
			  IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381[23:16] }))) :
	       IF_dec_alpha_7_BIT_2_0_THEN_IF_dec_alpha_7_BIT_ETC___d409 ;
  assign IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d282 =
	     (dec_round == 24'd0) ?
	       dec_ciphertextFIFO$D_OUT[47:24] :
	       dec_xyReg[47:24] ;
  assign IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d287 =
	     IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d282 ^
	     ((dec_round == 24'd0) ?
		dec_ciphertextFIFO$D_OUT[23:0] :
		dec_xyReg[23:0]) ;
  assign IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d381 =
	     (IF_dec_round_EQ_0_THEN_dec_ciphertextFIFO_firs_ETC___d282 ^
	      dec_roundkey) -
	     b__h32205 ;
  assign SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d155 =
	     (SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 ^
	      24'd21 - dec_round) -
	     b__h10555 ;
  assign SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d61 =
	     SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 ^
	     dec_roundkey ;
  assign _24_MINUS_dec_beta_3___d54 = 5'd24 - dec_beta ;
  assign b__h10555 =
	     _24_MINUS_dec_beta_3___d54[4] ?
	       IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d121 :
	       IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d153 ;
  assign b__h25240 =
	     dec_alpha[4] ?
	       IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d441 :
	       IF_dec_alpha_7_BIT_3_9_THEN_IF_dec_alpha_7_BIT_ETC___d473 ;
  assign b__h32205 =
	     _24_MINUS_dec_beta_3___d54[4] ?
	       IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d347 :
	       IF_24_MINUS_dec_beta_3_4_BIT_3_6_THEN_IF_24_MI_ETC___d379 ;
  assign x__h2443 = dec_round + 24'd4 - 24'd1 ;
  always@(dec_round or
	  dec_l_0 or
	  dec_l_1 or
	  dec_l_2 or
	  dec_l_3 or
	  dec_l_4 or
	  dec_l_5 or
	  dec_l_6 or
	  dec_l_7 or
	  dec_l_8 or
	  dec_l_9 or
	  dec_l_10 or
	  dec_l_11 or
	  dec_l_12 or
	  dec_l_13 or
	  dec_l_14 or
	  dec_l_15 or
	  dec_l_16 or
	  dec_l_17 or
	  dec_l_18 or
	  dec_l_19 or
	  dec_l_20 or
	  dec_l_21 or dec_l_22 or dec_l_23 or dec_l_24 or dec_l_25)
  begin
    case (dec_round)
      24'd0:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_0;
      24'd1:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_1;
      24'd2:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_2;
      24'd3:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_3;
      24'd4:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_4;
      24'd5:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_5;
      24'd6:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_6;
      24'd7:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_7;
      24'd8:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_8;
      24'd9:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_9;
      24'd10:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_10;
      24'd11:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_11;
      24'd12:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_12;
      24'd13:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_13;
      24'd14:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_14;
      24'd15:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_15;
      24'd16:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_16;
      24'd17:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_17;
      24'd18:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_18;
      24'd19:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_19;
      24'd20:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_20;
      24'd21:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_21;
      24'd22:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_22;
      24'd23:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_23;
      24'd24:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_24;
      24'd25:
	  SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 = dec_l_25;
      default: SEL_ARR_dec_l_0_3_dec_l_1_4_dec_l_2_5_dec_l_3__ETC___d50 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dec_alpha <= `BSV_ASSIGNMENT_DELAY 5'd8;
	dec_beta <= `BSV_ASSIGNMENT_DELAY 5'd3;
	dec_k0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_1 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_10 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_11 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_12 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_13 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_14 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_15 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_16 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_17 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_18 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_19 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_2 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_20 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_21 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_22 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_23 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_24 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_25 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_3 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_4 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_5 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_6 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_7 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_8 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_l_9 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_round <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_roundkey <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dec_xyReg <= `BSV_ASSIGNMENT_DELAY 48'd0;
      end
    else
      begin
        if (dec_alpha$EN) dec_alpha <= `BSV_ASSIGNMENT_DELAY dec_alpha$D_IN;
	if (dec_beta$EN) dec_beta <= `BSV_ASSIGNMENT_DELAY dec_beta$D_IN;
	if (dec_k0$EN) dec_k0 <= `BSV_ASSIGNMENT_DELAY dec_k0$D_IN;
	if (dec_l_0$EN) dec_l_0 <= `BSV_ASSIGNMENT_DELAY dec_l_0$D_IN;
	if (dec_l_1$EN) dec_l_1 <= `BSV_ASSIGNMENT_DELAY dec_l_1$D_IN;
	if (dec_l_10$EN) dec_l_10 <= `BSV_ASSIGNMENT_DELAY dec_l_10$D_IN;
	if (dec_l_11$EN) dec_l_11 <= `BSV_ASSIGNMENT_DELAY dec_l_11$D_IN;
	if (dec_l_12$EN) dec_l_12 <= `BSV_ASSIGNMENT_DELAY dec_l_12$D_IN;
	if (dec_l_13$EN) dec_l_13 <= `BSV_ASSIGNMENT_DELAY dec_l_13$D_IN;
	if (dec_l_14$EN) dec_l_14 <= `BSV_ASSIGNMENT_DELAY dec_l_14$D_IN;
	if (dec_l_15$EN) dec_l_15 <= `BSV_ASSIGNMENT_DELAY dec_l_15$D_IN;
	if (dec_l_16$EN) dec_l_16 <= `BSV_ASSIGNMENT_DELAY dec_l_16$D_IN;
	if (dec_l_17$EN) dec_l_17 <= `BSV_ASSIGNMENT_DELAY dec_l_17$D_IN;
	if (dec_l_18$EN) dec_l_18 <= `BSV_ASSIGNMENT_DELAY dec_l_18$D_IN;
	if (dec_l_19$EN) dec_l_19 <= `BSV_ASSIGNMENT_DELAY dec_l_19$D_IN;
	if (dec_l_2$EN) dec_l_2 <= `BSV_ASSIGNMENT_DELAY dec_l_2$D_IN;
	if (dec_l_20$EN) dec_l_20 <= `BSV_ASSIGNMENT_DELAY dec_l_20$D_IN;
	if (dec_l_21$EN) dec_l_21 <= `BSV_ASSIGNMENT_DELAY dec_l_21$D_IN;
	if (dec_l_22$EN) dec_l_22 <= `BSV_ASSIGNMENT_DELAY dec_l_22$D_IN;
	if (dec_l_23$EN) dec_l_23 <= `BSV_ASSIGNMENT_DELAY dec_l_23$D_IN;
	if (dec_l_24$EN) dec_l_24 <= `BSV_ASSIGNMENT_DELAY dec_l_24$D_IN;
	if (dec_l_25$EN) dec_l_25 <= `BSV_ASSIGNMENT_DELAY dec_l_25$D_IN;
	if (dec_l_3$EN) dec_l_3 <= `BSV_ASSIGNMENT_DELAY dec_l_3$D_IN;
	if (dec_l_4$EN) dec_l_4 <= `BSV_ASSIGNMENT_DELAY dec_l_4$D_IN;
	if (dec_l_5$EN) dec_l_5 <= `BSV_ASSIGNMENT_DELAY dec_l_5$D_IN;
	if (dec_l_6$EN) dec_l_6 <= `BSV_ASSIGNMENT_DELAY dec_l_6$D_IN;
	if (dec_l_7$EN) dec_l_7 <= `BSV_ASSIGNMENT_DELAY dec_l_7$D_IN;
	if (dec_l_8$EN) dec_l_8 <= `BSV_ASSIGNMENT_DELAY dec_l_8$D_IN;
	if (dec_l_9$EN) dec_l_9 <= `BSV_ASSIGNMENT_DELAY dec_l_9$D_IN;
	if (dec_round$EN) dec_round <= `BSV_ASSIGNMENT_DELAY dec_round$D_IN;
	if (dec_roundkey$EN)
	  dec_roundkey <= `BSV_ASSIGNMENT_DELAY dec_roundkey$D_IN;
	if (dec_xyReg$EN) dec_xyReg <= `BSV_ASSIGNMENT_DELAY dec_xyReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dec_alpha = 5'h0A;
    dec_beta = 5'h0A;
    dec_k0 = 24'hAAAAAA;
    dec_l_0 = 24'hAAAAAA;
    dec_l_1 = 24'hAAAAAA;
    dec_l_10 = 24'hAAAAAA;
    dec_l_11 = 24'hAAAAAA;
    dec_l_12 = 24'hAAAAAA;
    dec_l_13 = 24'hAAAAAA;
    dec_l_14 = 24'hAAAAAA;
    dec_l_15 = 24'hAAAAAA;
    dec_l_16 = 24'hAAAAAA;
    dec_l_17 = 24'hAAAAAA;
    dec_l_18 = 24'hAAAAAA;
    dec_l_19 = 24'hAAAAAA;
    dec_l_2 = 24'hAAAAAA;
    dec_l_20 = 24'hAAAAAA;
    dec_l_21 = 24'hAAAAAA;
    dec_l_22 = 24'hAAAAAA;
    dec_l_23 = 24'hAAAAAA;
    dec_l_24 = 24'hAAAAAA;
    dec_l_25 = 24'hAAAAAA;
    dec_l_3 = 24'hAAAAAA;
    dec_l_4 = 24'hAAAAAA;
    dec_l_5 = 24'hAAAAAA;
    dec_l_6 = 24'hAAAAAA;
    dec_l_7 = 24'hAAAAAA;
    dec_l_8 = 24'hAAAAAA;
    dec_l_9 = 24'hAAAAAA;
    dec_round = 24'hAAAAAA;
    dec_roundkey = 24'hAAAAAA;
    dec_xyReg = 48'hAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSynthesizedDecrypt

