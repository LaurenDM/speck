//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Thu May  5 09:37:06 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_setKeyIV                   O     1
// RDY_inputMessage               O     1 reg
// getResult                      O    48 reg
// RDY_getResult                  O     1 reg
// RDY_reset                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setKeyIV_key                   I    96
// setKeyIV_iv                    I    48
// inputMessage_text              I    48 reg
// EN_setKeyIV                    I     1
// EN_inputMessage                I     1
// EN_reset                       I     1
// EN_getResult                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSynthesizedOFB(CLK,
			RST_N,

			setKeyIV_key,
			setKeyIV_iv,
			EN_setKeyIV,
			RDY_setKeyIV,

			inputMessage_text,
			EN_inputMessage,
			RDY_inputMessage,

			EN_getResult,
			getResult,
			RDY_getResult,

			EN_reset,
			RDY_reset);
  input  CLK;
  input  RST_N;

  // action method setKeyIV
  input  [95 : 0] setKeyIV_key;
  input  [47 : 0] setKeyIV_iv;
  input  EN_setKeyIV;
  output RDY_setKeyIV;

  // action method inputMessage
  input  [47 : 0] inputMessage_text;
  input  EN_inputMessage;
  output RDY_inputMessage;

  // actionvalue method getResult
  input  EN_getResult;
  output [47 : 0] getResult;
  output RDY_getResult;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // signals for module outputs
  wire [47 : 0] getResult;
  wire RDY_getResult, RDY_inputMessage, RDY_reset, RDY_setKeyIV;

  // register ofb_enc_alpha
  reg [4 : 0] ofb_enc_alpha;
  wire [4 : 0] ofb_enc_alpha$D_IN;
  wire ofb_enc_alpha$EN;

  // register ofb_enc_beta
  reg [4 : 0] ofb_enc_beta;
  wire [4 : 0] ofb_enc_beta$D_IN;
  wire ofb_enc_beta$EN;

  // register ofb_enc_k0
  reg [23 : 0] ofb_enc_k0;
  wire [23 : 0] ofb_enc_k0$D_IN;
  wire ofb_enc_k0$EN;

  // register ofb_enc_l_0
  reg [23 : 0] ofb_enc_l_0;
  wire [23 : 0] ofb_enc_l_0$D_IN;
  wire ofb_enc_l_0$EN;

  // register ofb_enc_l_1
  reg [23 : 0] ofb_enc_l_1;
  wire [23 : 0] ofb_enc_l_1$D_IN;
  wire ofb_enc_l_1$EN;

  // register ofb_enc_l_10
  reg [23 : 0] ofb_enc_l_10;
  wire [23 : 0] ofb_enc_l_10$D_IN;
  wire ofb_enc_l_10$EN;

  // register ofb_enc_l_11
  reg [23 : 0] ofb_enc_l_11;
  wire [23 : 0] ofb_enc_l_11$D_IN;
  wire ofb_enc_l_11$EN;

  // register ofb_enc_l_12
  reg [23 : 0] ofb_enc_l_12;
  wire [23 : 0] ofb_enc_l_12$D_IN;
  wire ofb_enc_l_12$EN;

  // register ofb_enc_l_13
  reg [23 : 0] ofb_enc_l_13;
  wire [23 : 0] ofb_enc_l_13$D_IN;
  wire ofb_enc_l_13$EN;

  // register ofb_enc_l_14
  reg [23 : 0] ofb_enc_l_14;
  wire [23 : 0] ofb_enc_l_14$D_IN;
  wire ofb_enc_l_14$EN;

  // register ofb_enc_l_15
  reg [23 : 0] ofb_enc_l_15;
  wire [23 : 0] ofb_enc_l_15$D_IN;
  wire ofb_enc_l_15$EN;

  // register ofb_enc_l_16
  reg [23 : 0] ofb_enc_l_16;
  wire [23 : 0] ofb_enc_l_16$D_IN;
  wire ofb_enc_l_16$EN;

  // register ofb_enc_l_17
  reg [23 : 0] ofb_enc_l_17;
  wire [23 : 0] ofb_enc_l_17$D_IN;
  wire ofb_enc_l_17$EN;

  // register ofb_enc_l_18
  reg [23 : 0] ofb_enc_l_18;
  wire [23 : 0] ofb_enc_l_18$D_IN;
  wire ofb_enc_l_18$EN;

  // register ofb_enc_l_19
  reg [23 : 0] ofb_enc_l_19;
  wire [23 : 0] ofb_enc_l_19$D_IN;
  wire ofb_enc_l_19$EN;

  // register ofb_enc_l_2
  reg [23 : 0] ofb_enc_l_2;
  wire [23 : 0] ofb_enc_l_2$D_IN;
  wire ofb_enc_l_2$EN;

  // register ofb_enc_l_20
  reg [23 : 0] ofb_enc_l_20;
  wire [23 : 0] ofb_enc_l_20$D_IN;
  wire ofb_enc_l_20$EN;

  // register ofb_enc_l_21
  reg [23 : 0] ofb_enc_l_21;
  wire [23 : 0] ofb_enc_l_21$D_IN;
  wire ofb_enc_l_21$EN;

  // register ofb_enc_l_22
  reg [23 : 0] ofb_enc_l_22;
  wire [23 : 0] ofb_enc_l_22$D_IN;
  wire ofb_enc_l_22$EN;

  // register ofb_enc_l_23
  reg [23 : 0] ofb_enc_l_23;
  wire [23 : 0] ofb_enc_l_23$D_IN;
  wire ofb_enc_l_23$EN;

  // register ofb_enc_l_24
  reg [23 : 0] ofb_enc_l_24;
  wire [23 : 0] ofb_enc_l_24$D_IN;
  wire ofb_enc_l_24$EN;

  // register ofb_enc_l_25
  reg [23 : 0] ofb_enc_l_25;
  wire [23 : 0] ofb_enc_l_25$D_IN;
  wire ofb_enc_l_25$EN;

  // register ofb_enc_l_3
  reg [23 : 0] ofb_enc_l_3;
  wire [23 : 0] ofb_enc_l_3$D_IN;
  wire ofb_enc_l_3$EN;

  // register ofb_enc_l_4
  reg [23 : 0] ofb_enc_l_4;
  wire [23 : 0] ofb_enc_l_4$D_IN;
  wire ofb_enc_l_4$EN;

  // register ofb_enc_l_5
  reg [23 : 0] ofb_enc_l_5;
  wire [23 : 0] ofb_enc_l_5$D_IN;
  wire ofb_enc_l_5$EN;

  // register ofb_enc_l_6
  reg [23 : 0] ofb_enc_l_6;
  wire [23 : 0] ofb_enc_l_6$D_IN;
  wire ofb_enc_l_6$EN;

  // register ofb_enc_l_7
  reg [23 : 0] ofb_enc_l_7;
  wire [23 : 0] ofb_enc_l_7$D_IN;
  wire ofb_enc_l_7$EN;

  // register ofb_enc_l_8
  reg [23 : 0] ofb_enc_l_8;
  wire [23 : 0] ofb_enc_l_8$D_IN;
  wire ofb_enc_l_8$EN;

  // register ofb_enc_l_9
  reg [23 : 0] ofb_enc_l_9;
  wire [23 : 0] ofb_enc_l_9$D_IN;
  wire ofb_enc_l_9$EN;

  // register ofb_enc_round
  reg [23 : 0] ofb_enc_round;
  wire [23 : 0] ofb_enc_round$D_IN;
  wire ofb_enc_round$EN;

  // register ofb_enc_roundkey
  reg [23 : 0] ofb_enc_roundkey;
  wire [23 : 0] ofb_enc_roundkey$D_IN;
  wire ofb_enc_roundkey$EN;

  // register ofb_enc_xyReg
  reg [47 : 0] ofb_enc_xyReg;
  wire [47 : 0] ofb_enc_xyReg$D_IN;
  wire ofb_enc_xyReg$EN;

  // register ofb_started
  reg ofb_started;
  wire ofb_started$D_IN, ofb_started$EN;

  // ports of submodule ofb_enc_ciphertextFIFO
  wire [47 : 0] ofb_enc_ciphertextFIFO$D_IN, ofb_enc_ciphertextFIFO$D_OUT;
  wire ofb_enc_ciphertextFIFO$CLR,
       ofb_enc_ciphertextFIFO$DEQ,
       ofb_enc_ciphertextFIFO$EMPTY_N,
       ofb_enc_ciphertextFIFO$ENQ,
       ofb_enc_ciphertextFIFO$FULL_N;

  // ports of submodule ofb_enc_plaintextFIFO
  wire [47 : 0] ofb_enc_plaintextFIFO$D_IN, ofb_enc_plaintextFIFO$D_OUT;
  wire ofb_enc_plaintextFIFO$CLR,
       ofb_enc_plaintextFIFO$DEQ,
       ofb_enc_plaintextFIFO$EMPTY_N,
       ofb_enc_plaintextFIFO$ENQ,
       ofb_enc_plaintextFIFO$FULL_N;

  // ports of submodule ofb_inputFIFO
  wire [47 : 0] ofb_inputFIFO$D_IN, ofb_inputFIFO$D_OUT;
  wire ofb_inputFIFO$CLR,
       ofb_inputFIFO$DEQ,
       ofb_inputFIFO$EMPTY_N,
       ofb_inputFIFO$ENQ,
       ofb_inputFIFO$FULL_N;

  // ports of submodule ofb_outputFIFO
  wire [47 : 0] ofb_outputFIFO$D_IN, ofb_outputFIFO$D_OUT;
  wire ofb_outputFIFO$CLR,
       ofb_outputFIFO$DEQ,
       ofb_outputFIFO$EMPTY_N,
       ofb_outputFIFO$ENQ,
       ofb_outputFIFO$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_ofb_do_xor,
       CAN_FIRE_RL_ofb_empty,
       CAN_FIRE_RL_ofb_enc_pipeline,
       CAN_FIRE_getResult,
       CAN_FIRE_inputMessage,
       CAN_FIRE_reset,
       CAN_FIRE_setKeyIV,
       WILL_FIRE_RL_ofb_do_xor,
       WILL_FIRE_RL_ofb_empty,
       WILL_FIRE_RL_ofb_enc_pipeline,
       WILL_FIRE_getResult,
       WILL_FIRE_inputMessage,
       WILL_FIRE_reset,
       WILL_FIRE_setKeyIV;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_ofb_enc_l_0$write_1__VAL_1,
		MUX_ofb_enc_roundkey$write_1__VAL_2;
  wire MUX_ofb_enc_l_0$write_1__SEL_1,
       MUX_ofb_enc_l_1$write_1__SEL_1,
       MUX_ofb_enc_l_2$write_1__SEL_1;

  // remaining internal signals
  reg [23 : 0] SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51;
  wire [23 : 0] IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d309,
		IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d79,
		IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d111,
		IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d143,
		IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d341,
		IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d373,
		IF_24_MINUS_ofb_enc_alpha_7_8_BIT_4_9_THEN_IF__ETC___d379,
		IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d207,
		IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d407,
		IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d239,
		IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d271,
		IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d439,
		IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d471,
		IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281,
		IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377,
		b__h14399,
		b__h25217,
		b__h3520,
		b__h35998,
		x__h2449;
  wire [4 : 0] _24_MINUS_ofb_enc_alpha_7___d18;

  // action method setKeyIV
  assign RDY_setKeyIV =
	     !ofb_enc_plaintextFIFO$EMPTY_N && !ofb_started &&
	     ofb_enc_plaintextFIFO$FULL_N ;
  assign CAN_FIRE_setKeyIV =
	     !ofb_enc_plaintextFIFO$EMPTY_N && !ofb_started &&
	     ofb_enc_plaintextFIFO$FULL_N ;
  assign WILL_FIRE_setKeyIV = EN_setKeyIV ;

  // action method inputMessage
  assign RDY_inputMessage = ofb_inputFIFO$FULL_N ;
  assign CAN_FIRE_inputMessage = ofb_inputFIFO$FULL_N ;
  assign WILL_FIRE_inputMessage = EN_inputMessage ;

  // actionvalue method getResult
  assign getResult = ofb_outputFIFO$D_OUT ;
  assign RDY_getResult = ofb_outputFIFO$EMPTY_N ;
  assign CAN_FIRE_getResult = ofb_outputFIFO$EMPTY_N ;
  assign WILL_FIRE_getResult = EN_getResult ;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // submodule ofb_enc_ciphertextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) ofb_enc_ciphertextFIFO(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(ofb_enc_ciphertextFIFO$D_IN),
								  .ENQ(ofb_enc_ciphertextFIFO$ENQ),
								  .DEQ(ofb_enc_ciphertextFIFO$DEQ),
								  .CLR(ofb_enc_ciphertextFIFO$CLR),
								  .D_OUT(ofb_enc_ciphertextFIFO$D_OUT),
								  .FULL_N(ofb_enc_ciphertextFIFO$FULL_N),
								  .EMPTY_N(ofb_enc_ciphertextFIFO$EMPTY_N));

  // submodule ofb_enc_plaintextFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) ofb_enc_plaintextFIFO(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ofb_enc_plaintextFIFO$D_IN),
								 .ENQ(ofb_enc_plaintextFIFO$ENQ),
								 .DEQ(ofb_enc_plaintextFIFO$DEQ),
								 .CLR(ofb_enc_plaintextFIFO$CLR),
								 .D_OUT(ofb_enc_plaintextFIFO$D_OUT),
								 .FULL_N(ofb_enc_plaintextFIFO$FULL_N),
								 .EMPTY_N(ofb_enc_plaintextFIFO$EMPTY_N));

  // submodule ofb_inputFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) ofb_inputFIFO(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ofb_inputFIFO$D_IN),
							 .ENQ(ofb_inputFIFO$ENQ),
							 .DEQ(ofb_inputFIFO$DEQ),
							 .CLR(ofb_inputFIFO$CLR),
							 .D_OUT(ofb_inputFIFO$D_OUT),
							 .FULL_N(ofb_inputFIFO$FULL_N),
							 .EMPTY_N(ofb_inputFIFO$EMPTY_N));

  // submodule ofb_outputFIFO
  FIFO2 #(.width(32'd48), .guarded(32'd1)) ofb_outputFIFO(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ofb_outputFIFO$D_IN),
							  .ENQ(ofb_outputFIFO$ENQ),
							  .DEQ(ofb_outputFIFO$DEQ),
							  .CLR(ofb_outputFIFO$CLR),
							  .D_OUT(ofb_outputFIFO$D_OUT),
							  .FULL_N(ofb_outputFIFO$FULL_N),
							  .EMPTY_N(ofb_outputFIFO$EMPTY_N));

  // rule RL_ofb_empty
  assign CAN_FIRE_RL_ofb_empty =
	     ofb_enc_ciphertextFIFO$EMPTY_N && !ofb_started ;
  assign WILL_FIRE_RL_ofb_empty = CAN_FIRE_RL_ofb_empty ;

  // rule RL_ofb_enc_pipeline
  assign CAN_FIRE_RL_ofb_enc_pipeline =
	     (ofb_enc_round != 24'd22 ||
	      ofb_enc_ciphertextFIFO$FULL_N &&
	      ofb_enc_plaintextFIFO$EMPTY_N) &&
	     ofb_enc_plaintextFIFO$EMPTY_N ;
  assign WILL_FIRE_RL_ofb_enc_pipeline = CAN_FIRE_RL_ofb_enc_pipeline ;

  // rule RL_ofb_do_xor
  assign CAN_FIRE_RL_ofb_do_xor =
	     ofb_enc_ciphertextFIFO$EMPTY_N && ofb_outputFIFO$FULL_N &&
	     ofb_inputFIFO$EMPTY_N &&
	     ofb_enc_plaintextFIFO$FULL_N &&
	     ofb_started ;
  assign WILL_FIRE_RL_ofb_do_xor = CAN_FIRE_RL_ofb_do_xor ;

  // inputs to muxes for submodule ports
  assign MUX_ofb_enc_l_0$write_1__SEL_1 =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd0 ;
  assign MUX_ofb_enc_l_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd1 ;
  assign MUX_ofb_enc_l_2$write_1__SEL_1 =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd2 ;
  assign MUX_ofb_enc_l_0$write_1__VAL_1 =
	     b__h3520 + ofb_enc_roundkey ^ ofb_enc_round ;
  assign MUX_ofb_enc_roundkey$write_1__VAL_2 =
	     (ofb_enc_round == 24'd22) ?
	       ofb_enc_k0 :
	       b__h14399 ^ b__h3520 + ofb_enc_roundkey ^ ofb_enc_round ;

  // register ofb_enc_alpha
  assign ofb_enc_alpha$D_IN = 5'h0 ;
  assign ofb_enc_alpha$EN = 1'b0 ;

  // register ofb_enc_beta
  assign ofb_enc_beta$D_IN = 5'h0 ;
  assign ofb_enc_beta$EN = 1'b0 ;

  // register ofb_enc_k0
  assign ofb_enc_k0$D_IN = setKeyIV_key[23:0] ;
  assign ofb_enc_k0$EN = EN_setKeyIV ;

  // register ofb_enc_l_0
  assign ofb_enc_l_0$D_IN =
	     MUX_ofb_enc_l_0$write_1__SEL_1 ?
	       MUX_ofb_enc_l_0$write_1__VAL_1 :
	       setKeyIV_key[47:24] ;
  assign ofb_enc_l_0$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd0 ||
	     EN_setKeyIV ;

  // register ofb_enc_l_1
  assign ofb_enc_l_1$D_IN =
	     MUX_ofb_enc_l_1$write_1__SEL_1 ?
	       MUX_ofb_enc_l_0$write_1__VAL_1 :
	       setKeyIV_key[71:48] ;
  assign ofb_enc_l_1$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd1 ||
	     EN_setKeyIV ;

  // register ofb_enc_l_10
  assign ofb_enc_l_10$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_10$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd10 ;

  // register ofb_enc_l_11
  assign ofb_enc_l_11$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_11$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd11 ;

  // register ofb_enc_l_12
  assign ofb_enc_l_12$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_12$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd12 ;

  // register ofb_enc_l_13
  assign ofb_enc_l_13$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_13$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd13 ;

  // register ofb_enc_l_14
  assign ofb_enc_l_14$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_14$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd14 ;

  // register ofb_enc_l_15
  assign ofb_enc_l_15$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_15$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd15 ;

  // register ofb_enc_l_16
  assign ofb_enc_l_16$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_16$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd16 ;

  // register ofb_enc_l_17
  assign ofb_enc_l_17$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_17$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd17 ;

  // register ofb_enc_l_18
  assign ofb_enc_l_18$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_18$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd18 ;

  // register ofb_enc_l_19
  assign ofb_enc_l_19$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_19$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd19 ;

  // register ofb_enc_l_2
  assign ofb_enc_l_2$D_IN =
	     MUX_ofb_enc_l_2$write_1__SEL_1 ?
	       MUX_ofb_enc_l_0$write_1__VAL_1 :
	       setKeyIV_key[95:72] ;
  assign ofb_enc_l_2$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd2 ||
	     EN_setKeyIV ;

  // register ofb_enc_l_20
  assign ofb_enc_l_20$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_20$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd20 ;

  // register ofb_enc_l_21
  assign ofb_enc_l_21$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_21$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd21 ;

  // register ofb_enc_l_22
  assign ofb_enc_l_22$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_22$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd22 ;

  // register ofb_enc_l_23
  assign ofb_enc_l_23$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_23$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd23 ;

  // register ofb_enc_l_24
  assign ofb_enc_l_24$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_24$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd24 ;

  // register ofb_enc_l_25
  assign ofb_enc_l_25$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_25$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd25 ;

  // register ofb_enc_l_3
  assign ofb_enc_l_3$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_3$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd3 ;

  // register ofb_enc_l_4
  assign ofb_enc_l_4$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_4$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd4 ;

  // register ofb_enc_l_5
  assign ofb_enc_l_5$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_5$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd5 ;

  // register ofb_enc_l_6
  assign ofb_enc_l_6$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_6$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd6 ;

  // register ofb_enc_l_7
  assign ofb_enc_l_7$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_7$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd7 ;

  // register ofb_enc_l_8
  assign ofb_enc_l_8$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_8$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd8 ;

  // register ofb_enc_l_9
  assign ofb_enc_l_9$D_IN = MUX_ofb_enc_l_0$write_1__VAL_1 ;
  assign ofb_enc_l_9$EN = WILL_FIRE_RL_ofb_enc_pipeline && x__h2449 == 24'd9 ;

  // register ofb_enc_round
  assign ofb_enc_round$D_IN =
	     (ofb_enc_round == 24'd22) ? 24'd0 : ofb_enc_round + 24'd1 ;
  assign ofb_enc_round$EN = CAN_FIRE_RL_ofb_enc_pipeline ;

  // register ofb_enc_roundkey
  assign ofb_enc_roundkey$D_IN =
	     EN_setKeyIV ?
	       setKeyIV_key[23:0] :
	       MUX_ofb_enc_roundkey$write_1__VAL_2 ;
  assign ofb_enc_roundkey$EN = EN_setKeyIV || WILL_FIRE_RL_ofb_enc_pipeline ;

  // register ofb_enc_xyReg
  assign ofb_enc_xyReg$D_IN =
	     { IF_24_MINUS_ofb_enc_alpha_7_8_BIT_4_9_THEN_IF__ETC___d379,
	       b__h35998 ^
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_4_9_THEN_IF__ETC___d379 } ;
  assign ofb_enc_xyReg$EN =
	     WILL_FIRE_RL_ofb_enc_pipeline && ofb_enc_round != 24'd22 ;

  // register ofb_started
  assign ofb_started$D_IN = !EN_reset ;
  assign ofb_started$EN = EN_reset || EN_setKeyIV ;

  // submodule ofb_enc_ciphertextFIFO
  assign ofb_enc_ciphertextFIFO$D_IN =
	     { IF_24_MINUS_ofb_enc_alpha_7_8_BIT_4_9_THEN_IF__ETC___d379,
	       b__h35998 ^
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_4_9_THEN_IF__ETC___d379 } ;
  assign ofb_enc_ciphertextFIFO$ENQ =
	     WILL_FIRE_RL_ofb_enc_pipeline && ofb_enc_round == 24'd22 ;
  assign ofb_enc_ciphertextFIFO$DEQ =
	     WILL_FIRE_RL_ofb_empty || WILL_FIRE_RL_ofb_do_xor ;
  assign ofb_enc_ciphertextFIFO$CLR = 1'b0 ;

  // submodule ofb_enc_plaintextFIFO
  assign ofb_enc_plaintextFIFO$D_IN =
	     EN_setKeyIV ? setKeyIV_iv : ofb_enc_ciphertextFIFO$D_OUT ;
  assign ofb_enc_plaintextFIFO$ENQ = EN_setKeyIV || WILL_FIRE_RL_ofb_do_xor ;
  assign ofb_enc_plaintextFIFO$DEQ =
	     WILL_FIRE_RL_ofb_enc_pipeline && ofb_enc_round == 24'd22 ;
  assign ofb_enc_plaintextFIFO$CLR = 1'b0 ;

  // submodule ofb_inputFIFO
  assign ofb_inputFIFO$D_IN = inputMessage_text ;
  assign ofb_inputFIFO$ENQ = EN_inputMessage ;
  assign ofb_inputFIFO$DEQ = CAN_FIRE_RL_ofb_do_xor ;
  assign ofb_inputFIFO$CLR = 1'b0 ;

  // submodule ofb_outputFIFO
  assign ofb_outputFIFO$D_IN =
	     { ofb_enc_ciphertextFIFO$D_OUT[47:24] ^
	       ofb_inputFIFO$D_OUT[47:24],
	       ofb_enc_ciphertextFIFO$D_OUT[23:0] ^
	       ofb_inputFIFO$D_OUT[23:0] } ;
  assign ofb_outputFIFO$ENQ = CAN_FIRE_RL_ofb_do_xor ;
  assign ofb_outputFIFO$DEQ = EN_getResult ;
  assign ofb_outputFIFO$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d309 =
	     _24_MINUS_ofb_enc_alpha_7___d18[2] ?
	       (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[16:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:17] } :
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[17:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:18] }) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[18:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:19] } :
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[19:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:20] })) :
	       (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[20:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:21] } :
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[21:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:22] }) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[22:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23] } :
		     IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281)) ;
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d79 =
	     _24_MINUS_ofb_enc_alpha_7___d18[2] ?
	       (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[16:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:17] } :
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[17:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:18] }) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[18:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:19] } :
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[19:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:20] })) :
	       (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[20:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:21] } :
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[21:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:22] }) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
		     { SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[22:0],
		       SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23] } :
		     SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51)) ;
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d111 =
	     _24_MINUS_ofb_enc_alpha_7___d18[3] ?
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d79 :
	       (_24_MINUS_ofb_enc_alpha_7___d18[2] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:1] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[1:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:2] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[2:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:3] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[3:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:4] })) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[4:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:5] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[5:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:6] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[6:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:7] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[7:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:8] }))) ;
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d143 =
	     _24_MINUS_ofb_enc_alpha_7___d18[3] ?
	       (_24_MINUS_ofb_enc_alpha_7___d18[2] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[8:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:9] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[9:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:10] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[10:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:11] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[11:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:12] })) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[12:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:13] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[13:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:14] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[14:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:15] } :
			{ SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[15:0],
			  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51[23:16] }))) :
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d79 ;
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d341 =
	     _24_MINUS_ofb_enc_alpha_7___d18[3] ?
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d309 :
	       (_24_MINUS_ofb_enc_alpha_7___d18[2] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:1] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[1:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:2] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[2:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:3] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[3:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:4] })) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[4:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:5] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[5:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:6] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[6:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:7] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[7:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:8] }))) ;
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d373 =
	     _24_MINUS_ofb_enc_alpha_7___d18[3] ?
	       (_24_MINUS_ofb_enc_alpha_7___d18[2] ?
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[8:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:9] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[9:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:10] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[10:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:11] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[11:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:12] })) :
		  (_24_MINUS_ofb_enc_alpha_7___d18[1] ?
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[12:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:13] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[13:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:14] }) :
		     (_24_MINUS_ofb_enc_alpha_7___d18[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[14:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:15] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[15:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281[23:16] }))) :
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_2_1_THEN_IF__ETC___d309 ;
  assign IF_24_MINUS_ofb_enc_alpha_7_8_BIT_4_9_THEN_IF__ETC___d379 =
	     b__h25217 +
	     IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377 ^
	     ofb_enc_roundkey ;
  assign IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d207 =
	     ofb_enc_beta[2] ?
	       (ofb_enc_beta[1] ?
		  (ofb_enc_beta[0] ?
		     { ofb_enc_roundkey[16:0], ofb_enc_roundkey[23:17] } :
		     { ofb_enc_roundkey[17:0], ofb_enc_roundkey[23:18] }) :
		  (ofb_enc_beta[0] ?
		     { ofb_enc_roundkey[18:0], ofb_enc_roundkey[23:19] } :
		     { ofb_enc_roundkey[19:0], ofb_enc_roundkey[23:20] })) :
	       (ofb_enc_beta[1] ?
		  (ofb_enc_beta[0] ?
		     { ofb_enc_roundkey[20:0], ofb_enc_roundkey[23:21] } :
		     { ofb_enc_roundkey[21:0], ofb_enc_roundkey[23:22] }) :
		  (ofb_enc_beta[0] ?
		     { ofb_enc_roundkey[22:0], ofb_enc_roundkey[23] } :
		     ofb_enc_roundkey)) ;
  assign IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d407 =
	     ofb_enc_beta[2] ?
	       (ofb_enc_beta[1] ?
		  (ofb_enc_beta[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[16:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:17] } :
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[17:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:18] }) :
		  (ofb_enc_beta[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[18:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:19] } :
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[19:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:20] })) :
	       (ofb_enc_beta[1] ?
		  (ofb_enc_beta[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[20:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:21] } :
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[21:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:22] }) :
		  (ofb_enc_beta[0] ?
		     { IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[22:0],
		       IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23] } :
		     IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377)) ;
  assign IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d239 =
	     ofb_enc_beta[3] ?
	       IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d207 :
	       (ofb_enc_beta[2] ?
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[0], ofb_enc_roundkey[23:1] } :
			{ ofb_enc_roundkey[1:0], ofb_enc_roundkey[23:2] }) :
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[2:0], ofb_enc_roundkey[23:3] } :
			{ ofb_enc_roundkey[3:0], ofb_enc_roundkey[23:4] })) :
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[4:0], ofb_enc_roundkey[23:5] } :
			{ ofb_enc_roundkey[5:0], ofb_enc_roundkey[23:6] }) :
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[6:0], ofb_enc_roundkey[23:7] } :
			{ ofb_enc_roundkey[7:0], ofb_enc_roundkey[23:8] }))) ;
  assign IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d271 =
	     ofb_enc_beta[3] ?
	       (ofb_enc_beta[2] ?
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[8:0], ofb_enc_roundkey[23:9] } :
			{ ofb_enc_roundkey[9:0], ofb_enc_roundkey[23:10] }) :
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[10:0], ofb_enc_roundkey[23:11] } :
			{ ofb_enc_roundkey[11:0],
			  ofb_enc_roundkey[23:12] })) :
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[12:0], ofb_enc_roundkey[23:13] } :
			{ ofb_enc_roundkey[13:0], ofb_enc_roundkey[23:14] }) :
		     (ofb_enc_beta[0] ?
			{ ofb_enc_roundkey[14:0], ofb_enc_roundkey[23:15] } :
			{ ofb_enc_roundkey[15:0],
			  ofb_enc_roundkey[23:16] }))) :
	       IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d207 ;
  assign IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d439 =
	     ofb_enc_beta[3] ?
	       IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d407 :
	       (ofb_enc_beta[2] ?
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:1] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[1:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:2] }) :
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[2:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:3] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[3:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:4] })) :
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[4:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:5] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[5:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:6] }) :
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[6:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:7] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[7:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:8] }))) ;
  assign IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d471 =
	     ofb_enc_beta[3] ?
	       (ofb_enc_beta[2] ?
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[8:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:9] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[9:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:10] }) :
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[10:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:11] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[11:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:12] })) :
		  (ofb_enc_beta[1] ?
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[12:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:13] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[13:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:14] }) :
		     (ofb_enc_beta[0] ?
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[14:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:15] } :
			{ IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[15:0],
			  IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377[23:16] }))) :
	       IF_ofb_enc_beta_74_BIT_2_77_THEN_IF_ofb_enc_be_ETC___d407 ;
  assign IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d281 =
	     (ofb_enc_round == 24'd0) ?
	       ofb_enc_plaintextFIFO$D_OUT[47:24] :
	       ofb_enc_xyReg[47:24] ;
  assign IF_ofb_enc_round_EQ_0_THEN_ofb_enc_plaintextFI_ETC___d377 =
	     (ofb_enc_round == 24'd0) ?
	       ofb_enc_plaintextFIFO$D_OUT[23:0] :
	       ofb_enc_xyReg[23:0] ;
  assign _24_MINUS_ofb_enc_alpha_7___d18 = 5'd24 - ofb_enc_alpha ;
  assign b__h14399 =
	     ofb_enc_beta[4] ?
	       IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d239 :
	       IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d271 ;
  assign b__h25217 =
	     _24_MINUS_ofb_enc_alpha_7___d18[4] ?
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d341 :
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d373 ;
  assign b__h3520 =
	     _24_MINUS_ofb_enc_alpha_7___d18[4] ?
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d111 :
	       IF_24_MINUS_ofb_enc_alpha_7_8_BIT_3_0_THEN_IF__ETC___d143 ;
  assign b__h35998 =
	     ofb_enc_beta[4] ?
	       IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d439 :
	       IF_ofb_enc_beta_74_BIT_3_76_THEN_IF_ofb_enc_be_ETC___d471 ;
  assign x__h2449 = ofb_enc_round + 24'd4 - 24'd1 ;
  always@(ofb_enc_round or
	  ofb_enc_l_0 or
	  ofb_enc_l_1 or
	  ofb_enc_l_2 or
	  ofb_enc_l_3 or
	  ofb_enc_l_4 or
	  ofb_enc_l_5 or
	  ofb_enc_l_6 or
	  ofb_enc_l_7 or
	  ofb_enc_l_8 or
	  ofb_enc_l_9 or
	  ofb_enc_l_10 or
	  ofb_enc_l_11 or
	  ofb_enc_l_12 or
	  ofb_enc_l_13 or
	  ofb_enc_l_14 or
	  ofb_enc_l_15 or
	  ofb_enc_l_16 or
	  ofb_enc_l_17 or
	  ofb_enc_l_18 or
	  ofb_enc_l_19 or
	  ofb_enc_l_20 or
	  ofb_enc_l_21 or
	  ofb_enc_l_22 or ofb_enc_l_23 or ofb_enc_l_24 or ofb_enc_l_25)
  begin
    case (ofb_enc_round)
      24'd0:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_0;
      24'd1:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_1;
      24'd2:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_2;
      24'd3:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_3;
      24'd4:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_4;
      24'd5:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_5;
      24'd6:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_6;
      24'd7:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_7;
      24'd8:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_8;
      24'd9:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_9;
      24'd10:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_10;
      24'd11:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_11;
      24'd12:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_12;
      24'd13:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_13;
      24'd14:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_14;
      24'd15:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_15;
      24'd16:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_16;
      24'd17:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_17;
      24'd18:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_18;
      24'd19:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_19;
      24'd20:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_20;
      24'd21:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_21;
      24'd22:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_22;
      24'd23:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_23;
      24'd24:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_24;
      24'd25:
	  SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
	      ofb_enc_l_25;
      default: SEL_ARR_ofb_enc_l_0_4_ofb_enc_l_1_5_ofb_enc_l__ETC___d51 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ofb_enc_alpha <= `BSV_ASSIGNMENT_DELAY 5'd8;
	ofb_enc_beta <= `BSV_ASSIGNMENT_DELAY 5'd3;
	ofb_enc_k0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_0 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_1 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_10 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_11 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_12 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_13 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_14 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_15 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_16 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_17 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_18 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_19 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_2 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_20 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_21 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_22 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_23 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_24 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_25 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_3 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_4 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_5 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_6 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_7 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_8 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_l_9 <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_round <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_roundkey <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ofb_enc_xyReg <= `BSV_ASSIGNMENT_DELAY 48'd0;
	ofb_started <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ofb_enc_alpha$EN)
	  ofb_enc_alpha <= `BSV_ASSIGNMENT_DELAY ofb_enc_alpha$D_IN;
	if (ofb_enc_beta$EN)
	  ofb_enc_beta <= `BSV_ASSIGNMENT_DELAY ofb_enc_beta$D_IN;
	if (ofb_enc_k0$EN)
	  ofb_enc_k0 <= `BSV_ASSIGNMENT_DELAY ofb_enc_k0$D_IN;
	if (ofb_enc_l_0$EN)
	  ofb_enc_l_0 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_0$D_IN;
	if (ofb_enc_l_1$EN)
	  ofb_enc_l_1 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_1$D_IN;
	if (ofb_enc_l_10$EN)
	  ofb_enc_l_10 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_10$D_IN;
	if (ofb_enc_l_11$EN)
	  ofb_enc_l_11 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_11$D_IN;
	if (ofb_enc_l_12$EN)
	  ofb_enc_l_12 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_12$D_IN;
	if (ofb_enc_l_13$EN)
	  ofb_enc_l_13 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_13$D_IN;
	if (ofb_enc_l_14$EN)
	  ofb_enc_l_14 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_14$D_IN;
	if (ofb_enc_l_15$EN)
	  ofb_enc_l_15 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_15$D_IN;
	if (ofb_enc_l_16$EN)
	  ofb_enc_l_16 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_16$D_IN;
	if (ofb_enc_l_17$EN)
	  ofb_enc_l_17 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_17$D_IN;
	if (ofb_enc_l_18$EN)
	  ofb_enc_l_18 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_18$D_IN;
	if (ofb_enc_l_19$EN)
	  ofb_enc_l_19 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_19$D_IN;
	if (ofb_enc_l_2$EN)
	  ofb_enc_l_2 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_2$D_IN;
	if (ofb_enc_l_20$EN)
	  ofb_enc_l_20 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_20$D_IN;
	if (ofb_enc_l_21$EN)
	  ofb_enc_l_21 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_21$D_IN;
	if (ofb_enc_l_22$EN)
	  ofb_enc_l_22 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_22$D_IN;
	if (ofb_enc_l_23$EN)
	  ofb_enc_l_23 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_23$D_IN;
	if (ofb_enc_l_24$EN)
	  ofb_enc_l_24 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_24$D_IN;
	if (ofb_enc_l_25$EN)
	  ofb_enc_l_25 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_25$D_IN;
	if (ofb_enc_l_3$EN)
	  ofb_enc_l_3 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_3$D_IN;
	if (ofb_enc_l_4$EN)
	  ofb_enc_l_4 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_4$D_IN;
	if (ofb_enc_l_5$EN)
	  ofb_enc_l_5 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_5$D_IN;
	if (ofb_enc_l_6$EN)
	  ofb_enc_l_6 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_6$D_IN;
	if (ofb_enc_l_7$EN)
	  ofb_enc_l_7 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_7$D_IN;
	if (ofb_enc_l_8$EN)
	  ofb_enc_l_8 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_8$D_IN;
	if (ofb_enc_l_9$EN)
	  ofb_enc_l_9 <= `BSV_ASSIGNMENT_DELAY ofb_enc_l_9$D_IN;
	if (ofb_enc_round$EN)
	  ofb_enc_round <= `BSV_ASSIGNMENT_DELAY ofb_enc_round$D_IN;
	if (ofb_enc_roundkey$EN)
	  ofb_enc_roundkey <= `BSV_ASSIGNMENT_DELAY ofb_enc_roundkey$D_IN;
	if (ofb_enc_xyReg$EN)
	  ofb_enc_xyReg <= `BSV_ASSIGNMENT_DELAY ofb_enc_xyReg$D_IN;
	if (ofb_started$EN)
	  ofb_started <= `BSV_ASSIGNMENT_DELAY ofb_started$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ofb_enc_alpha = 5'h0A;
    ofb_enc_beta = 5'h0A;
    ofb_enc_k0 = 24'hAAAAAA;
    ofb_enc_l_0 = 24'hAAAAAA;
    ofb_enc_l_1 = 24'hAAAAAA;
    ofb_enc_l_10 = 24'hAAAAAA;
    ofb_enc_l_11 = 24'hAAAAAA;
    ofb_enc_l_12 = 24'hAAAAAA;
    ofb_enc_l_13 = 24'hAAAAAA;
    ofb_enc_l_14 = 24'hAAAAAA;
    ofb_enc_l_15 = 24'hAAAAAA;
    ofb_enc_l_16 = 24'hAAAAAA;
    ofb_enc_l_17 = 24'hAAAAAA;
    ofb_enc_l_18 = 24'hAAAAAA;
    ofb_enc_l_19 = 24'hAAAAAA;
    ofb_enc_l_2 = 24'hAAAAAA;
    ofb_enc_l_20 = 24'hAAAAAA;
    ofb_enc_l_21 = 24'hAAAAAA;
    ofb_enc_l_22 = 24'hAAAAAA;
    ofb_enc_l_23 = 24'hAAAAAA;
    ofb_enc_l_24 = 24'hAAAAAA;
    ofb_enc_l_25 = 24'hAAAAAA;
    ofb_enc_l_3 = 24'hAAAAAA;
    ofb_enc_l_4 = 24'hAAAAAA;
    ofb_enc_l_5 = 24'hAAAAAA;
    ofb_enc_l_6 = 24'hAAAAAA;
    ofb_enc_l_7 = 24'hAAAAAA;
    ofb_enc_l_8 = 24'hAAAAAA;
    ofb_enc_l_9 = 24'hAAAAAA;
    ofb_enc_round = 24'hAAAAAA;
    ofb_enc_roundkey = 24'hAAAAAA;
    ofb_enc_xyReg = 48'hAAAAAAAAAAAA;
    ofb_started = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSynthesizedOFB

